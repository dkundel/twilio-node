/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SegmentMembershipListInstance } from './user/segmentMemberships';
import { UserBindingListInstance } from './user/userBinding';

declare function UserList(version: V1, serviceSid: string): UserListInstance

interface UserResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The identity
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  /**
   * The segments
   */
  segments: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

interface UserPayload extends UserResource, Page.TwilioResponsePayload {
}

interface UserSolution {
  serviceSid: string;
}

interface UserListCreateOptions {
  /**
   * The identity
   */
  identity: string;
  /**
   * The segment
   */
  segment?: string[];
}

interface UserListEachOptions extends ListEachOptions<UserInstance> {
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The segment
   */
  segment?: string;
}

interface UserListOptions extends ListOptions<UserInstance> {
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The segment
   */
  segment?: string;
}

interface UserListPageOptions extends PageOptions<UserPage> {
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The segment
   */
  segment?: string;
}

interface UserListInstance {
  /**
   * Gets context of a single User resource
   *
   * @param identity - The identity
   */
  (identity: string): UserContext;
  /**
   * create a UserInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UserInstance
   */
  create(opts: UserListCreateOptions): Promise<UserInstance>;
  /**
   * create a UserInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: UserListCreateOptions, callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * Streams UserInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: UserListEachOptions): void;
  /**
   * Streams UserInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: UserInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single User resource
   *
   * @param identity - The identity
   */
  get(identity: string): UserContext;
  /**
   * Retrieve a single target page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<UserPage>;
  /**
   * Retrieve a single target page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: UserPage) => any): void;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: UserListOptions): Promise<UserInstance[]>;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: UserListOptions, callback: (error: Error | null, items: UserInstance[]) => any): void;
  /**
   * Lists UserInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: UserInstance[]) => any): void;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: UserListPageOptions): Promise<UserPage>;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: UserListPageOptions, callback: (error: Error | null, items: UserPage) => any): void;
  /**
   * Retrieve a single page of UserInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: UserPage) => any): void;
}

declare class UserPage extends Page<V1, UserPayload, UserResource, UserInstance> {
  constructor(version: V1, response: Response<string>, solution: UserSolution);

  /**
   * Build an instance of UserInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: UserPayload): UserInstance;
}

declare class UserInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param identity - The identity
   */
  constructor(version: V1, payload: UserPayload, serviceSid: string, identity: string);

  private _proxy: UserContext;
  /**
   * The account_sid
   */
  accountSid: string;
  bindings(): UserBindingListInstance;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  fetch(): Promise<UserInstance>;
  /**
   * fetch a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * The identity
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  /**
   * remove a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  remove(): Promise<UserInstance>;
  /**
   * remove a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: UserInstance) => any): void;
  segmentMemberships(): SegmentMembershipListInstance;
  /**
   * The segments
   */
  segments: string;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

declare class UserContext {
  constructor(version: V1, serviceSid: string, identity: string);

  bindings: UserBindingListInstance;
  /**
   * fetch a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  fetch(): Promise<UserInstance>;
  /**
   * fetch a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UserInstance) => any): void;
  /**
   * remove a UserInstance
   *
   * @returns Promise that resolves to processed UserInstance
   */
  remove(): Promise<UserInstance>;
  /**
   * remove a UserInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: UserInstance) => any): void;
  segmentMemberships: SegmentMembershipListInstance;
}

export {UserListCreateOptions, UserInstance, UserListEachOptions, UserResource, UserListPageOptions, UserPayload, UserContext, UserSolution, UserListOptions, UserList, UserListInstance, UserPage}
