/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function BindingList(version: V1, serviceSid: string): BindingListInstance

type BindingBindingType = 'apn'|'gcm'|'sms'|'fcm'|'facebook-messenger'|'alexa';

interface BindingResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The address
   */
  address: string;
  /**
   * The binding_type
   */
  binding_type: string;
  /**
   * The credential_sid
   */
  credential_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The endpoint
   */
  endpoint: string;
  /**
   * The identity
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  /**
   * The notification_protocol_version
   */
  notification_protocol_version: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The tags
   */
  tags: string;
  /**
   * The url
   */
  url: string;
}

interface BindingPayload extends BindingResource, Page.TwilioResponsePayload {
}

interface BindingSolution {
  serviceSid: string;
}

interface BindingListCreateOptions {
  /**
   * The address
   */
  address: string;
  /**
   * The binding_type
   */
  bindingType: BindingBindingType;
  /**
   * The credential_sid
   */
  credentialSid?: string;
  /**
   * The endpoint
   */
  endpoint?: string;
  /**
   * The identity
   */
  identity: string;
  /**
   * The notification_protocol_version
   */
  notificationProtocolVersion?: string;
  /**
   * The tag
   */
  tag?: string[];
}

interface BindingListEachOptions extends ListEachOptions<BindingInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The tag
   */
  tag?: string[];
}

interface BindingListOptions extends ListOptions<BindingInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The tag
   */
  tag?: string[];
}

interface BindingListPageOptions extends PageOptions<BindingPage> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The tag
   */
  tag?: string[];
}

interface BindingListInstance {
  /**
   * Gets context of a single Binding resource
   *
   * @param sid - The sid
   */
  (sid: string): BindingContext;
  /**
   * create a BindingInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed BindingInstance
   */
  create(opts: BindingListCreateOptions): Promise<BindingInstance>;
  /**
   * create a BindingInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: BindingListCreateOptions, callback: (error: Error | null, items: BindingInstance) => any): void;
  /**
   * Streams BindingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: BindingListEachOptions): void;
  /**
   * Streams BindingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: BindingInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Binding resource
   *
   * @param sid - The sid
   */
  get(sid: string): BindingContext;
  /**
   * Retrieve a single target page of BindingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<BindingPage>;
  /**
   * Retrieve a single target page of BindingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: BindingPage) => any): void;
  /**
   * Lists BindingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: BindingListOptions): Promise<BindingInstance[]>;
  /**
   * Lists BindingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: BindingListOptions, callback: (error: Error | null, items: BindingInstance[]) => any): void;
  /**
   * Lists BindingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: BindingInstance[]) => any): void;
  /**
   * Retrieve a single page of BindingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: BindingListPageOptions): Promise<BindingPage>;
  /**
   * Retrieve a single page of BindingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: BindingListPageOptions, callback: (error: Error | null, items: BindingPage) => any): void;
  /**
   * Retrieve a single page of BindingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: BindingPage) => any): void;
}

declare class BindingPage extends Page<V1, BindingPayload, BindingResource, BindingInstance> {
  constructor(version: V1, response: Response<string>, solution: BindingSolution);

  /**
   * Build an instance of BindingInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: BindingPayload): BindingInstance;
}

declare class BindingInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: BindingPayload, serviceSid: string, sid: string);

  private _proxy: BindingContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The address
   */
  address: string;
  /**
   * The binding_type
   */
  bindingType: string;
  /**
   * The credential_sid
   */
  credentialSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The endpoint
   */
  endpoint: string;
  /**
   * fetch a BindingInstance
   *
   * @returns Promise that resolves to processed BindingInstance
   */
  fetch(): Promise<BindingInstance>;
  /**
   * fetch a BindingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: BindingInstance) => any): void;
  /**
   * The identity
   */
  identity: string;
  /**
   * The links
   */
  links: string;
  /**
   * The notification_protocol_version
   */
  notificationProtocolVersion: string;
  /**
   * remove a BindingInstance
   *
   * @returns Promise that resolves to processed BindingInstance
   */
  remove(): Promise<BindingInstance>;
  /**
   * remove a BindingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: BindingInstance) => any): void;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The tags
   */
  tags: string;
  /**
   * The url
   */
  url: string;
}

declare class BindingContext {
  constructor(version: V1, serviceSid: string, sid: string);

  /**
   * fetch a BindingInstance
   *
   * @returns Promise that resolves to processed BindingInstance
   */
  fetch(): Promise<BindingInstance>;
  /**
   * fetch a BindingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: BindingInstance) => any): void;
  /**
   * remove a BindingInstance
   *
   * @returns Promise that resolves to processed BindingInstance
   */
  remove(): Promise<BindingInstance>;
  /**
   * remove a BindingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: BindingInstance) => any): void;
}

export { BindingBindingType, BindingContext, BindingInstance, BindingList, BindingListCreateOptions, BindingListEachOptions, BindingListInstance, BindingListOptions, BindingListPageOptions, BindingPage, BindingPayload, BindingResource, BindingSolution }
