/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');

declare function NotificationList(version: V1, serviceSid: string): NotificationListInstance

type NotificationPriority = 'high'|'low';

interface NotificationResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The action
   */
  action: string;
  /**
   * The alexa
   */
  alexa: string;
  /**
   * The apn
   */
  apn: string;
  /**
   * The body
   */
  body: string;
  /**
   * The data
   */
  data: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The facebook_messenger
   */
  facebook_messenger: string;
  /**
   * The fcm
   */
  fcm: string;
  /**
   * The gcm
   */
  gcm: string;
  /**
   * The identities
   */
  identities: string;
  /**
   * The priority
   */
  priority: NotificationPriority;
  /**
   * The segments
   */
  segments: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sms
   */
  sms: string;
  /**
   * The sound
   */
  sound: string;
  /**
   * The tags
   */
  tags: string;
  /**
   * The title
   */
  title: string;
  /**
   * The ttl
   */
  ttl: number;
}

interface NotificationPayload extends NotificationResource, Page.TwilioResponsePayload {
}

interface NotificationSolution {
  serviceSid: string;
}

interface NotificationListCreateOptions {
  /**
   * The action
   */
  action?: string;
  /**
   * The alexa
   */
  alexa?: string;
  /**
   * The apn
   */
  apn?: string;
  /**
   * The body
   */
  body?: string;
  /**
   * The data
   */
  data?: string;
  /**
   * The facebook_messenger
   */
  facebookMessenger?: string;
  /**
   * The fcm
   */
  fcm?: string;
  /**
   * The gcm
   */
  gcm?: string;
  /**
   * The identity
   */
  identity?: string[];
  /**
   * The priority
   */
  priority?: NotificationPriority;
  /**
   * The segment
   */
  segment?: string[];
  /**
   * The sms
   */
  sms?: string;
  /**
   * The sound
   */
  sound?: string;
  /**
   * The tag
   */
  tag?: string[];
  /**
   * The title
   */
  title?: string;
  /**
   * The to_binding
   */
  toBinding?: string[];
  /**
   * The ttl
   */
  ttl?: number;
}

interface NotificationListInstance {
  /**
   * create a NotificationInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed NotificationInstance
   */
  create(opts?: NotificationListCreateOptions): Promise<NotificationInstance>;
  /**
   * create a NotificationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: NotificationListCreateOptions, callback: (error: Error | null, items: NotificationInstance) => any): void;
  /**
   * create a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: NotificationInstance) => any): void;
}

declare class NotificationPage extends Page<V1, NotificationPayload, NotificationResource, NotificationInstance> {
  constructor(version: V1, response: Response<string>, solution: NotificationSolution);

  /**
   * Build an instance of NotificationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: NotificationPayload): NotificationInstance;
}

declare class NotificationInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V1, payload: NotificationPayload);

  private _proxy: NotificationContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The action
   */
  action: string;
  /**
   * The alexa
   */
  alexa: string;
  /**
   * The apn
   */
  apn: string;
  /**
   * The body
   */
  body: string;
  /**
   * The data
   */
  data: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The facebook_messenger
   */
  facebookMessenger: string;
  /**
   * The fcm
   */
  fcm: string;
  /**
   * The gcm
   */
  gcm: string;
  /**
   * The identities
   */
  identities: string;
  /**
   * The priority
   */
  priority: NotificationPriority;
  /**
   * The segments
   */
  segments: string;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sms
   */
  sms: string;
  /**
   * The sound
   */
  sound: string;
  /**
   * The tags
   */
  tags: string;
  /**
   * The title
   */
  title: string;
  /**
   * The ttl
   */
  ttl: number;
}

export {NotificationPage, NotificationResource, NotificationPayload, NotificationSolution, NotificationListInstance, NotificationListCreateOptions, NotificationInstance, NotificationPriority, NotificationList}
