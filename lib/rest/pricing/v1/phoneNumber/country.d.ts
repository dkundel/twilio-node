/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function CountryList(version: V1): CountryListInstance

interface CountryResource {
  /**
   * The country
   */
  country: string;
  /**
   * The iso_country
   */
  iso_country: string;
  /**
   * The phone_number_prices
   */
  phone_number_prices?: string;
  /**
   * The price_unit
   */
  price_unit?: string;
  /**
   * The url
   */
  url: string;
}

interface CountryPayload extends CountryResource, Page.TwilioResponsePayload {
}

interface CountrySolution {
}

interface CountryListEachOptions extends ListEachOptions<CountryInstance> {
}

interface CountryListOptions extends ListOptions<CountryInstance> {
}

interface CountryListPageOptions extends PageOptions<CountryPage> {
}

interface CountryListInstance {
  /**
   * Gets context of a single Country resource
   *
   * @param isoCountry - The iso_country
   */
  (isoCountry: string): CountryContext;
  /**
   * Streams CountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CountryListEachOptions): void;
  /**
   * Streams CountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CountryInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Country resource
   *
   * @param isoCountry - The iso_country
   */
  get(isoCountry: string): CountryContext;
  /**
   * Retrieve a single target page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CountryPage>;
  /**
   * Retrieve a single target page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CountryPage) => any): void;
  /**
   * Lists CountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CountryListOptions): Promise<CountryInstance[]>;
  /**
   * Lists CountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CountryListOptions, callback: (error: Error | null, items: CountryInstance[]) => any): void;
  /**
   * Lists CountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CountryInstance[]) => any): void;
  /**
   * Retrieve a single page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CountryListPageOptions): Promise<CountryPage>;
  /**
   * Retrieve a single page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CountryListPageOptions, callback: (error: Error | null, items: CountryPage) => any): void;
  /**
   * Retrieve a single page of CountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CountryPage) => any): void;
}

declare class CountryPage extends Page<V1, CountryPayload, CountryResource, CountryInstance> {
  constructor(version: V1, response: Response<string>, solution: CountrySolution);

  /**
   * Build an instance of CountryInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CountryPayload): CountryInstance;
}

declare class CountryInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param isoCountry - The iso_country
   */
  constructor(version: V1, payload: CountryPayload, isoCountry: string);

  private _proxy: CountryContext;
  /**
   * The country
   */
  country: string;
  /**
   * fetch a CountryInstance
   *
   * @returns Promise that resolves to processed CountryInstance
   */
  fetch(): Promise<CountryInstance>;
  /**
   * fetch a CountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CountryInstance) => any): void;
  /**
   * The iso_country
   */
  isoCountry: string;
  /**
   * The phone_number_prices
   */
  phoneNumberPrices: string;
  /**
   * The price_unit
   */
  priceUnit: string;
  /**
   * The url
   */
  url: string;
}

declare class CountryContext {
  constructor(version: V1, isoCountry: string);

  /**
   * fetch a CountryInstance
   *
   * @returns Promise that resolves to processed CountryInstance
   */
  fetch(): Promise<CountryInstance>;
  /**
   * fetch a CountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CountryInstance) => any): void;
}

export {CountryListEachOptions, CountrySolution, CountryContext, CountryInstance, CountryList, CountryResource, CountryListPageOptions, CountryPage, CountryListInstance, CountryPayload, CountryListOptions}
