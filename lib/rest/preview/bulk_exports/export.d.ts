/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import BulkExports = require('../BulkExports');
import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import { DayListInstance } from './export/day';

declare function ExportList(version: BulkExports): ExportListInstance

interface ExportResource {
  /**
   * The links
   */
  links: string;
  /**
   * The resource_type
   */
  resource_type: string;
  /**
   * The url
   */
  url: string;
}

interface ExportPayload extends ExportResource, Page.TwilioResponsePayload {
}

interface ExportSolution {
}

interface ExportListInstance {
  /**
   * Gets context of a single Export resource
   *
   * @param resourceType - The resource_type
   */
  (resourceType: string): ExportContext;
  /**
   * Gets context of a single Export resource
   *
   * @param resourceType - The resource_type
   */
  get(resourceType: string): ExportContext;
}

declare class ExportPage extends Page<BulkExports, ExportPayload, ExportResource, ExportInstance> {
  constructor(version: BulkExports, response: Response<string>, solution: ExportSolution);

  /**
   * Build an instance of ExportInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ExportPayload): ExportInstance;
}

declare class ExportInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param resourceType - The resource_type
   */
  constructor(version: BulkExports, payload: ExportPayload, resourceType: string);

  private _proxy: ExportContext;
  days(): DayListInstance;
  /**
   * fetch a ExportInstance
   *
   * @returns Promise that resolves to processed ExportInstance
   */
  fetch(): Promise<ExportInstance>;
  /**
   * fetch a ExportInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ExportInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * The resource_type
   */
  resourceType: string;
  /**
   * The url
   */
  url: string;
}

declare class ExportContext {
  constructor(version: BulkExports, resourceType: string);

  days: DayListInstance;
  /**
   * fetch a ExportInstance
   *
   * @returns Promise that resolves to processed ExportInstance
   */
  fetch(): Promise<ExportInstance>;
  /**
   * fetch a ExportInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ExportInstance) => any): void;
}

export { ExportContext, ExportInstance, ExportList, ExportListInstance, ExportPage, ExportPayload, ExportResource, ExportSolution }
