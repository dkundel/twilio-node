/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import DeployedDevices = require('../../DeployedDevices');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function CertificateList(version: DeployedDevices, fleetSid: string): CertificateListInstance

interface CertificateResource {
  /**
   * Specifies the unique string identifier of the Account responsible for this Certificate credential.
   */
  account_sid: string;
  /**
   * Specifies the date this Certificate credential was created, given in UTC ISO 8601 format.
   */
  date_created: Date;
  /**
   * Specifies the date this Certificate credential was last updated, given in UTC ISO 8601 format.
   */
  date_updated: Date;
  /**
   * Specifies the unique string identifier of a Device authenticated with this Certificate credential.
   */
  device_sid: string;
  /**
   * Specifies the unique string identifier of the Fleet that the given Certificate credential belongs to.
   */
  fleet_sid: string;
  /**
   * Contains a human readable descriptive text for this Certificate credential, up to 256 characters long.
   */
  friendly_name: string;
  /**
   * Contains a 34 character string that uniquely identifies this Certificate credential resource.
   */
  sid: string;
  /**
   * Contains a unique hash of the payload of this Certificate credential, used to authenticate the Device.
   */
  thumbprint: string;
  /**
   * Contains an absolute URL for this Certificate credential resource.
   */
  url: string;
}

interface CertificatePayload extends CertificateResource, Page.TwilioResponsePayload {
}

interface CertificateSolution {
  fleetSid: string;
}

interface CertificateListCreateOptions {
  /**
   * Provides a URL encoded representation of the public certificate in PEM format.
   */
  certificateData: string;
  /**
   * Provides the unique string identifier of an existing Device to become authenticated with this Certificate credential.
   */
  deviceSid?: string;
  /**
   * Provides a human readable descriptive text for this Certificate credential, up to 256 characters long.
   */
  friendlyName?: string;
}

interface CertificateListEachOptions extends ListEachOptions<CertificateInstance> {
  /**
   * Filters the resulting list of Certificates by a unique string identifier of an authenticated Device.
   */
  deviceSid?: string;
}

interface CertificateListOptions extends ListOptions<CertificateInstance> {
  /**
   * Filters the resulting list of Certificates by a unique string identifier of an authenticated Device.
   */
  deviceSid?: string;
}

interface CertificateListPageOptions extends PageOptions<CertificatePage> {
  /**
   * Filters the resulting list of Certificates by a unique string identifier of an authenticated Device.
   */
  deviceSid?: string;
}

interface CertificateListInstance {
  /**
   * Gets context of a single Certificate resource
   *
   * @param sid - A string that uniquely identifies the Certificate.
   */
  (sid: string): CertificateContext;
  /**
   * create a CertificateInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  create(opts: CertificateListCreateOptions): Promise<CertificateInstance>;
  /**
   * create a CertificateInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CertificateListCreateOptions, callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * Streams CertificateInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CertificateListEachOptions): void;
  /**
   * Streams CertificateInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CertificateInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Certificate resource
   *
   * @param sid - A string that uniquely identifies the Certificate.
   */
  get(sid: string): CertificateContext;
  /**
   * Retrieve a single target page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CertificatePage>;
  /**
   * Retrieve a single target page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CertificatePage) => any): void;
  /**
   * Lists CertificateInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CertificateListOptions): Promise<CertificateInstance[]>;
  /**
   * Lists CertificateInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CertificateListOptions, callback: (error: Error | null, items: CertificateInstance[]) => any): void;
  /**
   * Lists CertificateInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CertificateInstance[]) => any): void;
  /**
   * Retrieve a single page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CertificateListPageOptions): Promise<CertificatePage>;
  /**
   * Retrieve a single page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CertificateListPageOptions, callback: (error: Error | null, items: CertificatePage) => any): void;
  /**
   * Retrieve a single page of CertificateInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CertificatePage) => any): void;
}

interface CertificateListFetchOptions {
  /**
   * Provides the unique string identifier of an existing Device to become authenticated with this Certificate credential.
   */
  deviceSid?: string;
  /**
   * Provides a human readable descriptive text for this Certificate credential, up to 256 characters long.
   */
  friendlyName?: string;
}

interface CertificateListFetchOptions {
  /**
   * Provides the unique string identifier of an existing Device to become authenticated with this Certificate credential.
   */
  deviceSid?: string;
  /**
   * Provides a human readable descriptive text for this Certificate credential, up to 256 characters long.
   */
  friendlyName?: string;
}

declare class CertificatePage extends Page<DeployedDevices, CertificatePayload, CertificateResource, CertificateInstance> {
  constructor(version: DeployedDevices, response: Response<string>, solution: CertificateSolution);

  /**
   * Build an instance of CertificateInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CertificatePayload): CertificateInstance;
}

declare class CertificateInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param fleetSid - The fleet_sid
   * @param sid - A string that uniquely identifies the Certificate.
   */
  constructor(version: DeployedDevices, payload: CertificatePayload, fleetSid: string, sid: string);

  private _proxy: CertificateContext;
  /**
   * Specifies the unique string identifier of the Account responsible for this Certificate credential.
   */
  accountSid: string;
  /**
   * Specifies the date this Certificate credential was created, given in UTC ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * Specifies the date this Certificate credential was last updated, given in UTC ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * Specifies the unique string identifier of a Device authenticated with this Certificate credential.
   */
  deviceSid: string;
  /**
   * fetch a CertificateInstance
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  fetch(): Promise<CertificateInstance>;
  /**
   * fetch a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * Specifies the unique string identifier of the Fleet that the given Certificate credential belongs to.
   */
  fleetSid: string;
  /**
   * Contains a human readable descriptive text for this Certificate credential, up to 256 characters long.
   */
  friendlyName: string;
  /**
   * remove a CertificateInstance
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  remove(): Promise<CertificateInstance>;
  /**
   * remove a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * Contains a 34 character string that uniquely identifies this Certificate credential resource.
   */
  sid: string;
  /**
   * Contains a unique hash of the payload of this Certificate credential, used to authenticate the Device.
   */
  thumbprint: string;
  /**
   * update a CertificateInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  update(opts?: CertificateListFetchOptions): Promise<CertificateInstance>;
  /**
   * update a CertificateInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CertificateListFetchOptions, callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * update a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * Contains an absolute URL for this Certificate credential resource.
   */
  url: string;
}

declare class CertificateContext {
  constructor(version: DeployedDevices, fleetSid: string, sid: string);

  /**
   * fetch a CertificateInstance
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  fetch(): Promise<CertificateInstance>;
  /**
   * fetch a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * remove a CertificateInstance
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  remove(): Promise<CertificateInstance>;
  /**
   * remove a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * update a CertificateInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CertificateInstance
   */
  update(opts?: CertificateListFetchOptions): Promise<CertificateInstance>;
  /**
   * update a CertificateInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CertificateListFetchOptions, callback: (error: Error | null, items: CertificateInstance) => any): void;
  /**
   * update a CertificateInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CertificateInstance) => any): void;
}

export {CertificateResource, CertificateListInstance, CertificateSolution, CertificateListPageOptions, CertificateListOptions, CertificateContext, CertificateInstance, CertificatePage, CertificateListFetchOptions, CertificateListCreateOptions, CertificateList, CertificateListEachOptions, CertificatePayload}
