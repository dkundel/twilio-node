/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import DeployedDevices = require('../../DeployedDevices');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function DeploymentList(version: DeployedDevices, fleetSid: string): DeploymentListInstance

interface DeploymentResource {
  /**
   * Specifies the unique string identifier of the Account responsible for this Deployment.
   */
  account_sid: string;
  /**
   * Specifies the date this Deployment was created, given in UTC ISO 8601 format.
   */
  date_created: Date;
  /**
   * Specifies the date this Deployment was last updated, given in UTC ISO 8601 format.
   */
  date_updated: Date;
  /**
   * Specifies the unique string identifier of the Fleet that the given Deployment belongs to.
   */
  fleet_sid: string;
  /**
   * Contains a human readable descriptive text for this Deployment, up to 64 characters long
   */
  friendly_name: string;
  /**
   * Contains a 34 character string that uniquely identifies this Deployment resource.
   */
  sid: string;
  /**
   * Specifies the unique string identifier of the Twilio Sync service instance linked to and accessible by this Deployment.
   */
  sync_service_sid: string;
  /**
   * Contains an absolute URL for this Deployment resource.
   */
  url: string;
}

interface DeploymentPayload extends DeploymentResource, Page.TwilioResponsePayload {
}

interface DeploymentSolution {
  fleetSid: string;
}

interface DeploymentListCreateOptions {
  /**
   * Provides a human readable descriptive text for this Deployment, up to 256 characters long.
   */
  friendlyName?: string;
  /**
   * Provides the unique string identifier of the Twilio Sync service instance that will be linked to and accessible by this Deployment.
   */
  syncServiceSid?: string;
}

interface DeploymentListEachOptions extends ListEachOptions<DeploymentInstance> {
}

interface DeploymentListOptions extends ListOptions<DeploymentInstance> {
}

interface DeploymentListPageOptions extends PageOptions<DeploymentPage> {
}

interface DeploymentListInstance {
  /**
   * Gets context of a single Deployment resource
   *
   * @param sid - A string that uniquely identifies the Deployment.
   */
  (sid: string): DeploymentContext;
  /**
   * create a DeploymentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  create(opts?: DeploymentListCreateOptions): Promise<DeploymentInstance>;
  /**
   * create a DeploymentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: DeploymentListCreateOptions, callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * create a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * Streams DeploymentInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: DeploymentListEachOptions): void;
  /**
   * Streams DeploymentInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: DeploymentInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Deployment resource
   *
   * @param sid - A string that uniquely identifies the Deployment.
   */
  get(sid: string): DeploymentContext;
  /**
   * Retrieve a single target page of DeploymentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<DeploymentPage>;
  /**
   * Retrieve a single target page of DeploymentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: DeploymentPage) => any): void;
  /**
   * Lists DeploymentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: DeploymentListOptions): Promise<DeploymentInstance[]>;
  /**
   * Lists DeploymentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: DeploymentListOptions, callback: (error: Error | null, items: DeploymentInstance[]) => any): void;
  /**
   * Lists DeploymentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: DeploymentInstance[]) => any): void;
  /**
   * Retrieve a single page of DeploymentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: DeploymentListPageOptions): Promise<DeploymentPage>;
  /**
   * Retrieve a single page of DeploymentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: DeploymentListPageOptions, callback: (error: Error | null, items: DeploymentPage) => any): void;
  /**
   * Retrieve a single page of DeploymentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: DeploymentPage) => any): void;
}

interface DeploymentListFetchOptions {
  /**
   * Provides a human readable descriptive text for this Deployment, up to 64 characters long
   */
  friendlyName?: string;
  /**
   * Provides the unique string identifier of the Twilio Sync service instance that will be linked to and accessible by this Deployment.
   */
  syncServiceSid?: string;
}

interface DeploymentListFetchOptions {
  /**
   * Provides a human readable descriptive text for this Deployment, up to 64 characters long
   */
  friendlyName?: string;
  /**
   * Provides the unique string identifier of the Twilio Sync service instance that will be linked to and accessible by this Deployment.
   */
  syncServiceSid?: string;
}

declare class DeploymentPage extends Page<DeployedDevices, DeploymentPayload, DeploymentResource, DeploymentInstance> {
  constructor(version: DeployedDevices, response: Response<string>, solution: DeploymentSolution);

  /**
   * Build an instance of DeploymentInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: DeploymentPayload): DeploymentInstance;
}

declare class DeploymentInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param fleetSid - The fleet_sid
   * @param sid - A string that uniquely identifies the Deployment.
   */
  constructor(version: DeployedDevices, payload: DeploymentPayload, fleetSid: string, sid: string);

  private _proxy: DeploymentContext;
  /**
   * Specifies the unique string identifier of the Account responsible for this Deployment.
   */
  accountSid: string;
  /**
   * Specifies the date this Deployment was created, given in UTC ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * Specifies the date this Deployment was last updated, given in UTC ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * fetch a DeploymentInstance
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  fetch(): Promise<DeploymentInstance>;
  /**
   * fetch a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * Specifies the unique string identifier of the Fleet that the given Deployment belongs to.
   */
  fleetSid: string;
  /**
   * Contains a human readable descriptive text for this Deployment, up to 64 characters long
   */
  friendlyName: string;
  /**
   * remove a DeploymentInstance
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  remove(): Promise<DeploymentInstance>;
  /**
   * remove a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * Contains a 34 character string that uniquely identifies this Deployment resource.
   */
  sid: string;
  /**
   * Specifies the unique string identifier of the Twilio Sync service instance linked to and accessible by this Deployment.
   */
  syncServiceSid: string;
  /**
   * update a DeploymentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  update(opts?: DeploymentListFetchOptions): Promise<DeploymentInstance>;
  /**
   * update a DeploymentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DeploymentListFetchOptions, callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * update a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * Contains an absolute URL for this Deployment resource.
   */
  url: string;
}

declare class DeploymentContext {
  constructor(version: DeployedDevices, fleetSid: string, sid: string);

  /**
   * fetch a DeploymentInstance
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  fetch(): Promise<DeploymentInstance>;
  /**
   * fetch a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * remove a DeploymentInstance
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  remove(): Promise<DeploymentInstance>;
  /**
   * remove a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * update a DeploymentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeploymentInstance
   */
  update(opts?: DeploymentListFetchOptions): Promise<DeploymentInstance>;
  /**
   * update a DeploymentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DeploymentListFetchOptions, callback: (error: Error | null, items: DeploymentInstance) => any): void;
  /**
   * update a DeploymentInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: DeploymentInstance) => any): void;
}

export {DeploymentListInstance, DeploymentListCreateOptions, DeploymentListOptions, DeploymentInstance, DeploymentListEachOptions, DeploymentResource, DeploymentListFetchOptions, DeploymentSolution, DeploymentContext, DeploymentList, DeploymentListPageOptions, DeploymentPage, DeploymentPayload}
