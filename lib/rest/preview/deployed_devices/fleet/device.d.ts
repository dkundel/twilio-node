/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import DeployedDevices = require('../../DeployedDevices');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function DeviceList(version: DeployedDevices, fleetSid: string): DeviceListInstance

interface DeviceResource {
  /**
   * Specifies the unique string identifier of the Account responsible for this Device.
   */
  account_sid: string;
  /**
   * Specifies the date this Device was last authenticated, given in UTC ISO 8601 format.
   */
  date_authenticated: Date;
  /**
   * Specifies the date this Device was created, given in UTC ISO 8601 format.
   */
  date_created: Date;
  /**
   * Specifies the date this Device was last updated, given in UTC ISO 8601 format.
   */
  date_updated: Date;
  /**
   * Specifies the unique string identifier of the Deployment group that this Device is associated with.
   */
  deployment_sid: string;
  /**
   * Contains a boolean flag indicating whether the device is enabled or not, blocks device connectivity if set to false.
   */
  enabled: boolean;
  /**
   * Specifies the unique string identifier of the Fleet that the given Device belongs to.
   */
  fleet_sid: string;
  /**
   * Contains a human readable descriptive text for this Device, up to 256 characters long
   */
  friendly_name: string;
  /**
   * Contains an arbitrary string identifier representing a human user associated with this Device, assigned by the developer, up to 256 characters long.
   */
  identity: string;
  /**
   * Contains a 34 character string that uniquely identifies this Device resource.
   */
  sid: string;
  /**
   * Contains a unique and addressable name of this Device, assigned by the developer, up to 128 characters long.
   */
  unique_name: string;
  /**
   * Contains an absolute URL for this Device resource.
   */
  url: string;
}

interface DevicePayload extends DeviceResource, Page.TwilioResponsePayload {
}

interface DeviceSolution {
  fleetSid: string;
}

interface DeviceListCreateOptions {
  /**
   * Specifies the unique string identifier of the Deployment group that this Device is going to be associated with.
   */
  deploymentSid?: string;
  /**
   * The enabled
   */
  enabled?: boolean;
  /**
   * Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long.
   */
  friendlyName?: string;
  /**
   * Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long.
   */
  identity?: string;
  /**
   * Provides a unique and addressable name to be assigned to this Device, to be used in addition to SID, up to 128 characters long.
   */
  uniqueName?: string;
}

interface DeviceListEachOptions extends ListEachOptions<DeviceInstance> {
  /**
   * Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with.
   */
  deploymentSid?: string;
}

interface DeviceListOptions extends ListOptions<DeviceInstance> {
  /**
   * Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with.
   */
  deploymentSid?: string;
}

interface DeviceListPageOptions extends PageOptions<DevicePage> {
  /**
   * Filters the resulting list of Devices by a unique string identifier of the Deployment they are associated with.
   */
  deploymentSid?: string;
}

interface DeviceListInstance {
  /**
   * Gets context of a single Device resource
   *
   * @param sid - A string that uniquely identifies the Device.
   */
  (sid: string): DeviceContext;
  /**
   * create a DeviceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  create(opts?: DeviceListCreateOptions): Promise<DeviceInstance>;
  /**
   * create a DeviceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: DeviceListCreateOptions, callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * create a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * Streams DeviceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: DeviceListEachOptions): void;
  /**
   * Streams DeviceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: DeviceInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Device resource
   *
   * @param sid - A string that uniquely identifies the Device.
   */
  get(sid: string): DeviceContext;
  /**
   * Retrieve a single target page of DeviceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<DevicePage>;
  /**
   * Retrieve a single target page of DeviceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: DevicePage) => any): void;
  /**
   * Lists DeviceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: DeviceListOptions): Promise<DeviceInstance[]>;
  /**
   * Lists DeviceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: DeviceListOptions, callback: (error: Error | null, items: DeviceInstance[]) => any): void;
  /**
   * Lists DeviceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: DeviceInstance[]) => any): void;
  /**
   * Retrieve a single page of DeviceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: DeviceListPageOptions): Promise<DevicePage>;
  /**
   * Retrieve a single page of DeviceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: DeviceListPageOptions, callback: (error: Error | null, items: DevicePage) => any): void;
  /**
   * Retrieve a single page of DeviceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: DevicePage) => any): void;
}

interface DeviceListFetchOptions {
  /**
   * Specifies the unique string identifier of the Deployment group that this Device is going to be associated with.
   */
  deploymentSid?: string;
  /**
   * The enabled
   */
  enabled?: boolean;
  /**
   * Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long.
   */
  friendlyName?: string;
  /**
   * Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long.
   */
  identity?: string;
}

interface DeviceListFetchOptions {
  /**
   * Specifies the unique string identifier of the Deployment group that this Device is going to be associated with.
   */
  deploymentSid?: string;
  /**
   * The enabled
   */
  enabled?: boolean;
  /**
   * Provides a human readable descriptive text to be assigned to this Device, up to 256 characters long.
   */
  friendlyName?: string;
  /**
   * Provides an arbitrary string identifier representing a human user to be associated with this Device, up to 256 characters long.
   */
  identity?: string;
}

declare class DevicePage extends Page<DeployedDevices, DevicePayload, DeviceResource, DeviceInstance> {
  constructor(version: DeployedDevices, response: Response<string>, solution: DeviceSolution);

  /**
   * Build an instance of DeviceInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: DevicePayload): DeviceInstance;
}

declare class DeviceInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param fleetSid - The fleet_sid
   * @param sid - A string that uniquely identifies the Device.
   */
  constructor(version: DeployedDevices, payload: DevicePayload, fleetSid: string, sid: string);

  private _proxy: DeviceContext;
  /**
   * Specifies the unique string identifier of the Account responsible for this Device.
   */
  accountSid: string;
  /**
   * Specifies the date this Device was last authenticated, given in UTC ISO 8601 format.
   */
  dateAuthenticated: Date;
  /**
   * Specifies the date this Device was created, given in UTC ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * Specifies the date this Device was last updated, given in UTC ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * Specifies the unique string identifier of the Deployment group that this Device is associated with.
   */
  deploymentSid: string;
  /**
   * Contains a boolean flag indicating whether the device is enabled or not, blocks device connectivity if set to false.
   */
  enabled: boolean;
  /**
   * fetch a DeviceInstance
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  fetch(): Promise<DeviceInstance>;
  /**
   * fetch a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * Specifies the unique string identifier of the Fleet that the given Device belongs to.
   */
  fleetSid: string;
  /**
   * Contains a human readable descriptive text for this Device, up to 256 characters long
   */
  friendlyName: string;
  /**
   * Contains an arbitrary string identifier representing a human user associated with this Device, assigned by the developer, up to 256 characters long.
   */
  identity: string;
  /**
   * remove a DeviceInstance
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  remove(): Promise<DeviceInstance>;
  /**
   * remove a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * Contains a 34 character string that uniquely identifies this Device resource.
   */
  sid: string;
  /**
   * Contains a unique and addressable name of this Device, assigned by the developer, up to 128 characters long.
   */
  uniqueName: string;
  /**
   * update a DeviceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  update(opts?: DeviceListFetchOptions): Promise<DeviceInstance>;
  /**
   * update a DeviceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DeviceListFetchOptions, callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * update a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * Contains an absolute URL for this Device resource.
   */
  url: string;
}

declare class DeviceContext {
  constructor(version: DeployedDevices, fleetSid: string, sid: string);

  /**
   * fetch a DeviceInstance
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  fetch(): Promise<DeviceInstance>;
  /**
   * fetch a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * remove a DeviceInstance
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  remove(): Promise<DeviceInstance>;
  /**
   * remove a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * update a DeviceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DeviceInstance
   */
  update(opts?: DeviceListFetchOptions): Promise<DeviceInstance>;
  /**
   * update a DeviceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DeviceListFetchOptions, callback: (error: Error | null, items: DeviceInstance) => any): void;
  /**
   * update a DeviceInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: DeviceInstance) => any): void;
}

export {DeviceResource, DeviceSolution, DeviceListEachOptions, DevicePayload, DeviceListPageOptions, DeviceListInstance, DeviceListFetchOptions, DeviceListOptions, DevicePage, DeviceContext, DeviceListCreateOptions, DeviceInstance, DeviceList}
