/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import DeployedDevices = require('../DeployedDevices');
import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import { CertificateListInstance } from './fleet/certificate';
import { DeploymentListInstance } from './fleet/deployment';
import { DeviceListInstance } from './fleet/device';
import { KeyListInstance } from './fleet/key';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';

declare function FleetList(version: DeployedDevices): FleetListInstance

interface FleetResource {
  /**
   * Speicifies the unique string identifier of the Account responsible for this Fleet.
   */
  account_sid: string;
  /**
   * Specifies the date this Fleet was created, given in UTC ISO 8601 format.
   */
  date_created: Date;
  /**
   * Specifies the date this Fleet was last updated, given in UTC ISO 8601 format.
   */
  date_updated: Date;
  /**
   * Contains the string identifier of the automatically provisioned default Deployment of this Fleet.
   */
  default_deployment_sid: string;
  /**
   * Contains a human readable descriptive text for this Fleet, up to 256 characters long.
   */
  friendly_name: string;
  /**
   * Contains a dictionary of URL links to nested resources of this Fleet.
   */
  links: string;
  /**
   * Contains a 34 character string that uniquely identifies this Fleet resource.
   */
  sid: string;
  /**
   * Contains a unique and addressable name of this Fleet, e.g. 'default', up to 128 characters long.
   */
  unique_name: string;
  /**
   * Contains an absolute URL for this Fleet resource.
   */
  url: string;
}

interface FleetPayload extends FleetResource, Page.TwilioResponsePayload {
}

interface FleetSolution {
}

interface FleetListCreateOptions {
  /**
   * Provides a human readable descriptive text for this Fleet, up to 256 characters long.
   */
  friendlyName?: string;
}

interface FleetListEachOptions extends ListEachOptions<FleetInstance> {
}

interface FleetListOptions extends ListOptions<FleetInstance> {
}

interface FleetListPageOptions extends PageOptions<FleetPage> {
}

interface FleetListInstance {
  /**
   * Gets context of a single Fleet resource
   *
   * @param sid - A string that uniquely identifies the Fleet.
   */
  (sid: string): FleetContext;
  /**
   * create a FleetInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  create(opts?: FleetListCreateOptions): Promise<FleetInstance>;
  /**
   * create a FleetInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: FleetListCreateOptions, callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * create a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * Streams FleetInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: FleetListEachOptions): void;
  /**
   * Streams FleetInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: FleetInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Fleet resource
   *
   * @param sid - A string that uniquely identifies the Fleet.
   */
  get(sid: string): FleetContext;
  /**
   * Retrieve a single target page of FleetInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<FleetPage>;
  /**
   * Retrieve a single target page of FleetInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: FleetPage) => any): void;
  /**
   * Lists FleetInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: FleetListOptions): Promise<FleetInstance[]>;
  /**
   * Lists FleetInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: FleetListOptions, callback: (error: Error | null, items: FleetInstance[]) => any): void;
  /**
   * Lists FleetInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: FleetInstance[]) => any): void;
  /**
   * Retrieve a single page of FleetInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: FleetListPageOptions): Promise<FleetPage>;
  /**
   * Retrieve a single page of FleetInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: FleetListPageOptions, callback: (error: Error | null, items: FleetPage) => any): void;
  /**
   * Retrieve a single page of FleetInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: FleetPage) => any): void;
}

interface FleetListFetchOptions {
  /**
   * Provides a string identifier of a Deployment that is going to be used as a default one for this Fleet.
   */
  defaultDeploymentSid?: string;
  /**
   * Provides a human readable descriptive text for this Fleet, up to 256 characters long.
   */
  friendlyName?: string;
}

interface FleetListFetchOptions {
  /**
   * Provides a string identifier of a Deployment that is going to be used as a default one for this Fleet.
   */
  defaultDeploymentSid?: string;
  /**
   * Provides a human readable descriptive text for this Fleet, up to 256 characters long.
   */
  friendlyName?: string;
}

declare class FleetPage extends Page<DeployedDevices, FleetPayload, FleetResource, FleetInstance> {
  constructor(version: DeployedDevices, response: Response<string>, solution: FleetSolution);

  /**
   * Build an instance of FleetInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: FleetPayload): FleetInstance;
}

declare class FleetInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - A string that uniquely identifies the Fleet.
   */
  constructor(version: DeployedDevices, payload: FleetPayload, sid: string);

  private _proxy: FleetContext;
  /**
   * Speicifies the unique string identifier of the Account responsible for this Fleet.
   */
  accountSid: string;
  certificates(): CertificateListInstance;
  /**
   * Specifies the date this Fleet was created, given in UTC ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * Specifies the date this Fleet was last updated, given in UTC ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * Contains the string identifier of the automatically provisioned default Deployment of this Fleet.
   */
  defaultDeploymentSid: string;
  deployments(): DeploymentListInstance;
  devices(): DeviceListInstance;
  /**
   * fetch a FleetInstance
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  fetch(): Promise<FleetInstance>;
  /**
   * fetch a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * Contains a human readable descriptive text for this Fleet, up to 256 characters long.
   */
  friendlyName: string;
  keys(): KeyListInstance;
  /**
   * Contains a dictionary of URL links to nested resources of this Fleet.
   */
  links: string;
  /**
   * remove a FleetInstance
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  remove(): Promise<FleetInstance>;
  /**
   * remove a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * Contains a 34 character string that uniquely identifies this Fleet resource.
   */
  sid: string;
  /**
   * Contains a unique and addressable name of this Fleet, e.g. 'default', up to 128 characters long.
   */
  uniqueName: string;
  /**
   * update a FleetInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  update(opts?: FleetListFetchOptions): Promise<FleetInstance>;
  /**
   * update a FleetInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FleetListFetchOptions, callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * update a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * Contains an absolute URL for this Fleet resource.
   */
  url: string;
}

declare class FleetContext {
  constructor(version: DeployedDevices, sid: string);

  certificates: CertificateListInstance;
  deployments: DeploymentListInstance;
  devices: DeviceListInstance;
  /**
   * fetch a FleetInstance
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  fetch(): Promise<FleetInstance>;
  /**
   * fetch a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FleetInstance) => any): void;
  keys: KeyListInstance;
  /**
   * remove a FleetInstance
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  remove(): Promise<FleetInstance>;
  /**
   * remove a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * update a FleetInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FleetInstance
   */
  update(opts?: FleetListFetchOptions): Promise<FleetInstance>;
  /**
   * update a FleetInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FleetListFetchOptions, callback: (error: Error | null, items: FleetInstance) => any): void;
  /**
   * update a FleetInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FleetInstance) => any): void;
}

export {FleetListPageOptions, FleetListInstance, FleetPage, FleetContext, FleetInstance, FleetSolution, FleetPayload, FleetList, FleetListEachOptions, FleetListFetchOptions, FleetResource, FleetListOptions, FleetListCreateOptions}
