/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import Wireless = require('../Wireless');
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';

declare function CommandList(version: Wireless): CommandListInstance

interface CommandResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The command
   */
  command: string;
  /**
   * The command_mode
   */
  command_mode: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The device_sid
   */
  device_sid: string;
  /**
   * The direction
   */
  direction: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sim_sid
   */
  sim_sid: string;
  /**
   * The status
   */
  status: string;
  /**
   * The url
   */
  url: string;
}

interface CommandPayload extends CommandResource, Page.TwilioResponsePayload {
}

interface CommandSolution {
}

interface CommandListEachOptions extends ListEachOptions<CommandInstance> {
  /**
   * The device
   */
  device?: string;
  /**
   * The direction
   */
  direction?: string;
  /**
   * The sim
   */
  sim?: string;
  /**
   * The status
   */
  status?: string;
}

interface CommandListOptions extends ListOptions<CommandInstance> {
  /**
   * The device
   */
  device?: string;
  /**
   * The direction
   */
  direction?: string;
  /**
   * The sim
   */
  sim?: string;
  /**
   * The status
   */
  status?: string;
}

interface CommandListPageOptions extends PageOptions<CommandPage> {
  /**
   * The device
   */
  device?: string;
  /**
   * The direction
   */
  direction?: string;
  /**
   * The sim
   */
  sim?: string;
  /**
   * The status
   */
  status?: string;
}

interface CommandListCreateOptions {
  /**
   * The callback_method
   */
  callbackMethod?: string;
  /**
   * The callback_url
   */
  callbackUrl?: string;
  /**
   * The command
   */
  command: string;
  /**
   * The command_mode
   */
  commandMode?: string;
  /**
   * The device
   */
  device?: string;
  /**
   * The include_sid
   */
  includeSid?: string;
  /**
   * The sim
   */
  sim?: string;
}

interface CommandListInstance {
  /**
   * Gets context of a single Command resource
   *
   * @param sid - The sid
   */
  (sid: string): CommandContext;
  /**
   * create a CommandInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CommandInstance
   */
  create(opts: CommandListCreateOptions): Promise<CommandInstance>;
  /**
   * create a CommandInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CommandListCreateOptions, callback: (error: Error | null, items: CommandInstance) => any): void;
  /**
   * Streams CommandInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CommandListEachOptions): void;
  /**
   * Streams CommandInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CommandInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Command resource
   *
   * @param sid - The sid
   */
  get(sid: string): CommandContext;
  /**
   * Retrieve a single target page of CommandInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CommandPage>;
  /**
   * Retrieve a single target page of CommandInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CommandPage) => any): void;
  /**
   * Lists CommandInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CommandListOptions): Promise<CommandInstance[]>;
  /**
   * Lists CommandInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CommandListOptions, callback: (error: Error | null, items: CommandInstance[]) => any): void;
  /**
   * Lists CommandInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CommandInstance[]) => any): void;
  /**
   * Retrieve a single page of CommandInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CommandListPageOptions): Promise<CommandPage>;
  /**
   * Retrieve a single page of CommandInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CommandListPageOptions, callback: (error: Error | null, items: CommandPage) => any): void;
  /**
   * Retrieve a single page of CommandInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CommandPage) => any): void;
}

declare class CommandPage extends Page<Wireless, CommandPayload, CommandResource, CommandInstance> {
  constructor(version: Wireless, response: Response<string>, solution: CommandSolution);

  /**
   * Build an instance of CommandInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CommandPayload): CommandInstance;
}

declare class CommandInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: Wireless, payload: CommandPayload, sid: string);

  private _proxy: CommandContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The command
   */
  command: string;
  /**
   * The command_mode
   */
  commandMode: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The device_sid
   */
  deviceSid: string;
  /**
   * The direction
   */
  direction: string;
  /**
   * fetch a CommandInstance
   *
   * @returns Promise that resolves to processed CommandInstance
   */
  fetch(): Promise<CommandInstance>;
  /**
   * fetch a CommandInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CommandInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sim_sid
   */
  simSid: string;
  /**
   * The status
   */
  status: string;
  /**
   * The url
   */
  url: string;
}

declare class CommandContext {
  constructor(version: Wireless, sid: string);

  /**
   * fetch a CommandInstance
   *
   * @returns Promise that resolves to processed CommandInstance
   */
  fetch(): Promise<CommandInstance>;
  /**
   * fetch a CommandInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CommandInstance) => any): void;
}

export { CommandContext, CommandInstance, CommandList, CommandListCreateOptions, CommandListEachOptions, CommandListInstance, CommandListOptions, CommandListPageOptions, CommandPage, CommandPayload, CommandResource, CommandSolution }
