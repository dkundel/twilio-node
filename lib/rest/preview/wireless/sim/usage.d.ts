/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import Wireless = require('../../Wireless');

declare function UsageList(version: Wireless, simSid: string): UsageListInstance

interface UsageResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The commands_costs
   */
  commands_costs: string;
  /**
   * The commands_usage
   */
  commands_usage: string;
  /**
   * The data_costs
   */
  data_costs: string;
  /**
   * The data_usage
   */
  data_usage: string;
  /**
   * The period
   */
  period: string;
  /**
   * The sim_sid
   */
  sim_sid: string;
  /**
   * The sim_unique_name
   */
  sim_unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface UsagePayload extends UsageResource, Page.TwilioResponsePayload {
}

interface UsageSolution {
  simSid: string;
}

interface UsageListInstance {
  /**
   * Gets context of a single Usage resource
   */
  (): UsageContext;
  /**
   * Gets context of a single Usage resource
   */
  get(): UsageContext;
}

interface UsageListFetchOptions {
  /**
   * The end
   */
  end?: string;
  /**
   * The start
   */
  start?: string;
}

interface UsageListFetchOptions {
  /**
   * The end
   */
  end?: string;
  /**
   * The start
   */
  start?: string;
}

declare class UsagePage extends Page<Wireless, UsagePayload, UsageResource, UsageInstance> {
  constructor(version: Wireless, response: Response<string>, solution: UsageSolution);

  /**
   * Build an instance of UsageInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: UsagePayload): UsageInstance;
}

declare class UsageInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param simSid - The sim_sid
   */
  constructor(version: Wireless, payload: UsagePayload, simSid: string);

  private _proxy: UsageContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The commands_costs
   */
  commandsCosts: string;
  /**
   * The commands_usage
   */
  commandsUsage: string;
  /**
   * The data_costs
   */
  dataCosts: string;
  /**
   * The data_usage
   */
  dataUsage: string;
  /**
   * fetch a UsageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UsageInstance
   */
  fetch(opts?: UsageListFetchOptions): Promise<UsageInstance>;
  /**
   * fetch a UsageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: UsageListFetchOptions, callback: (error: Error | null, items: UsageInstance) => any): void;
  /**
   * fetch a UsageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UsageInstance) => any): void;
  /**
   * The period
   */
  period: string;
  /**
   * The sim_sid
   */
  simSid: string;
  /**
   * The sim_unique_name
   */
  simUniqueName: string;
  /**
   * The url
   */
  url: string;
}

declare class UsageContext {
  constructor(version: Wireless, simSid: string);

  /**
   * fetch a UsageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed UsageInstance
   */
  fetch(opts?: UsageListFetchOptions): Promise<UsageInstance>;
  /**
   * fetch a UsageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: UsageListFetchOptions, callback: (error: Error | null, items: UsageInstance) => any): void;
  /**
   * fetch a UsageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: UsageInstance) => any): void;
}

export {UsageInstance, UsageListInstance, UsageList, UsagePayload, UsagePage, UsageSolution, UsageResource, UsageListFetchOptions, UsageContext}
