/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import AccSecurity = require('../../AccSecurity');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');

declare function VerificationList(version: AccSecurity, serviceSid: string): VerificationListInstance

type VerificationChannel = 'sms'|'call';

interface VerificationResource {
  /**
   * The unique SID identifier of the Account.
   */
  account_sid: string;
  /**
   * The method in which the phone will be verified. Either sms or call
   */
  channel: VerificationChannel;
  /**
   * The date that this Verification was created, given in ISO 8601 format.
   */
  date_created: Date;
  /**
   * The date that this Verification was updated, given in ISO 8601 format.
   */
  date_updated: Date;
  /**
   * The unique SID identifier of the Service.
   */
  service_sid: string;
  /**
   * A 34 character string that uniquely identifies this Verification.
   */
  sid: string;
  /**
   * String with the current status of the verification
   */
  status: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to: string;
  /**
   * Boolean flag specifying if the verification was successful.
   */
  valid: boolean;
}

interface VerificationPayload extends VerificationResource, Page.TwilioResponsePayload {
}

interface VerificationSolution {
  serviceSid: string;
}

interface VerificationListCreateOptions {
  /**
   * The method in which the phone will be verified. Either sms or call
   */
  channel: string;
  /**
   * A character string containing a custom message for this verification
   */
  customMessage?: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to: string;
}

interface VerificationListInstance {
  /**
   * create a VerificationInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed VerificationInstance
   */
  create(opts: VerificationListCreateOptions): Promise<VerificationInstance>;
  /**
   * create a VerificationInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: VerificationListCreateOptions, callback: (error: Error | null, items: VerificationInstance) => any): void;
}

declare class VerificationPage extends Page<AccSecurity, VerificationPayload, VerificationResource, VerificationInstance> {
  constructor(version: AccSecurity, response: Response<string>, solution: VerificationSolution);

  /**
   * Build an instance of VerificationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: VerificationPayload): VerificationInstance;
}

declare class VerificationInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: AccSecurity, payload: VerificationPayload);

  private _proxy: VerificationContext;
  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * The method in which the phone will be verified. Either sms or call
   */
  channel: VerificationChannel;
  /**
   * The date that this Verification was created, given in ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date that this Verification was updated, given in ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * A 34 character string that uniquely identifies this Verification.
   */
  sid: string;
  /**
   * String with the current status of the verification
   */
  status: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to: string;
  /**
   * Boolean flag specifying if the verification was successful.
   */
  valid: boolean;
}

export {VerificationChannel, VerificationInstance, VerificationList, VerificationResource, VerificationPage, VerificationSolution, VerificationPayload, VerificationListInstance, VerificationListCreateOptions}
