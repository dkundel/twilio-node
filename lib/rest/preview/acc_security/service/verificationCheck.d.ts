/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import AccSecurity = require('../../AccSecurity');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');

declare function VerificationCheckList(version: AccSecurity, serviceSid: string): VerificationCheckListInstance

type VerificationCheckChannel = 'sms'|'call';

interface VerificationCheckResource {
  /**
   * The unique SID identifier of the Account.
   */
  account_sid: string;
  /**
   * The method in which the phone will be verified. Either sms or call
   */
  channel: VerificationCheckChannel;
  /**
   * The date that this Verification Check was created, given in ISO 8601 format.
   */
  date_created: Date;
  /**
   * The date that this Verification Check was updated, given in ISO 8601 format.
   */
  date_updated: Date;
  /**
   * The unique SID identifier of the Service.
   */
  service_sid: string;
  /**
   * A 34 character string that uniquely identifies this Verification Check.
   */
  sid: string;
  /**
   * String with the current status of the verification
   */
  status: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to: string;
  /**
   * Boolean flag specifying if the verification was successful.
   */
  valid: boolean;
}

interface VerificationCheckPayload extends VerificationCheckResource, Page.TwilioResponsePayload {
}

interface VerificationCheckSolution {
  serviceSid: string;
}

interface VerificationCheckListCreateOptions {
  /**
   * The 4-10 character string being verified
   */
  code: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to?: string;
}

interface VerificationCheckListInstance {
  /**
   * create a VerificationCheckInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed VerificationCheckInstance
   */
  create(opts: VerificationCheckListCreateOptions): Promise<VerificationCheckInstance>;
  /**
   * create a VerificationCheckInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: VerificationCheckListCreateOptions, callback: (error: Error | null, items: VerificationCheckInstance) => any): void;
}

declare class VerificationCheckPage extends Page<AccSecurity, VerificationCheckPayload, VerificationCheckResource, VerificationCheckInstance> {
  constructor(version: AccSecurity, response: Response<string>, solution: VerificationCheckSolution);

  /**
   * Build an instance of VerificationCheckInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: VerificationCheckPayload): VerificationCheckInstance;
}

declare class VerificationCheckInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: AccSecurity, payload: VerificationCheckPayload);

  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * The method in which the phone will be verified. Either sms or call
   */
  channel: VerificationCheckChannel;
  /**
   * The date that this Verification Check was created, given in ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date that this Verification Check was updated, given in ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * The unique SID identifier of the Service.
   */
  serviceSid: string;
  /**
   * A 34 character string that uniquely identifies this Verification Check.
   */
  sid: string;
  /**
   * String with the current status of the verification
   */
  status: string;
  /**
   * The To phonenumber of the phone being verified
   */
  to: string;
  /**
   * Boolean flag specifying if the verification was successful.
   */
  valid: boolean;
}

export { VerificationCheckChannel, VerificationCheckInstance, VerificationCheckList, VerificationCheckListCreateOptions, VerificationCheckListInstance, VerificationCheckPage, VerificationCheckPayload, VerificationCheckResource, VerificationCheckSolution }
