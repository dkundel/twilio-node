/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Marketplace = require('../../Marketplace');
import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function InstalledAddOnExtensionList(version: Marketplace, installedAddOnSid: string): InstalledAddOnExtensionListInstance

interface InstalledAddOnExtensionResource {
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
  /**
   * A human-readable description of this Extension.
   */
  friendly_name: string;
  /**
   * The installed_add_on_sid
   */
  installed_add_on_sid: string;
  /**
   * A human-readable description of the Product this Extension is used within.
   */
  product_name: string;
  /**
   * A 34 character string that uniquely identifies this Extension.
   */
  sid: string;
  /**
   * The human-readable string that uniquely identifies this Extension.
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface InstalledAddOnExtensionPayload extends InstalledAddOnExtensionResource, Page.TwilioResponsePayload {
}

interface InstalledAddOnExtensionSolution {
  installedAddOnSid: string;
}

interface InstalledAddOnExtensionListEachOptions extends ListEachOptions<InstalledAddOnExtensionInstance> {
}

interface InstalledAddOnExtensionListOptions extends ListOptions<InstalledAddOnExtensionInstance> {
}

interface InstalledAddOnExtensionListPageOptions extends PageOptions<InstalledAddOnExtensionPage> {
}

interface InstalledAddOnExtensionListInstance {
  /**
   * Gets context of a single InstalledAddOnExtension resource
   *
   * @param sid - The unique Extension Sid
   */
  (sid: string): InstalledAddOnExtensionContext;
  /**
   * Streams InstalledAddOnExtensionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: InstalledAddOnExtensionListEachOptions): void;
  /**
   * Streams InstalledAddOnExtensionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: InstalledAddOnExtensionInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single InstalledAddOnExtension resource
   *
   * @param sid - The unique Extension Sid
   */
  get(sid: string): InstalledAddOnExtensionContext;
  /**
   * Retrieve a single target page of InstalledAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<InstalledAddOnExtensionPage>;
  /**
   * Retrieve a single target page of InstalledAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: InstalledAddOnExtensionPage) => any): void;
  /**
   * Lists InstalledAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: InstalledAddOnExtensionListOptions): Promise<InstalledAddOnExtensionInstance[]>;
  /**
   * Lists InstalledAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: InstalledAddOnExtensionListOptions, callback: (error: Error | null, items: InstalledAddOnExtensionInstance[]) => any): void;
  /**
   * Lists InstalledAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: InstalledAddOnExtensionInstance[]) => any): void;
  /**
   * Retrieve a single page of InstalledAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: InstalledAddOnExtensionListPageOptions): Promise<InstalledAddOnExtensionPage>;
  /**
   * Retrieve a single page of InstalledAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: InstalledAddOnExtensionListPageOptions, callback: (error: Error | null, items: InstalledAddOnExtensionPage) => any): void;
  /**
   * Retrieve a single page of InstalledAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: InstalledAddOnExtensionPage) => any): void;
}

interface InstalledAddOnExtensionListFetchOptions {
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
}

interface InstalledAddOnExtensionListFetchOptions {
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
}

declare class InstalledAddOnExtensionPage extends Page<Marketplace, InstalledAddOnExtensionPayload, InstalledAddOnExtensionResource, InstalledAddOnExtensionInstance> {
  constructor(version: Marketplace, response: Response<string>, solution: InstalledAddOnExtensionSolution);

  /**
   * Build an instance of InstalledAddOnExtensionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: InstalledAddOnExtensionPayload): InstalledAddOnExtensionInstance;
}

declare class InstalledAddOnExtensionInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param installedAddOnSid - The installed_add_on_sid
   * @param sid - The unique Extension Sid
   */
  constructor(version: Marketplace, payload: InstalledAddOnExtensionPayload, installedAddOnSid: string, sid: string);

  private _proxy: InstalledAddOnExtensionContext;
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
  /**
   * fetch a InstalledAddOnExtensionInstance
   *
   * @returns Promise that resolves to processed InstalledAddOnExtensionInstance
   */
  fetch(): Promise<InstalledAddOnExtensionInstance>;
  /**
   * fetch a InstalledAddOnExtensionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: InstalledAddOnExtensionInstance) => any): void;
  /**
   * A human-readable description of this Extension.
   */
  friendlyName: string;
  /**
   * The installed_add_on_sid
   */
  installedAddOnSid: string;
  /**
   * A human-readable description of the Product this Extension is used within.
   */
  productName: string;
  /**
   * A 34 character string that uniquely identifies this Extension.
   */
  sid: string;
  /**
   * The human-readable string that uniquely identifies this Extension.
   */
  uniqueName: string;
  /**
   * update a InstalledAddOnExtensionInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed InstalledAddOnExtensionInstance
   */
  update(opts: InstalledAddOnExtensionListFetchOptions): Promise<InstalledAddOnExtensionInstance>;
  /**
   * update a InstalledAddOnExtensionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: InstalledAddOnExtensionListFetchOptions, callback: (error: Error | null, items: InstalledAddOnExtensionInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class InstalledAddOnExtensionContext {
  constructor(version: Marketplace, installedAddOnSid: string, sid: string);

  /**
   * fetch a InstalledAddOnExtensionInstance
   *
   * @returns Promise that resolves to processed InstalledAddOnExtensionInstance
   */
  fetch(): Promise<InstalledAddOnExtensionInstance>;
  /**
   * fetch a InstalledAddOnExtensionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: InstalledAddOnExtensionInstance) => any): void;
  /**
   * update a InstalledAddOnExtensionInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed InstalledAddOnExtensionInstance
   */
  update(opts: InstalledAddOnExtensionListFetchOptions): Promise<InstalledAddOnExtensionInstance>;
  /**
   * update a InstalledAddOnExtensionInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: InstalledAddOnExtensionListFetchOptions, callback: (error: Error | null, items: InstalledAddOnExtensionInstance) => any): void;
}

export {InstalledAddOnExtensionListEachOptions, InstalledAddOnExtensionContext, InstalledAddOnExtensionPayload, InstalledAddOnExtensionList, InstalledAddOnExtensionResource, InstalledAddOnExtensionListPageOptions, InstalledAddOnExtensionListFetchOptions, InstalledAddOnExtensionSolution, InstalledAddOnExtensionInstance, InstalledAddOnExtensionPage, InstalledAddOnExtensionListInstance, InstalledAddOnExtensionListOptions}
