/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import Sync = require('../../Sync');
import { DocumentPermissionListInstance } from './document/documentPermission';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function DocumentList(version: Sync, serviceSid: string): DocumentListInstance

interface DocumentResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The created_by
   */
  created_by: string;
  /**
   * The data
   */
  data: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The links
   */
  links: string;
  /**
   * The revision
   */
  revision: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The unique_name
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface DocumentPayload extends DocumentResource, Page.TwilioResponsePayload {
}

interface DocumentSolution {
  serviceSid: string;
}

interface DocumentListCreateOptions {
  /**
   * The data
   */
  data?: string;
  /**
   * The unique_name
   */
  uniqueName?: string;
}

interface DocumentListEachOptions extends ListEachOptions<DocumentInstance> {
}

interface DocumentListOptions extends ListOptions<DocumentInstance> {
}

interface DocumentListPageOptions extends PageOptions<DocumentPage> {
}

interface DocumentListInstance {
  /**
   * Gets context of a single Document resource
   *
   * @param sid - The sid
   */
  (sid: string): DocumentContext;
  /**
   * create a DocumentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  create(opts?: DocumentListCreateOptions): Promise<DocumentInstance>;
  /**
   * create a DocumentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: DocumentListCreateOptions, callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * create a DocumentInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * Streams DocumentInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: DocumentListEachOptions): void;
  /**
   * Streams DocumentInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: DocumentInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Document resource
   *
   * @param sid - The sid
   */
  get(sid: string): DocumentContext;
  /**
   * Retrieve a single target page of DocumentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<DocumentPage>;
  /**
   * Retrieve a single target page of DocumentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: DocumentPage) => any): void;
  /**
   * Lists DocumentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: DocumentListOptions): Promise<DocumentInstance[]>;
  /**
   * Lists DocumentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: DocumentListOptions, callback: (error: Error | null, items: DocumentInstance[]) => any): void;
  /**
   * Lists DocumentInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: DocumentInstance[]) => any): void;
  /**
   * Retrieve a single page of DocumentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: DocumentListPageOptions): Promise<DocumentPage>;
  /**
   * Retrieve a single page of DocumentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: DocumentListPageOptions, callback: (error: Error | null, items: DocumentPage) => any): void;
  /**
   * Retrieve a single page of DocumentInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: DocumentPage) => any): void;
}

interface DocumentListFetchOptions {
  /**
   * The data
   */
  data: string;
}

interface DocumentListFetchOptions {
  /**
   * The data
   */
  data: string;
}

declare class DocumentPage extends Page<Sync, DocumentPayload, DocumentResource, DocumentInstance> {
  constructor(version: Sync, response: Response<string>, solution: DocumentSolution);

  /**
   * Build an instance of DocumentInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: DocumentPayload): DocumentInstance;
}

declare class DocumentInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: Sync, payload: DocumentPayload, serviceSid: string, sid: string);

  private _proxy: DocumentContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The created_by
   */
  createdBy: string;
  /**
   * The data
   */
  data: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  documentPermissions(): DocumentPermissionListInstance;
  /**
   * fetch a DocumentInstance
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  fetch(): Promise<DocumentInstance>;
  /**
   * fetch a DocumentInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * remove a DocumentInstance
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  remove(): Promise<DocumentInstance>;
  /**
   * remove a DocumentInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * The revision
   */
  revision: string;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The unique_name
   */
  uniqueName: string;
  /**
   * update a DocumentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  update(opts: DocumentListFetchOptions): Promise<DocumentInstance>;
  /**
   * update a DocumentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DocumentListFetchOptions, callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class DocumentContext {
  constructor(version: Sync, serviceSid: string, sid: string);

  documentPermissions: DocumentPermissionListInstance;
  /**
   * fetch a DocumentInstance
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  fetch(): Promise<DocumentInstance>;
  /**
   * fetch a DocumentInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * remove a DocumentInstance
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  remove(): Promise<DocumentInstance>;
  /**
   * remove a DocumentInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: DocumentInstance) => any): void;
  /**
   * update a DocumentInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed DocumentInstance
   */
  update(opts: DocumentListFetchOptions): Promise<DocumentInstance>;
  /**
   * update a DocumentInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: DocumentListFetchOptions, callback: (error: Error | null, items: DocumentInstance) => any): void;
}

export {DocumentListCreateOptions, DocumentInstance, DocumentList, DocumentListPageOptions, DocumentSolution, DocumentResource, DocumentContext, DocumentListInstance, DocumentListEachOptions, DocumentListOptions, DocumentListFetchOptions, DocumentPage, DocumentPayload}
