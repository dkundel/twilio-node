/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import Sync = require('../../Sync');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { SyncListItemListInstance } from './syncList/syncListItem';
import { SyncListPermissionListInstance } from './syncList/syncListPermission';

declare function SyncListList(version: Sync, serviceSid: string): SyncListListInstance

interface SyncListResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The created_by
   */
  created_by: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The links
   */
  links: string;
  /**
   * The revision
   */
  revision: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The unique_name
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
}

interface SyncListPayload extends SyncListResource, Page.TwilioResponsePayload {
}

interface SyncListSolution {
  serviceSid: string;
}

interface SyncListListCreateOptions {
  /**
   * The unique_name
   */
  uniqueName?: string;
}

interface SyncListListEachOptions extends ListEachOptions<SyncListInstance> {
}

interface SyncListListOptions extends ListOptions<SyncListInstance> {
}

interface SyncListListPageOptions extends PageOptions<SyncListPage> {
}

interface SyncListListInstance {
  /**
   * Gets context of a single SyncList resource
   *
   * @param sid - The sid
   */
  (sid: string): SyncListContext;
  /**
   * create a SyncListInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SyncListInstance
   */
  create(opts?: SyncListListCreateOptions): Promise<SyncListInstance>;
  /**
   * create a SyncListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: SyncListListCreateOptions, callback: (error: Error | null, items: SyncListInstance) => any): void;
  /**
   * create a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: SyncListInstance) => any): void;
  /**
   * Streams SyncListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: SyncListListEachOptions): void;
  /**
   * Streams SyncListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: SyncListInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single SyncList resource
   *
   * @param sid - The sid
   */
  get(sid: string): SyncListContext;
  /**
   * Retrieve a single target page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<SyncListPage>;
  /**
   * Retrieve a single target page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: SyncListPage) => any): void;
  /**
   * Lists SyncListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: SyncListListOptions): Promise<SyncListInstance[]>;
  /**
   * Lists SyncListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: SyncListListOptions, callback: (error: Error | null, items: SyncListInstance[]) => any): void;
  /**
   * Lists SyncListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: SyncListInstance[]) => any): void;
  /**
   * Retrieve a single page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: SyncListListPageOptions): Promise<SyncListPage>;
  /**
   * Retrieve a single page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: SyncListListPageOptions, callback: (error: Error | null, items: SyncListPage) => any): void;
  /**
   * Retrieve a single page of SyncListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: SyncListPage) => any): void;
}

declare class SyncListPage extends Page<Sync, SyncListPayload, SyncListResource, SyncListInstance> {
  constructor(version: Sync, response: Response<string>, solution: SyncListSolution);

  /**
   * Build an instance of SyncListInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SyncListPayload): SyncListInstance;
}

declare class SyncListInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - The sid
   */
  constructor(version: Sync, payload: SyncListPayload, serviceSid: string, sid: string);

  private _proxy: SyncListContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The created_by
   */
  createdBy: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a SyncListInstance
   *
   * @returns Promise that resolves to processed SyncListInstance
   */
  fetch(): Promise<SyncListInstance>;
  /**
   * fetch a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SyncListInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * remove a SyncListInstance
   *
   * @returns Promise that resolves to processed SyncListInstance
   */
  remove(): Promise<SyncListInstance>;
  /**
   * remove a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SyncListInstance) => any): void;
  /**
   * The revision
   */
  revision: string;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  syncListItems(): SyncListItemListInstance;
  syncListPermissions(): SyncListPermissionListInstance;
  /**
   * The unique_name
   */
  uniqueName: string;
  /**
   * The url
   */
  url: string;
}

declare class SyncListContext {
  constructor(version: Sync, serviceSid: string, sid: string);

  /**
   * fetch a SyncListInstance
   *
   * @returns Promise that resolves to processed SyncListInstance
   */
  fetch(): Promise<SyncListInstance>;
  /**
   * fetch a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SyncListInstance) => any): void;
  /**
   * remove a SyncListInstance
   *
   * @returns Promise that resolves to processed SyncListInstance
   */
  remove(): Promise<SyncListInstance>;
  /**
   * remove a SyncListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SyncListInstance) => any): void;
  syncListItems: SyncListItemListInstance;
  syncListPermissions: SyncListPermissionListInstance;
}

export {SyncListContext, SyncListPayload, SyncListListInstance, SyncListList, SyncListListEachOptions, SyncListListOptions, SyncListInstance, SyncListListCreateOptions, SyncListPage, SyncListListPageOptions, SyncListResource, SyncListSolution}
