/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import Understand = require('../../../Understand');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function SampleList(version: Understand, serviceSid: string, intentSid: string): SampleListInstance

interface SampleResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The intent_sid
   */
  intent_sid: string;
  /**
   * The language
   */
  language: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The tagged_text
   */
  tagged_text: string;
  /**
   * The url
   */
  url: string;
}

interface SamplePayload extends SampleResource, Page.TwilioResponsePayload {
}

interface SampleSolution {
  intentSid: string;
  serviceSid: string;
}

interface SampleListEachOptions extends ListEachOptions<SampleInstance> {
  /**
   * The language
   */
  language?: string;
}

interface SampleListOptions extends ListOptions<SampleInstance> {
  /**
   * The language
   */
  language?: string;
}

interface SampleListPageOptions extends PageOptions<SamplePage> {
  /**
   * The language
   */
  language?: string;
}

interface SampleListCreateOptions {
  /**
   * The language
   */
  language: string;
  /**
   * The tagged_text
   */
  taggedText: string;
}

interface SampleListInstance {
  /**
   * Gets context of a single Sample resource
   *
   * @param sid - The sid
   */
  (sid: string): SampleContext;
  /**
   * create a SampleInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  create(opts: SampleListCreateOptions): Promise<SampleInstance>;
  /**
   * create a SampleInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: SampleListCreateOptions, callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * Streams SampleInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: SampleListEachOptions): void;
  /**
   * Streams SampleInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: SampleInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Sample resource
   *
   * @param sid - The sid
   */
  get(sid: string): SampleContext;
  /**
   * Retrieve a single target page of SampleInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<SamplePage>;
  /**
   * Retrieve a single target page of SampleInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: SamplePage) => any): void;
  /**
   * Lists SampleInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: SampleListOptions): Promise<SampleInstance[]>;
  /**
   * Lists SampleInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: SampleListOptions, callback: (error: Error | null, items: SampleInstance[]) => any): void;
  /**
   * Lists SampleInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: SampleInstance[]) => any): void;
  /**
   * Retrieve a single page of SampleInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: SampleListPageOptions): Promise<SamplePage>;
  /**
   * Retrieve a single page of SampleInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: SampleListPageOptions, callback: (error: Error | null, items: SamplePage) => any): void;
  /**
   * Retrieve a single page of SampleInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: SamplePage) => any): void;
}

interface SampleListFetchOptions {
  /**
   * The language
   */
  language?: string;
  /**
   * The tagged_text
   */
  taggedText?: string;
}

interface SampleListFetchOptions {
  /**
   * The language
   */
  language?: string;
  /**
   * The tagged_text
   */
  taggedText?: string;
}

declare class SamplePage extends Page<Understand, SamplePayload, SampleResource, SampleInstance> {
  constructor(version: Understand, response: Response<string>, solution: SampleSolution);

  /**
   * Build an instance of SampleInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SamplePayload): SampleInstance;
}

declare class SampleInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param intentSid - The intent_sid
   * @param sid - The sid
   */
  constructor(version: Understand, payload: SamplePayload, serviceSid: string, intentSid: string, sid: string);

  private _proxy: SampleContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a SampleInstance
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  fetch(): Promise<SampleInstance>;
  /**
   * fetch a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * The intent_sid
   */
  intentSid: string;
  /**
   * The language
   */
  language: string;
  /**
   * remove a SampleInstance
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  remove(): Promise<SampleInstance>;
  /**
   * remove a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The tagged_text
   */
  taggedText: string;
  /**
   * update a SampleInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  update(opts?: SampleListFetchOptions): Promise<SampleInstance>;
  /**
   * update a SampleInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: SampleListFetchOptions, callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * update a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class SampleContext {
  constructor(version: Understand, serviceSid: string, intentSid: string, sid: string);

  /**
   * fetch a SampleInstance
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  fetch(): Promise<SampleInstance>;
  /**
   * fetch a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * remove a SampleInstance
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  remove(): Promise<SampleInstance>;
  /**
   * remove a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * update a SampleInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SampleInstance
   */
  update(opts?: SampleListFetchOptions): Promise<SampleInstance>;
  /**
   * update a SampleInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: SampleListFetchOptions, callback: (error: Error | null, items: SampleInstance) => any): void;
  /**
   * update a SampleInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: SampleInstance) => any): void;
}

export { SampleContext, SampleInstance, SampleList, SampleListCreateOptions, SampleListEachOptions, SampleListFetchOptions, SampleListInstance, SampleListOptions, SampleListPageOptions, SamplePage, SamplePayload, SampleResource, SampleSolution }
