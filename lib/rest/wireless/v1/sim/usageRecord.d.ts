/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function UsageRecordList(version: V1, simSid: string): UsageRecordListInstance

type UsageRecordGranularity = 'hourly'|'daily'|'all';

interface UsageRecordResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The commands
   */
  commands: string;
  /**
   * The data
   */
  data: string;
  /**
   * The period
   */
  period: string;
  /**
   * The sim_sid
   */
  sim_sid: string;
}

interface UsageRecordPayload extends UsageRecordResource, Page.TwilioResponsePayload {
}

interface UsageRecordSolution {
  simSid: string;
}

interface UsageRecordListEachOptions extends ListEachOptions<UsageRecordInstance> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The granularity
   */
  granularity?: UsageRecordGranularity;
  /**
   * The start
   */
  start?: Date;
}

interface UsageRecordListOptions extends ListOptions<UsageRecordInstance> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The granularity
   */
  granularity?: UsageRecordGranularity;
  /**
   * The start
   */
  start?: Date;
}

interface UsageRecordListPageOptions extends PageOptions<UsageRecordPage> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The granularity
   */
  granularity?: UsageRecordGranularity;
  /**
   * The start
   */
  start?: Date;
}

interface UsageRecordListInstance {
  /**
   * Streams UsageRecordInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: UsageRecordListEachOptions): void;
  /**
   * Streams UsageRecordInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: UsageRecordInstance, done: (err?: Error) => void) => void): any;
  /**
   * Retrieve a single target page of UsageRecordInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<UsageRecordPage>;
  /**
   * Retrieve a single target page of UsageRecordInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: UsageRecordPage) => any): void;
  /**
   * Lists UsageRecordInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: UsageRecordListOptions): Promise<UsageRecordInstance[]>;
  /**
   * Lists UsageRecordInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: UsageRecordListOptions, callback: (error: Error | null, items: UsageRecordInstance[]) => any): void;
  /**
   * Lists UsageRecordInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: UsageRecordInstance[]) => any): void;
  /**
   * Retrieve a single page of UsageRecordInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: UsageRecordListPageOptions): Promise<UsageRecordPage>;
  /**
   * Retrieve a single page of UsageRecordInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: UsageRecordListPageOptions, callback: (error: Error | null, items: UsageRecordPage) => any): void;
  /**
   * Retrieve a single page of UsageRecordInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: UsageRecordPage) => any): void;
}

declare class UsageRecordPage extends Page<V1, UsageRecordPayload, UsageRecordResource, UsageRecordInstance> {
  constructor(version: V1, response: Response<string>, solution: UsageRecordSolution);

  /**
   * Build an instance of UsageRecordInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: UsageRecordPayload): UsageRecordInstance;
}

declare class UsageRecordInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V1, payload: UsageRecordPayload);

  private _proxy: UsageRecordContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The commands
   */
  commands: string;
  /**
   * The data
   */
  data: string;
  /**
   * The period
   */
  period: string;
  /**
   * The sim_sid
   */
  simSid: string;
}

export {UsageRecordListInstance, UsageRecordListEachOptions, UsageRecordListOptions, UsageRecordSolution, UsageRecordGranularity, UsageRecordPayload, UsageRecordInstance, UsageRecordPage, UsageRecordResource, UsageRecordListPageOptions, UsageRecordList}
