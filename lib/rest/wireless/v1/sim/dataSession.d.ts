/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function DataSessionList(version: V1, simSid: string): DataSessionListInstance

interface DataSessionResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The cell_id
   */
  cell_id: string;
  /**
   * The cell_location_estimate
   */
  cell_location_estimate: string;
  /**
   * The end
   */
  end: Date;
  /**
   * The last_updated
   */
  last_updated: Date;
  /**
   * The operator_country
   */
  operator_country: string;
  /**
   * The operator_mcc
   */
  operator_mcc: string;
  /**
   * The operator_mnc
   */
  operator_mnc: string;
  /**
   * The operator_name
   */
  operator_name: string;
  /**
   * The packets_downloaded
   */
  packets_downloaded: number;
  /**
   * The packets_uploaded
   */
  packets_uploaded: number;
  /**
   * The radio_link
   */
  radio_link: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sim_sid
   */
  sim_sid: string;
  /**
   * The start
   */
  start: Date;
}

interface DataSessionPayload extends DataSessionResource, Page.TwilioResponsePayload {
}

interface DataSessionSolution {
  simSid: string;
}

interface DataSessionListEachOptions extends ListEachOptions<DataSessionInstance> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The start
   */
  start?: Date;
}

interface DataSessionListOptions extends ListOptions<DataSessionInstance> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The start
   */
  start?: Date;
}

interface DataSessionListPageOptions extends PageOptions<DataSessionPage> {
  /**
   * The end
   */
  end?: Date;
  /**
   * The start
   */
  start?: Date;
}

interface DataSessionListInstance {
  /**
   * Streams DataSessionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: DataSessionListEachOptions): void;
  /**
   * Streams DataSessionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: DataSessionInstance, done: (err?: Error) => void) => void): any;
  /**
   * Retrieve a single target page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<DataSessionPage>;
  /**
   * Retrieve a single target page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: DataSessionPage) => any): void;
  /**
   * Lists DataSessionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: DataSessionListOptions): Promise<DataSessionInstance[]>;
  /**
   * Lists DataSessionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: DataSessionListOptions, callback: (error: Error | null, items: DataSessionInstance[]) => any): void;
  /**
   * Lists DataSessionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: DataSessionInstance[]) => any): void;
  /**
   * Retrieve a single page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: DataSessionListPageOptions): Promise<DataSessionPage>;
  /**
   * Retrieve a single page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: DataSessionListPageOptions, callback: (error: Error | null, items: DataSessionPage) => any): void;
  /**
   * Retrieve a single page of DataSessionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: DataSessionPage) => any): void;
}

declare class DataSessionPage extends Page<V1, DataSessionPayload, DataSessionResource, DataSessionInstance> {
  constructor(version: V1, response: Response<string>, solution: DataSessionSolution);

  /**
   * Build an instance of DataSessionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: DataSessionPayload): DataSessionInstance;
}

declare class DataSessionInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V1, payload: DataSessionPayload);

  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The cell_id
   */
  cellId: string;
  /**
   * The cell_location_estimate
   */
  cellLocationEstimate: string;
  /**
   * The end
   */
  end: Date;
  /**
   * The last_updated
   */
  lastUpdated: Date;
  /**
   * The operator_country
   */
  operatorCountry: string;
  /**
   * The operator_mcc
   */
  operatorMcc: string;
  /**
   * The operator_mnc
   */
  operatorMnc: string;
  /**
   * The operator_name
   */
  operatorName: string;
  /**
   * The packets_downloaded
   */
  packetsDownloaded: number;
  /**
   * The packets_uploaded
   */
  packetsUploaded: number;
  /**
   * The radio_link
   */
  radioLink: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sim_sid
   */
  simSid: string;
  /**
   * The start
   */
  start: Date;
}

export { DataSessionInstance, DataSessionList, DataSessionListEachOptions, DataSessionListInstance, DataSessionListOptions, DataSessionListPageOptions, DataSessionPage, DataSessionPayload, DataSessionResource, DataSessionSolution }
