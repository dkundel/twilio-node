/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2 = require('../../../V2');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function InviteList(version: V2, serviceSid: string, channelSid: string): InviteListInstance

interface InviteResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The channel_sid
   */
  channel_sid: string;
  /**
   * The created_by
   */
  created_by: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The identity
   */
  identity: string;
  /**
   * The role_sid
   */
  role_sid: string;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

interface InvitePayload extends InviteResource, Page.TwilioResponsePayload {
}

interface InviteSolution {
  channelSid: string;
  serviceSid: string;
}

interface InviteListCreateOptions {
  /**
   * The identity
   */
  identity: string;
  /**
   * The role_sid
   */
  roleSid?: string;
}

interface InviteListEachOptions extends ListEachOptions<InviteInstance> {
  /**
   * The identity
   */
  identity?: string[];
}

interface InviteListOptions extends ListOptions<InviteInstance> {
  /**
   * The identity
   */
  identity?: string[];
}

interface InviteListPageOptions extends PageOptions<InvitePage> {
  /**
   * The identity
   */
  identity?: string[];
}

interface InviteListInstance {
  /**
   * Gets context of a single Invite resource
   *
   * @param sid - The sid
   */
  (sid: string): InviteContext;
  /**
   * create a InviteInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed InviteInstance
   */
  create(opts: InviteListCreateOptions): Promise<InviteInstance>;
  /**
   * create a InviteInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: InviteListCreateOptions, callback: (error: Error | null, items: InviteInstance) => any): void;
  /**
   * Streams InviteInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: InviteListEachOptions): void;
  /**
   * Streams InviteInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: InviteInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Invite resource
   *
   * @param sid - The sid
   */
  get(sid: string): InviteContext;
  /**
   * Retrieve a single target page of InviteInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<InvitePage>;
  /**
   * Retrieve a single target page of InviteInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: InvitePage) => any): void;
  /**
   * Lists InviteInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: InviteListOptions): Promise<InviteInstance[]>;
  /**
   * Lists InviteInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: InviteListOptions, callback: (error: Error | null, items: InviteInstance[]) => any): void;
  /**
   * Lists InviteInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: InviteInstance[]) => any): void;
  /**
   * Retrieve a single page of InviteInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: InviteListPageOptions): Promise<InvitePage>;
  /**
   * Retrieve a single page of InviteInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: InviteListPageOptions, callback: (error: Error | null, items: InvitePage) => any): void;
  /**
   * Retrieve a single page of InviteInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: InvitePage) => any): void;
}

declare class InvitePage extends Page<V2, InvitePayload, InviteResource, InviteInstance> {
  constructor(version: V2, response: Response<string>, solution: InviteSolution);

  /**
   * Build an instance of InviteInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: InvitePayload): InviteInstance;
}

declare class InviteInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: V2, payload: InvitePayload, serviceSid: string, channelSid: string, sid: string);

  private _proxy: InviteContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The channel_sid
   */
  channelSid: string;
  /**
   * The created_by
   */
  createdBy: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a InviteInstance
   *
   * @returns Promise that resolves to processed InviteInstance
   */
  fetch(): Promise<InviteInstance>;
  /**
   * fetch a InviteInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: InviteInstance) => any): void;
  /**
   * The identity
   */
  identity: string;
  /**
   * remove a InviteInstance
   *
   * @returns Promise that resolves to processed InviteInstance
   */
  remove(): Promise<InviteInstance>;
  /**
   * remove a InviteInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: InviteInstance) => any): void;
  /**
   * The role_sid
   */
  roleSid: string;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

declare class InviteContext {
  constructor(version: V2, serviceSid: string, channelSid: string, sid: string);

  /**
   * fetch a InviteInstance
   *
   * @returns Promise that resolves to processed InviteInstance
   */
  fetch(): Promise<InviteInstance>;
  /**
   * fetch a InviteInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: InviteInstance) => any): void;
  /**
   * remove a InviteInstance
   *
   * @returns Promise that resolves to processed InviteInstance
   */
  remove(): Promise<InviteInstance>;
  /**
   * remove a InviteInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: InviteInstance) => any): void;
}

export {InvitePage, InviteListInstance, InviteList, InviteInstance, InviteContext, InviteListCreateOptions, InviteResource, InviteListOptions, InviteSolution, InviteListPageOptions, InvitePayload, InviteListEachOptions}
