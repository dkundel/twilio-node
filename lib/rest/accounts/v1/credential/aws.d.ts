/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function AwsList(version: V1): AwsListInstance

interface AwsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

interface AwsPayload extends AwsResource, Page.TwilioResponsePayload {
}

interface AwsSolution {
}

interface AwsListEachOptions extends ListEachOptions<AwsInstance> {
}

interface AwsListOptions extends ListOptions<AwsInstance> {
}

interface AwsListPageOptions extends PageOptions<AwsPage> {
}

interface AwsListCreateOptions {
  /**
   * The account_sid
   */
  accountSid?: string;
  /**
   * The credentials
   */
  credentials: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface AwsListInstance {
  /**
   * Gets context of a single Aws resource
   *
   * @param sid - The sid
   */
  (sid: string): AwsContext;
  /**
   * create a AwsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  create(opts: AwsListCreateOptions): Promise<AwsInstance>;
  /**
   * create a AwsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: AwsListCreateOptions, callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * Streams AwsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AwsListEachOptions): void;
  /**
   * Streams AwsInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AwsInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Aws resource
   *
   * @param sid - The sid
   */
  get(sid: string): AwsContext;
  /**
   * Retrieve a single target page of AwsInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AwsPage>;
  /**
   * Retrieve a single target page of AwsInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AwsPage) => any): void;
  /**
   * Lists AwsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AwsListOptions): Promise<AwsInstance[]>;
  /**
   * Lists AwsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AwsListOptions, callback: (error: Error | null, items: AwsInstance[]) => any): void;
  /**
   * Lists AwsInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AwsInstance[]) => any): void;
  /**
   * Retrieve a single page of AwsInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AwsListPageOptions): Promise<AwsPage>;
  /**
   * Retrieve a single page of AwsInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AwsListPageOptions, callback: (error: Error | null, items: AwsPage) => any): void;
  /**
   * Retrieve a single page of AwsInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AwsPage) => any): void;
}

interface AwsListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface AwsListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

declare class AwsPage extends Page<V1, AwsPayload, AwsResource, AwsInstance> {
  constructor(version: V1, response: Response<string>, solution: AwsSolution);

  /**
   * Build an instance of AwsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AwsPayload): AwsInstance;
}

declare class AwsInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: AwsPayload, sid: string);

  private _proxy: AwsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a AwsInstance
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  fetch(): Promise<AwsInstance>;
  /**
   * fetch a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * remove a AwsInstance
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  remove(): Promise<AwsInstance>;
  /**
   * remove a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * update a AwsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  update(opts?: AwsListFetchOptions): Promise<AwsInstance>;
  /**
   * update a AwsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AwsListFetchOptions, callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * update a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * The url
   */
  url: string;
}

declare class AwsContext {
  constructor(version: V1, sid: string);

  /**
   * fetch a AwsInstance
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  fetch(): Promise<AwsInstance>;
  /**
   * fetch a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * remove a AwsInstance
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  remove(): Promise<AwsInstance>;
  /**
   * remove a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * update a AwsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AwsInstance
   */
  update(opts?: AwsListFetchOptions): Promise<AwsInstance>;
  /**
   * update a AwsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AwsListFetchOptions, callback: (error: Error | null, items: AwsInstance) => any): void;
  /**
   * update a AwsInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AwsInstance) => any): void;
}

export { AwsContext, AwsInstance, AwsList, AwsListCreateOptions, AwsListEachOptions, AwsListFetchOptions, AwsListInstance, AwsListOptions, AwsListPageOptions, AwsPage, AwsPayload, AwsResource, AwsSolution }
