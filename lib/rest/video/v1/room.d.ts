/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { ParticipantListInstance } from './room/roomParticipant';
import { RoomRecordingListInstance } from './room/recording';

declare function RoomList(version: V1): RoomListInstance

type RoomRoomStatus = 'in-progress'|'completed'|'failed';

type RoomRoomType = 'peer-to-peer'|'group';

type RoomVideoCodec = 'VP8'|'H264';

interface RoomResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The duration
   */
  duration: number;
  /**
   * The enable_turn
   */
  enable_turn: boolean;
  /**
   * The end_time
   */
  end_time: Date;
  /**
   * The links
   */
  links: string;
  /**
   * The max_participants
   */
  max_participants: number;
  /**
   * The media_region
   */
  media_region: string;
  /**
   * The record_participants_on_connect
   */
  record_participants_on_connect: boolean;
  /**
   * The sid
   */
  sid: string;
  /**
   * The status
   */
  status: RoomRoomStatus;
  /**
   * The status_callback
   */
  status_callback: string;
  /**
   * The status_callback_method
   */
  status_callback_method: string;
  /**
   * The type
   */
  type: RoomRoomType;
  /**
   * The unique_name
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
  /**
   * The video_codecs
   */
  video_codecs: RoomVideoCodec;
}

interface RoomPayload extends RoomResource, Page.TwilioResponsePayload {
}

interface RoomSolution {
}

interface RoomListCreateOptions {
  /**
   * The enable_turn
   */
  enableTurn?: boolean;
  /**
   * The max_participants
   */
  maxParticipants?: number;
  /**
   * The media_region
   */
  mediaRegion?: string;
  /**
   * The record_participants_on_connect
   */
  recordParticipantsOnConnect?: boolean;
  /**
   * The status_callback
   */
  statusCallback?: string;
  /**
   * The status_callback_method
   */
  statusCallbackMethod?: string;
  /**
   * The type
   */
  type?: RoomRoomType;
  /**
   * The unique_name
   */
  uniqueName?: string;
  /**
   * The video_codecs
   */
  videoCodecs?: RoomVideoCodec[];
}

interface RoomListEachOptions extends ListEachOptions<RoomInstance> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The status
   */
  status?: RoomRoomStatus;
  /**
   * The unique_name
   */
  uniqueName?: string;
}

interface RoomListOptions extends ListOptions<RoomInstance> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The status
   */
  status?: RoomRoomStatus;
  /**
   * The unique_name
   */
  uniqueName?: string;
}

interface RoomListPageOptions extends PageOptions<RoomPage> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The status
   */
  status?: RoomRoomStatus;
  /**
   * The unique_name
   */
  uniqueName?: string;
}

interface RoomListInstance {
  /**
   * Gets context of a single Room resource
   *
   * @param sid - The sid
   */
  (sid: string): RoomContext;
  /**
   * create a RoomInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed RoomInstance
   */
  create(opts?: RoomListCreateOptions): Promise<RoomInstance>;
  /**
   * create a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: RoomListCreateOptions, callback: (error: Error | null, items: RoomInstance) => any): void;
  /**
   * create a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: RoomInstance) => any): void;
  /**
   * Streams RoomInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: RoomListEachOptions): void;
  /**
   * Streams RoomInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: RoomInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Room resource
   *
   * @param sid - The sid
   */
  get(sid: string): RoomContext;
  /**
   * Retrieve a single target page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<RoomPage>;
  /**
   * Retrieve a single target page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: RoomPage) => any): void;
  /**
   * Lists RoomInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: RoomListOptions): Promise<RoomInstance[]>;
  /**
   * Lists RoomInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: RoomListOptions, callback: (error: Error | null, items: RoomInstance[]) => any): void;
  /**
   * Lists RoomInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: RoomInstance[]) => any): void;
  /**
   * Retrieve a single page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: RoomListPageOptions): Promise<RoomPage>;
  /**
   * Retrieve a single page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: RoomListPageOptions, callback: (error: Error | null, items: RoomPage) => any): void;
  /**
   * Retrieve a single page of RoomInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: RoomPage) => any): void;
}

interface RoomListFetchOptions {
  /**
   * The status
   */
  status: RoomRoomStatus;
}

interface RoomListFetchOptions {
  /**
   * The status
   */
  status: RoomRoomStatus;
}

declare class RoomPage extends Page<V1, RoomPayload, RoomResource, RoomInstance> {
  constructor(version: V1, response: Response<string>, solution: RoomSolution);

  /**
   * Build an instance of RoomInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: RoomPayload): RoomInstance;
}

declare class RoomInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: RoomPayload, sid: string);

  private _proxy: RoomContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The duration
   */
  duration: number;
  /**
   * The enable_turn
   */
  enableTurn: boolean;
  /**
   * The end_time
   */
  endTime: Date;
  /**
   * fetch a RoomInstance
   *
   * @returns Promise that resolves to processed RoomInstance
   */
  fetch(): Promise<RoomInstance>;
  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RoomInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * The max_participants
   */
  maxParticipants: number;
  /**
   * The media_region
   */
  mediaRegion: string;
  participants(): ParticipantListInstance;
  /**
   * The record_participants_on_connect
   */
  recordParticipantsOnConnect: boolean;
  recordings(): RoomRecordingListInstance;
  /**
   * The sid
   */
  sid: string;
  /**
   * The status
   */
  status: RoomRoomStatus;
  /**
   * The status_callback
   */
  statusCallback: string;
  /**
   * The status_callback_method
   */
  statusCallbackMethod: string;
  /**
   * The type
   */
  type: RoomRoomType;
  /**
   * The unique_name
   */
  uniqueName: string;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed RoomInstance
   */
  update(opts: RoomListFetchOptions): Promise<RoomInstance>;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomListFetchOptions, callback: (error: Error | null, items: RoomInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The video_codecs
   */
  videoCodecs: RoomVideoCodec;
}

declare class RoomContext {
  constructor(version: V1, sid: string);

  /**
   * fetch a RoomInstance
   *
   * @returns Promise that resolves to processed RoomInstance
   */
  fetch(): Promise<RoomInstance>;
  /**
   * fetch a RoomInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RoomInstance) => any): void;
  participants: ParticipantListInstance;
  recordings: RoomRecordingListInstance;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed RoomInstance
   */
  update(opts: RoomListFetchOptions): Promise<RoomInstance>;
  /**
   * update a RoomInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: RoomListFetchOptions, callback: (error: Error | null, items: RoomInstance) => any): void;
}

export { RoomContext, RoomInstance, RoomList, RoomListCreateOptions, RoomListEachOptions, RoomListFetchOptions, RoomListInstance, RoomListOptions, RoomListPageOptions, RoomPage, RoomPayload, RoomResource, RoomRoomStatus, RoomRoomType, RoomSolution, RoomVideoCodec }
