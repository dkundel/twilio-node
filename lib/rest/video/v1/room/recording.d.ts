/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function RoomRecordingList(version: V1, roomSid: string): RoomRecordingListInstance

type RoomRecordingStatus = 'processing'|'completed'|'deleted'|'failed';

type RoomRecordingType = 'audio'|'video'|'data';

type RoomRecordingFormat = 'mka'|'mkv';

type RoomRecordingCodec = 'VP8'|'H264'|'OPUS'|'PCMU';

interface RoomRecordingResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The codec
   */
  codec: RoomRecordingCodec;
  /**
   * The container_format
   */
  container_format: RoomRecordingFormat;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The duration
   */
  duration: number;
  /**
   * The grouping_sids
   */
  grouping_sids: string;
  /**
   * The links
   */
  links: string;
  /**
   * The room_sid
   */
  room_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The size
   */
  size: number;
  /**
   * The source_sid
   */
  source_sid: string;
  /**
   * The status
   */
  status: RoomRecordingStatus;
  /**
   * The type
   */
  type: RoomRecordingType;
  /**
   * The url
   */
  url: string;
}

interface RoomRecordingPayload extends RoomRecordingResource, Page.TwilioResponsePayload {
}

interface RoomRecordingSolution {
  roomSid: string;
}

interface RoomRecordingListEachOptions extends ListEachOptions<RoomRecordingInstance> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The source_sid
   */
  sourceSid?: string;
  /**
   * The status
   */
  status?: RoomRecordingStatus;
}

interface RoomRecordingListOptions extends ListOptions<RoomRecordingInstance> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The source_sid
   */
  sourceSid?: string;
  /**
   * The status
   */
  status?: RoomRecordingStatus;
}

interface RoomRecordingListPageOptions extends PageOptions<RoomRecordingPage> {
  /**
   * The date_created_after
   */
  dateCreatedAfter?: Date;
  /**
   * The date_created_before
   */
  dateCreatedBefore?: Date;
  /**
   * The source_sid
   */
  sourceSid?: string;
  /**
   * The status
   */
  status?: RoomRecordingStatus;
}

interface RoomRecordingListInstance {
  /**
   * Gets context of a single RoomRecording resource
   *
   * @param sid - The sid
   */
  (sid: string): RoomRecordingContext;
  /**
   * Streams RoomRecordingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: RoomRecordingListEachOptions): void;
  /**
   * Streams RoomRecordingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: RoomRecordingInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single RoomRecording resource
   *
   * @param sid - The sid
   */
  get(sid: string): RoomRecordingContext;
  /**
   * Retrieve a single target page of RoomRecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<RoomRecordingPage>;
  /**
   * Retrieve a single target page of RoomRecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: RoomRecordingPage) => any): void;
  /**
   * Lists RoomRecordingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: RoomRecordingListOptions): Promise<RoomRecordingInstance[]>;
  /**
   * Lists RoomRecordingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: RoomRecordingListOptions, callback: (error: Error | null, items: RoomRecordingInstance[]) => any): void;
  /**
   * Lists RoomRecordingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: RoomRecordingInstance[]) => any): void;
  /**
   * Retrieve a single page of RoomRecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: RoomRecordingListPageOptions): Promise<RoomRecordingPage>;
  /**
   * Retrieve a single page of RoomRecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: RoomRecordingListPageOptions, callback: (error: Error | null, items: RoomRecordingPage) => any): void;
  /**
   * Retrieve a single page of RoomRecordingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: RoomRecordingPage) => any): void;
}

declare class RoomRecordingPage extends Page<V1, RoomRecordingPayload, RoomRecordingResource, RoomRecordingInstance> {
  constructor(version: V1, response: Response<string>, solution: RoomRecordingSolution);

  /**
   * Build an instance of RoomRecordingInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: RoomRecordingPayload): RoomRecordingInstance;
}

declare class RoomRecordingInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param roomSid - The room_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: RoomRecordingPayload, roomSid: string, sid: string);

  private _proxy: RoomRecordingContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The codec
   */
  codec: RoomRecordingCodec;
  /**
   * The container_format
   */
  containerFormat: RoomRecordingFormat;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The duration
   */
  duration: number;
  /**
   * fetch a RoomRecordingInstance
   *
   * @returns Promise that resolves to processed RoomRecordingInstance
   */
  fetch(): Promise<RoomRecordingInstance>;
  /**
   * fetch a RoomRecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RoomRecordingInstance) => any): void;
  /**
   * The grouping_sids
   */
  groupingSids: string;
  /**
   * The links
   */
  links: string;
  /**
   * The room_sid
   */
  roomSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The size
   */
  size: number;
  /**
   * The source_sid
   */
  sourceSid: string;
  /**
   * The status
   */
  status: RoomRecordingStatus;
  /**
   * The type
   */
  type: RoomRecordingType;
  /**
   * The url
   */
  url: string;
}

declare class RoomRecordingContext {
  constructor(version: V1, roomSid: string, sid: string);

  /**
   * fetch a RoomRecordingInstance
   *
   * @returns Promise that resolves to processed RoomRecordingInstance
   */
  fetch(): Promise<RoomRecordingInstance>;
  /**
   * fetch a RoomRecordingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: RoomRecordingInstance) => any): void;
}

export {RoomRecordingContext, RoomRecordingPayload, RoomRecordingCodec, RoomRecordingList, RoomRecordingInstance, RoomRecordingListOptions, RoomRecordingListInstance, RoomRecordingType, RoomRecordingFormat, RoomRecordingResource, RoomRecordingPage, RoomRecordingSolution, RoomRecordingListEachOptions, RoomRecordingStatus, RoomRecordingListPageOptions}
