/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { ActivityListInstance } from './workspace/activity';
import { EventListInstance } from './workspace/event';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';
import { TaskChannelListInstance } from './workspace/taskChannel';
import { TaskListInstance } from './workspace/task';
import { TaskQueueListInstance } from './workspace/taskQueue';
import { WorkerListInstance } from './workspace/worker';
import { WorkflowListInstance } from './workspace/workflow';
import { WorkspaceCumulativeStatisticsListInstance } from './workspace/workspaceCumulativeStatistics';
import { WorkspaceRealTimeStatisticsListInstance } from './workspace/workspaceRealTimeStatistics';
import { WorkspaceStatisticsListInstance } from './workspace/workspaceStatistics';

declare function WorkspaceList(version: V1): WorkspaceListInstance

type WorkspaceQueueOrder = 'FIFO'|'LIFO';

interface WorkspaceResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The default_activity_name
   */
  default_activity_name: string;
  /**
   * The default_activity_sid
   */
  default_activity_sid: string;
  /**
   * The event_callback_url
   */
  event_callback_url: string;
  /**
   * The events_filter
   */
  events_filter: string;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * The multi_task_enabled
   */
  multi_task_enabled: boolean;
  /**
   * The prioritize_queue_order
   */
  prioritize_queue_order: WorkspaceQueueOrder;
  /**
   * The sid
   */
  sid: string;
  /**
   * The timeout_activity_name
   */
  timeout_activity_name: string;
  /**
   * The timeout_activity_sid
   */
  timeout_activity_sid: string;
  /**
   * The url
   */
  url: string;
}

interface WorkspacePayload extends WorkspaceResource, Page.TwilioResponsePayload {
}

interface WorkspaceSolution {
}

interface WorkspaceListEachOptions extends ListEachOptions<WorkspaceInstance> {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface WorkspaceListOptions extends ListOptions<WorkspaceInstance> {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface WorkspaceListPageOptions extends PageOptions<WorkspacePage> {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface WorkspaceListCreateOptions {
  /**
   * The event_callback_url
   */
  eventCallbackUrl?: string;
  /**
   * The events_filter
   */
  eventsFilter?: string;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The multi_task_enabled
   */
  multiTaskEnabled?: boolean;
  /**
   * The prioritize_queue_order
   */
  prioritizeQueueOrder?: WorkspaceQueueOrder;
  /**
   * The template
   */
  template?: string;
}

interface WorkspaceListInstance {
  /**
   * Gets context of a single Workspace resource
   *
   * @param sid - The sid
   */
  (sid: string): WorkspaceContext;
  /**
   * create a WorkspaceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  create(opts: WorkspaceListCreateOptions): Promise<WorkspaceInstance>;
  /**
   * create a WorkspaceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: WorkspaceListCreateOptions, callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * Streams WorkspaceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: WorkspaceListEachOptions): void;
  /**
   * Streams WorkspaceInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: WorkspaceInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Workspace resource
   *
   * @param sid - The sid
   */
  get(sid: string): WorkspaceContext;
  /**
   * Retrieve a single target page of WorkspaceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<WorkspacePage>;
  /**
   * Retrieve a single target page of WorkspaceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: WorkspacePage) => any): void;
  /**
   * Lists WorkspaceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: WorkspaceListOptions): Promise<WorkspaceInstance[]>;
  /**
   * Lists WorkspaceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: WorkspaceListOptions, callback: (error: Error | null, items: WorkspaceInstance[]) => any): void;
  /**
   * Lists WorkspaceInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: WorkspaceInstance[]) => any): void;
  /**
   * Retrieve a single page of WorkspaceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: WorkspaceListPageOptions): Promise<WorkspacePage>;
  /**
   * Retrieve a single page of WorkspaceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: WorkspaceListPageOptions, callback: (error: Error | null, items: WorkspacePage) => any): void;
  /**
   * Retrieve a single page of WorkspaceInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: WorkspacePage) => any): void;
}

interface WorkspaceListFetchOptions {
  /**
   * The default_activity_sid
   */
  defaultActivitySid?: string;
  /**
   * The event_callback_url
   */
  eventCallbackUrl?: string;
  /**
   * The events_filter
   */
  eventsFilter?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The multi_task_enabled
   */
  multiTaskEnabled?: boolean;
  /**
   * The prioritize_queue_order
   */
  prioritizeQueueOrder?: WorkspaceQueueOrder;
  /**
   * The timeout_activity_sid
   */
  timeoutActivitySid?: string;
}

interface WorkspaceListFetchOptions {
  /**
   * The default_activity_sid
   */
  defaultActivitySid?: string;
  /**
   * The event_callback_url
   */
  eventCallbackUrl?: string;
  /**
   * The events_filter
   */
  eventsFilter?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The multi_task_enabled
   */
  multiTaskEnabled?: boolean;
  /**
   * The prioritize_queue_order
   */
  prioritizeQueueOrder?: WorkspaceQueueOrder;
  /**
   * The timeout_activity_sid
   */
  timeoutActivitySid?: string;
}

declare class WorkspacePage extends Page<V1, WorkspacePayload, WorkspaceResource, WorkspaceInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkspaceSolution);

  /**
   * Build an instance of WorkspaceInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkspacePayload): WorkspaceInstance;
}

declare class WorkspaceInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: WorkspacePayload, sid: string);

  private _proxy: WorkspaceContext;
  /**
   * The account_sid
   */
  accountSid: string;
  activities(): ActivityListInstance;
  cumulativeStatistics(): WorkspaceCumulativeStatisticsListInstance;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The default_activity_name
   */
  defaultActivityName: string;
  /**
   * The default_activity_sid
   */
  defaultActivitySid: string;
  /**
   * The event_callback_url
   */
  eventCallbackUrl: string;
  events(): EventListInstance;
  /**
   * The events_filter
   */
  eventsFilter: string;
  /**
   * fetch a WorkspaceInstance
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  fetch(): Promise<WorkspaceInstance>;
  /**
   * fetch a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The links
   */
  links: string;
  /**
   * The multi_task_enabled
   */
  multiTaskEnabled: boolean;
  /**
   * The prioritize_queue_order
   */
  prioritizeQueueOrder: WorkspaceQueueOrder;
  realTimeStatistics(): WorkspaceRealTimeStatisticsListInstance;
  /**
   * remove a WorkspaceInstance
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  remove(): Promise<WorkspaceInstance>;
  /**
   * remove a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  statistics(): WorkspaceStatisticsListInstance;
  taskChannels(): TaskChannelListInstance;
  taskQueues(): TaskQueueListInstance;
  tasks(): TaskListInstance;
  /**
   * The timeout_activity_name
   */
  timeoutActivityName: string;
  /**
   * The timeout_activity_sid
   */
  timeoutActivitySid: string;
  /**
   * update a WorkspaceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  update(opts?: WorkspaceListFetchOptions): Promise<WorkspaceInstance>;
  /**
   * update a WorkspaceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: WorkspaceListFetchOptions, callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * update a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * The url
   */
  url: string;
  workers(): WorkerListInstance;
  workflows(): WorkflowListInstance;
}

declare class WorkspaceContext {
  constructor(version: V1, sid: string);

  activities: ActivityListInstance;
  cumulativeStatistics: WorkspaceCumulativeStatisticsListInstance;
  events: EventListInstance;
  /**
   * fetch a WorkspaceInstance
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  fetch(): Promise<WorkspaceInstance>;
  /**
   * fetch a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  realTimeStatistics: WorkspaceRealTimeStatisticsListInstance;
  /**
   * remove a WorkspaceInstance
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  remove(): Promise<WorkspaceInstance>;
  /**
   * remove a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  statistics: WorkspaceStatisticsListInstance;
  taskChannels: TaskChannelListInstance;
  taskQueues: TaskQueueListInstance;
  tasks: TaskListInstance;
  /**
   * update a WorkspaceInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkspaceInstance
   */
  update(opts?: WorkspaceListFetchOptions): Promise<WorkspaceInstance>;
  /**
   * update a WorkspaceInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: WorkspaceListFetchOptions, callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  /**
   * update a WorkspaceInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: WorkspaceInstance) => any): void;
  workers: WorkerListInstance;
  workflows: WorkflowListInstance;
}

export {WorkspaceListCreateOptions, WorkspaceContext, WorkspaceList, WorkspaceListPageOptions, WorkspaceListFetchOptions, WorkspacePayload, WorkspaceListOptions, WorkspaceSolution, WorkspaceListEachOptions, WorkspacePage, WorkspaceListInstance, WorkspaceQueueOrder, WorkspaceInstance, WorkspaceResource}
