/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function ActivityList(version: V1, workspaceSid: string): ActivityListInstance

interface ActivityResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The available
   */
  available: boolean;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface ActivityPayload extends ActivityResource, Page.TwilioResponsePayload {
}

interface ActivitySolution {
  workspaceSid: string;
}

interface ActivityListEachOptions extends ListEachOptions<ActivityInstance> {
  /**
   * The available
   */
  available?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface ActivityListOptions extends ListOptions<ActivityInstance> {
  /**
   * The available
   */
  available?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface ActivityListPageOptions extends PageOptions<ActivityPage> {
  /**
   * The available
   */
  available?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface ActivityListCreateOptions {
  /**
   * The available
   */
  available?: boolean;
  /**
   * The friendly_name
   */
  friendlyName: string;
}

interface ActivityListInstance {
  /**
   * Gets context of a single Activity resource
   *
   * @param sid - The sid
   */
  (sid: string): ActivityContext;
  /**
   * create a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  create(opts: ActivityListCreateOptions): Promise<ActivityInstance>;
  /**
   * create a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: ActivityListCreateOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * Streams ActivityInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ActivityListEachOptions): void;
  /**
   * Streams ActivityInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ActivityInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Activity resource
   *
   * @param sid - The sid
   */
  get(sid: string): ActivityContext;
  /**
   * Retrieve a single target page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ActivityPage>;
  /**
   * Retrieve a single target page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ActivityPage) => any): void;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ActivityListOptions): Promise<ActivityInstance[]>;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ActivityListOptions, callback: (error: Error | null, items: ActivityInstance[]) => any): void;
  /**
   * Lists ActivityInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ActivityInstance[]) => any): void;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ActivityListPageOptions): Promise<ActivityPage>;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ActivityListPageOptions, callback: (error: Error | null, items: ActivityPage) => any): void;
  /**
   * Retrieve a single page of ActivityInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ActivityPage) => any): void;
}

interface ActivityListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

interface ActivityListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
}

declare class ActivityPage extends Page<V1, ActivityPayload, ActivityResource, ActivityInstance> {
  constructor(version: V1, response: Response<string>, solution: ActivitySolution);

  /**
   * Build an instance of ActivityInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ActivityPayload): ActivityInstance;
}

declare class ActivityInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: ActivityPayload, workspaceSid: string, sid: string);

  private _proxy: ActivityContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The available
   */
  available: boolean;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  fetch(): Promise<ActivityInstance>;
  /**
   * fetch a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * remove a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  remove(): Promise<ActivityInstance>;
  /**
   * remove a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  update(opts?: ActivityListFetchOptions): Promise<ActivityInstance>;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ActivityListFetchOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class ActivityContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  fetch(): Promise<ActivityInstance>;
  /**
   * fetch a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * remove a ActivityInstance
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  remove(): Promise<ActivityInstance>;
  /**
   * remove a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ActivityInstance
   */
  update(opts?: ActivityListFetchOptions): Promise<ActivityInstance>;
  /**
   * update a ActivityInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ActivityListFetchOptions, callback: (error: Error | null, items: ActivityInstance) => any): void;
  /**
   * update a ActivityInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ActivityInstance) => any): void;
}

export { ActivityContext, ActivityInstance, ActivityList, ActivityListCreateOptions, ActivityListEachOptions, ActivityListFetchOptions, ActivityListInstance, ActivityListOptions, ActivityListPageOptions, ActivityPage, ActivityPayload, ActivityResource, ActivitySolution }
