/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');

declare function WorkersStatisticsList(version: V1, workspaceSid: string): WorkersStatisticsListInstance

interface WorkersStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkersStatisticsPayload extends WorkersStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkersStatisticsSolution {
  workspaceSid: string;
}

interface WorkersStatisticsListInstance {
  /**
   * Gets context of a single WorkersStatistics resource
   */
  (): WorkersStatisticsContext;
  /**
   * Gets context of a single WorkersStatistics resource
   */
  get(): WorkersStatisticsContext;
}

interface WorkersStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
  /**
   * The task_queue_name
   */
  taskQueueName?: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
}

interface WorkersStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
  /**
   * The task_queue_name
   */
  taskQueueName?: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
}

declare class WorkersStatisticsPage extends Page<V1, WorkersStatisticsPayload, WorkersStatisticsResource, WorkersStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkersStatisticsSolution);

  /**
   * Build an instance of WorkersStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkersStatisticsPayload): WorkersStatisticsInstance;
}

declare class WorkersStatisticsInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   */
  constructor(version: V1, payload: WorkersStatisticsPayload, workspaceSid: string);

  private _proxy: WorkersStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersStatisticsInstance
   */
  fetch(opts?: WorkersStatisticsListFetchOptions): Promise<WorkersStatisticsInstance>;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkersStatisticsContext {
  constructor(version: V1, workspaceSid: string);

  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkersStatisticsInstance
   */
  fetch(opts?: WorkersStatisticsListFetchOptions): Promise<WorkersStatisticsInstance>;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkersStatisticsListFetchOptions, callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
  /**
   * fetch a WorkersStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkersStatisticsInstance) => any): void;
}

export { WorkersStatisticsContext, WorkersStatisticsInstance, WorkersStatisticsList, WorkersStatisticsListFetchOptions, WorkersStatisticsListInstance, WorkersStatisticsPage, WorkersStatisticsPayload, WorkersStatisticsResource, WorkersStatisticsSolution }
