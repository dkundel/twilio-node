/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');

declare function WorkflowRealTimeStatisticsList(version: V1, workspaceSid: string, workflowSid: string): WorkflowRealTimeStatisticsListInstance

interface WorkflowRealTimeStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The longest_task_waiting_age
   */
  longest_task_waiting_age: number;
  /**
   * The tasks_by_priority
   */
  tasks_by_priority: string;
  /**
   * The tasks_by_status
   */
  tasks_by_status: string;
  /**
   * The total_tasks
   */
  total_tasks: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_sid
   */
  workflow_sid: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkflowRealTimeStatisticsPayload extends WorkflowRealTimeStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkflowRealTimeStatisticsSolution {
  workflowSid: string;
  workspaceSid: string;
}

interface WorkflowRealTimeStatisticsListInstance {
  /**
   * Gets context of a single WorkflowRealTimeStatistics resource
   */
  (): WorkflowRealTimeStatisticsContext;
  /**
   * Gets context of a single WorkflowRealTimeStatistics resource
   */
  get(): WorkflowRealTimeStatisticsContext;
}

interface WorkflowRealTimeStatisticsListFetchOptions {
  /**
   * The task_channel
   */
  taskChannel?: string;
}

interface WorkflowRealTimeStatisticsListFetchOptions {
  /**
   * The task_channel
   */
  taskChannel?: string;
}

declare class WorkflowRealTimeStatisticsPage extends Page<V1, WorkflowRealTimeStatisticsPayload, WorkflowRealTimeStatisticsResource, WorkflowRealTimeStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkflowRealTimeStatisticsSolution);

  /**
   * Build an instance of WorkflowRealTimeStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkflowRealTimeStatisticsPayload): WorkflowRealTimeStatisticsInstance;
}

declare class WorkflowRealTimeStatisticsInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param workflowSid - The workflow_sid
   */
  constructor(version: V1, payload: WorkflowRealTimeStatisticsPayload, workspaceSid: string, workflowSid: string);

  private _proxy: WorkflowRealTimeStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowRealTimeStatisticsInstance
   */
  fetch(opts?: WorkflowRealTimeStatisticsListFetchOptions): Promise<WorkflowRealTimeStatisticsInstance>;
  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowRealTimeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowRealTimeStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowRealTimeStatisticsInstance) => any): void;
  /**
   * The longest_task_waiting_age
   */
  longestTaskWaitingAge: number;
  /**
   * The tasks_by_priority
   */
  tasksByPriority: string;
  /**
   * The tasks_by_status
   */
  tasksByStatus: string;
  /**
   * The total_tasks
   */
  totalTasks: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_sid
   */
  workflowSid: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkflowRealTimeStatisticsContext {
  constructor(version: V1, workspaceSid: string, workflowSid: string);

  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowRealTimeStatisticsInstance
   */
  fetch(opts?: WorkflowRealTimeStatisticsListFetchOptions): Promise<WorkflowRealTimeStatisticsInstance>;
  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowRealTimeStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowRealTimeStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowRealTimeStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowRealTimeStatisticsInstance) => any): void;
}

export {WorkflowRealTimeStatisticsResource, WorkflowRealTimeStatisticsPayload, WorkflowRealTimeStatisticsPage, WorkflowRealTimeStatisticsList, WorkflowRealTimeStatisticsContext, WorkflowRealTimeStatisticsSolution, WorkflowRealTimeStatisticsListInstance, WorkflowRealTimeStatisticsListFetchOptions, WorkflowRealTimeStatisticsInstance}
