/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');

declare function WorkflowStatisticsList(version: V1, workspaceSid: string, workflowSid: string): WorkflowStatisticsListInstance

interface WorkflowStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_sid
   */
  workflow_sid: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface WorkflowStatisticsPayload extends WorkflowStatisticsResource, Page.TwilioResponsePayload {
}

interface WorkflowStatisticsSolution {
  workflowSid: string;
  workspaceSid: string;
}

interface WorkflowStatisticsListInstance {
  /**
   * Gets context of a single WorkflowStatistics resource
   */
  (): WorkflowStatisticsContext;
  /**
   * Gets context of a single WorkflowStatistics resource
   */
  get(): WorkflowStatisticsContext;
}

interface WorkflowStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The split_by_wait_time
   */
  splitByWaitTime?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

interface WorkflowStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The split_by_wait_time
   */
  splitByWaitTime?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

declare class WorkflowStatisticsPage extends Page<V1, WorkflowStatisticsPayload, WorkflowStatisticsResource, WorkflowStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: WorkflowStatisticsSolution);

  /**
   * Build an instance of WorkflowStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: WorkflowStatisticsPayload): WorkflowStatisticsInstance;
}

declare class WorkflowStatisticsInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param workflowSid - The workflow_sid
   */
  constructor(version: V1, payload: WorkflowStatisticsPayload, workspaceSid: string, workflowSid: string);

  private _proxy: WorkflowStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowStatisticsInstance
   */
  fetch(opts?: WorkflowStatisticsListFetchOptions): Promise<WorkflowStatisticsInstance>;
  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowStatisticsInstance) => any): void;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_sid
   */
  workflowSid: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class WorkflowStatisticsContext {
  constructor(version: V1, workspaceSid: string, workflowSid: string);

  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed WorkflowStatisticsInstance
   */
  fetch(opts?: WorkflowStatisticsListFetchOptions): Promise<WorkflowStatisticsInstance>;
  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: WorkflowStatisticsListFetchOptions, callback: (error: Error | null, items: WorkflowStatisticsInstance) => any): void;
  /**
   * fetch a WorkflowStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: WorkflowStatisticsInstance) => any): void;
}

export { WorkflowStatisticsContext, WorkflowStatisticsInstance, WorkflowStatisticsList, WorkflowStatisticsListFetchOptions, WorkflowStatisticsListInstance, WorkflowStatisticsPage, WorkflowStatisticsPayload, WorkflowStatisticsResource, WorkflowStatisticsSolution }
