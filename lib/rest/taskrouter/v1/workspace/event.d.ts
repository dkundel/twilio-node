/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function EventList(version: V1, workspaceSid: string): EventListInstance

interface EventResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The actor_sid
   */
  actor_sid: string;
  /**
   * The actor_type
   */
  actor_type: string;
  /**
   * The actor_url
   */
  actor_url: string;
  /**
   * The description
   */
  description: string;
  /**
   * The event_data
   */
  event_data: string;
  /**
   * The event_date
   */
  event_date: Date;
  /**
   * The event_type
   */
  event_type: string;
  /**
   * The resource_sid
   */
  resource_sid: string;
  /**
   * The resource_type
   */
  resource_type: string;
  /**
   * The resource_url
   */
  resource_url: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The source
   */
  source: string;
  /**
   * The source_ip_address
   */
  source_ip_address: string;
  /**
   * The url
   */
  url: string;
}

interface EventPayload extends EventResource, Page.TwilioResponsePayload {
}

interface EventSolution {
  workspaceSid: string;
}

interface EventListEachOptions extends ListEachOptions<EventInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The event_type
   */
  eventType?: string;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The reservation_sid
   */
  reservationSid?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The task_sid
   */
  taskSid?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListOptions extends ListOptions<EventInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The event_type
   */
  eventType?: string;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The reservation_sid
   */
  reservationSid?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The task_sid
   */
  taskSid?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListPageOptions extends PageOptions<EventPage> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The event_type
   */
  eventType?: string;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The reservation_sid
   */
  reservationSid?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The task_sid
   */
  taskSid?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface EventListInstance {
  /**
   * Gets context of a single Event resource
   *
   * @param sid - The sid
   */
  (sid: string): EventContext;
  /**
   * Streams EventInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: EventListEachOptions): void;
  /**
   * Streams EventInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: EventInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Event resource
   *
   * @param sid - The sid
   */
  get(sid: string): EventContext;
  /**
   * Retrieve a single target page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<EventPage>;
  /**
   * Retrieve a single target page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: EventPage) => any): void;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: EventListOptions): Promise<EventInstance[]>;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: EventListOptions, callback: (error: Error | null, items: EventInstance[]) => any): void;
  /**
   * Lists EventInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: EventInstance[]) => any): void;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: EventListPageOptions): Promise<EventPage>;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: EventListPageOptions, callback: (error: Error | null, items: EventPage) => any): void;
  /**
   * Retrieve a single page of EventInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: EventPage) => any): void;
}

declare class EventPage extends Page<V1, EventPayload, EventResource, EventInstance> {
  constructor(version: V1, response: Response<string>, solution: EventSolution);

  /**
   * Build an instance of EventInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: EventPayload): EventInstance;
}

declare class EventInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: EventPayload, workspaceSid: string, sid: string);

  private _proxy: EventContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The actor_sid
   */
  actorSid: string;
  /**
   * The actor_type
   */
  actorType: string;
  /**
   * The actor_url
   */
  actorUrl: string;
  /**
   * The description
   */
  description: string;
  /**
   * The event_data
   */
  eventData: string;
  /**
   * The event_date
   */
  eventDate: Date;
  /**
   * The event_type
   */
  eventType: string;
  /**
   * fetch a EventInstance
   *
   * @returns Promise that resolves to processed EventInstance
   */
  fetch(): Promise<EventInstance>;
  /**
   * fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EventInstance) => any): void;
  /**
   * The resource_sid
   */
  resourceSid: string;
  /**
   * The resource_type
   */
  resourceType: string;
  /**
   * The resource_url
   */
  resourceUrl: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The source
   */
  source: string;
  /**
   * The source_ip_address
   */
  sourceIpAddress: string;
  /**
   * The url
   */
  url: string;
}

declare class EventContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a EventInstance
   *
   * @returns Promise that resolves to processed EventInstance
   */
  fetch(): Promise<EventInstance>;
  /**
   * fetch a EventInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: EventInstance) => any): void;
}

export {EventContext, EventResource, EventListOptions, EventList, EventPage, EventListEachOptions, EventListInstance, EventPayload, EventSolution, EventListPageOptions, EventInstance}
