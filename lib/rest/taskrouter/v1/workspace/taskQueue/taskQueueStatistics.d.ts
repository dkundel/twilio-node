/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');

declare function TaskQueueStatisticsList(version: V1, workspaceSid: string, taskQueueSid: string): TaskQueueStatisticsListInstance

interface TaskQueueStatisticsResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The task_queue_sid
   */
  task_queue_sid: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface TaskQueueStatisticsPayload extends TaskQueueStatisticsResource, Page.TwilioResponsePayload {
}

interface TaskQueueStatisticsSolution {
  taskQueueSid: string;
  workspaceSid: string;
}

interface TaskQueueStatisticsListInstance {
  /**
   * Gets context of a single TaskQueueStatistics resource
   */
  (): TaskQueueStatisticsContext;
  /**
   * Gets context of a single TaskQueueStatistics resource
   */
  get(): TaskQueueStatisticsContext;
}

interface TaskQueueStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The split_by_wait_time
   */
  splitByWaitTime?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

interface TaskQueueStatisticsListFetchOptions {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The minutes
   */
  minutes?: number;
  /**
   * The split_by_wait_time
   */
  splitByWaitTime?: string;
  /**
   * The start_date
   */
  startDate?: Date;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

declare class TaskQueueStatisticsPage extends Page<V1, TaskQueueStatisticsPayload, TaskQueueStatisticsResource, TaskQueueStatisticsInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskQueueStatisticsSolution);

  /**
   * Build an instance of TaskQueueStatisticsInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskQueueStatisticsPayload): TaskQueueStatisticsInstance;
}

declare class TaskQueueStatisticsInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param taskQueueSid - The task_queue_sid
   */
  constructor(version: V1, payload: TaskQueueStatisticsPayload, workspaceSid: string, taskQueueSid: string);

  private _proxy: TaskQueueStatisticsContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The cumulative
   */
  cumulative: string;
  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueStatisticsInstance
   */
  fetch(opts?: TaskQueueStatisticsListFetchOptions): Promise<TaskQueueStatisticsInstance>;
  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: TaskQueueStatisticsListFetchOptions, callback: (error: Error | null, items: TaskQueueStatisticsInstance) => any): void;
  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueStatisticsInstance) => any): void;
  /**
   * The realtime
   */
  realtime: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class TaskQueueStatisticsContext {
  constructor(version: V1, workspaceSid: string, taskQueueSid: string);

  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueStatisticsInstance
   */
  fetch(opts?: TaskQueueStatisticsListFetchOptions): Promise<TaskQueueStatisticsInstance>;
  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  fetch(opts: TaskQueueStatisticsListFetchOptions, callback: (error: Error | null, items: TaskQueueStatisticsInstance) => any): void;
  /**
   * fetch a TaskQueueStatisticsInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueStatisticsInstance) => any): void;
}

export {TaskQueueStatisticsPayload, TaskQueueStatisticsPage, TaskQueueStatisticsContext, TaskQueueStatisticsListInstance, TaskQueueStatisticsList, TaskQueueStatisticsResource, TaskQueueStatisticsListFetchOptions, TaskQueueStatisticsInstance, TaskQueueStatisticsSolution}
