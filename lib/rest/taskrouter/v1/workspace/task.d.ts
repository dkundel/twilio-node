/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { ReservationListInstance } from './task/reservation';

declare function TaskList(version: V1, workspaceSid: string): TaskListInstance

type TaskStatus = 'pending'|'reserved'|'assigned'|'canceled'|'completed'|'wrapping';

interface TaskResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The addons
   */
  addons: string;
  /**
   * The age
   */
  age: number;
  /**
   * The assignment_status
   */
  assignment_status: TaskStatus;
  /**
   * The attributes
   */
  attributes: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The links
   */
  links: string;
  /**
   * The priority
   */
  priority: number;
  /**
   * The reason
   */
  reason: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The task_channel_sid
   */
  task_channel_sid: string;
  /**
   * The task_channel_unique_name
   */
  task_channel_unique_name: string;
  /**
   * The task_queue_friendly_name
   */
  task_queue_friendly_name: string;
  /**
   * The task_queue_sid
   */
  task_queue_sid: string;
  /**
   * The timeout
   */
  timeout: number;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_friendly_name
   */
  workflow_friendly_name: string;
  /**
   * The workflow_sid
   */
  workflow_sid: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface TaskPayload extends TaskResource, Page.TwilioResponsePayload {
}

interface TaskSolution {
  workspaceSid: string;
}

interface TaskListEachOptions extends ListEachOptions<TaskInstance> {
  /**
   * The assignment_status
   */
  assignmentStatus?: string[];
  /**
   * The evaluate_task_attributes
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * The ordering
   */
  ordering?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The task_queue_name
   */
  taskQueueName?: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The workflow_name
   */
  workflowName?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface TaskListOptions extends ListOptions<TaskInstance> {
  /**
   * The assignment_status
   */
  assignmentStatus?: string[];
  /**
   * The evaluate_task_attributes
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * The ordering
   */
  ordering?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The task_queue_name
   */
  taskQueueName?: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The workflow_name
   */
  workflowName?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface TaskListPageOptions extends PageOptions<TaskPage> {
  /**
   * The assignment_status
   */
  assignmentStatus?: string[];
  /**
   * The evaluate_task_attributes
   */
  evaluateTaskAttributes?: string;
  /**
   * The has_addons
   */
  hasAddons?: boolean;
  /**
   * The ordering
   */
  ordering?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The task_queue_name
   */
  taskQueueName?: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid?: string;
  /**
   * The workflow_name
   */
  workflowName?: string;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface TaskListCreateOptions {
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The task_channel
   */
  taskChannel?: string;
  /**
   * The timeout
   */
  timeout?: number;
  /**
   * The workflow_sid
   */
  workflowSid?: string;
}

interface TaskListInstance {
  /**
   * Gets context of a single Task resource
   *
   * @param sid - The sid
   */
  (sid: string): TaskContext;
  /**
   * create a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  create(opts?: TaskListCreateOptions): Promise<TaskInstance>;
  /**
   * create a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TaskListCreateOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * create a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * Streams TaskInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TaskListEachOptions): void;
  /**
   * Streams TaskInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TaskInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Task resource
   *
   * @param sid - The sid
   */
  get(sid: string): TaskContext;
  /**
   * Retrieve a single target page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TaskPage>;
  /**
   * Retrieve a single target page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TaskPage) => any): void;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TaskListOptions): Promise<TaskInstance[]>;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TaskListOptions, callback: (error: Error | null, items: TaskInstance[]) => any): void;
  /**
   * Lists TaskInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TaskInstance[]) => any): void;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TaskListPageOptions): Promise<TaskPage>;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TaskListPageOptions, callback: (error: Error | null, items: TaskPage) => any): void;
  /**
   * Retrieve a single page of TaskInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TaskPage) => any): void;
}

interface TaskListFetchOptions {
  /**
   * The assignment_status
   */
  assignmentStatus?: TaskStatus;
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The reason
   */
  reason?: string;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

interface TaskListFetchOptions {
  /**
   * The assignment_status
   */
  assignmentStatus?: TaskStatus;
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The priority
   */
  priority?: number;
  /**
   * The reason
   */
  reason?: string;
  /**
   * The task_channel
   */
  taskChannel?: string;
}

declare class TaskPage extends Page<V1, TaskPayload, TaskResource, TaskInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskSolution);

  /**
   * Build an instance of TaskInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskPayload): TaskInstance;
}

declare class TaskInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskPayload, workspaceSid: string, sid: string);

  private _proxy: TaskContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The addons
   */
  addons: string;
  /**
   * The age
   */
  age: number;
  /**
   * The assignment_status
   */
  assignmentStatus: TaskStatus;
  /**
   * The attributes
   */
  attributes: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  fetch(): Promise<TaskInstance>;
  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * The links
   */
  links: string;
  /**
   * The priority
   */
  priority: number;
  /**
   * The reason
   */
  reason: string;
  /**
   * remove a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  remove(): Promise<TaskInstance>;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskInstance) => any): void;
  reservations(): ReservationListInstance;
  /**
   * The sid
   */
  sid: string;
  /**
   * The task_channel_sid
   */
  taskChannelSid: string;
  /**
   * The task_channel_unique_name
   */
  taskChannelUniqueName: string;
  /**
   * The task_queue_friendly_name
   */
  taskQueueFriendlyName: string;
  /**
   * The task_queue_sid
   */
  taskQueueSid: string;
  /**
   * The timeout
   */
  timeout: number;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  update(opts?: TaskListFetchOptions): Promise<TaskInstance>;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskListFetchOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * update a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The workflow_friendly_name
   */
  workflowFriendlyName: string;
  /**
   * The workflow_sid
   */
  workflowSid: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class TaskContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  fetch(): Promise<TaskInstance>;
  /**
   * fetch a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * remove a TaskInstance
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  remove(): Promise<TaskInstance>;
  /**
   * remove a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskInstance) => any): void;
  reservations: ReservationListInstance;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskInstance
   */
  update(opts?: TaskListFetchOptions): Promise<TaskInstance>;
  /**
   * update a TaskInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskListFetchOptions, callback: (error: Error | null, items: TaskInstance) => any): void;
  /**
   * update a TaskInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskInstance) => any): void;
}

export { TaskContext, TaskInstance, TaskList, TaskListCreateOptions, TaskListEachOptions, TaskListFetchOptions, TaskListInstance, TaskListOptions, TaskListPageOptions, TaskPage, TaskPayload, TaskResource, TaskSolution, TaskStatus }
