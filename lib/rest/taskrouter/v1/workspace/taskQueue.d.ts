/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { TaskQueueCumulativeStatisticsListInstance } from './taskQueue/taskQueueCumulativeStatistics';
import { TaskQueueRealTimeStatisticsListInstance } from './taskQueue/taskQueueRealTimeStatistics';
import { TaskQueueStatisticsListInstance } from './taskQueue/taskQueueStatistics';

declare function TaskQueueList(version: V1, workspaceSid: string): TaskQueueListInstance

type TaskQueueTaskOrder = 'FIFO'|'LIFO';

interface TaskQueueResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The assignment_activity_name
   */
  assignment_activity_name: string;
  /**
   * The assignment_activity_sid
   */
  assignment_activity_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The links
   */
  links: string;
  /**
   * The max_reserved_workers
   */
  max_reserved_workers: number;
  /**
   * The reservation_activity_name
   */
  reservation_activity_name: string;
  /**
   * The reservation_activity_sid
   */
  reservation_activity_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The target_workers
   */
  target_workers: string;
  /**
   * The task_order
   */
  task_order: TaskQueueTaskOrder;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface TaskQueuePayload extends TaskQueueResource, Page.TwilioResponsePayload {
}

interface TaskQueueSolution {
  workspaceSid: string;
}

interface TaskQueueListEachOptions extends ListEachOptions<TaskQueueInstance> {
  /**
   * The evaluate_worker_attributes
   */
  evaluateWorkerAttributes?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListOptions extends ListOptions<TaskQueueInstance> {
  /**
   * The evaluate_worker_attributes
   */
  evaluateWorkerAttributes?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListPageOptions extends PageOptions<TaskQueuePage> {
  /**
   * The evaluate_worker_attributes
   */
  evaluateWorkerAttributes?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The worker_sid
   */
  workerSid?: string;
}

interface TaskQueueListCreateOptions {
  /**
   * The assignment_activity_sid
   */
  assignmentActivitySid: string;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The max_reserved_workers
   */
  maxReservedWorkers?: number;
  /**
   * The reservation_activity_sid
   */
  reservationActivitySid: string;
  /**
   * The target_workers
   */
  targetWorkers?: string;
  /**
   * The task_order
   */
  taskOrder?: TaskQueueTaskOrder;
}

interface TaskQueueListInstance {
  /**
   * Gets context of a single TaskQueue resource
   *
   * @param sid - The sid
   */
  (sid: string): TaskQueueContext;
  /**
   * create a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  create(opts: TaskQueueListCreateOptions): Promise<TaskQueueInstance>;
  /**
   * create a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TaskQueueListCreateOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * Streams TaskQueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TaskQueueListEachOptions): void;
  /**
   * Streams TaskQueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TaskQueueInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single TaskQueue resource
   *
   * @param sid - The sid
   */
  get(sid: string): TaskQueueContext;
  /**
   * Retrieve a single target page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TaskQueuePage>;
  /**
   * Retrieve a single target page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TaskQueuePage) => any): void;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TaskQueueListOptions): Promise<TaskQueueInstance[]>;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TaskQueueListOptions, callback: (error: Error | null, items: TaskQueueInstance[]) => any): void;
  /**
   * Lists TaskQueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TaskQueueInstance[]) => any): void;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TaskQueueListPageOptions): Promise<TaskQueuePage>;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TaskQueueListPageOptions, callback: (error: Error | null, items: TaskQueuePage) => any): void;
  /**
   * Retrieve a single page of TaskQueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TaskQueuePage) => any): void;
}

interface TaskQueueListFetchOptions {
  /**
   * The assignment_activity_sid
   */
  assignmentActivitySid?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The max_reserved_workers
   */
  maxReservedWorkers?: number;
  /**
   * The reservation_activity_sid
   */
  reservationActivitySid?: string;
  /**
   * The target_workers
   */
  targetWorkers?: string;
  /**
   * The task_order
   */
  taskOrder?: TaskQueueTaskOrder;
}

interface TaskQueueListFetchOptions {
  /**
   * The assignment_activity_sid
   */
  assignmentActivitySid?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The max_reserved_workers
   */
  maxReservedWorkers?: number;
  /**
   * The reservation_activity_sid
   */
  reservationActivitySid?: string;
  /**
   * The target_workers
   */
  targetWorkers?: string;
  /**
   * The task_order
   */
  taskOrder?: TaskQueueTaskOrder;
}

declare class TaskQueuePage extends Page<V1, TaskQueuePayload, TaskQueueResource, TaskQueueInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskQueueSolution);

  /**
   * Build an instance of TaskQueueInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskQueuePayload): TaskQueueInstance;
}

declare class TaskQueueInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskQueuePayload, workspaceSid: string, sid: string);

  private _proxy: TaskQueueContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The assignment_activity_name
   */
  assignmentActivityName: string;
  /**
   * The assignment_activity_sid
   */
  assignmentActivitySid: string;
  cumulativeStatistics(): TaskQueueCumulativeStatisticsListInstance;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  fetch(): Promise<TaskQueueInstance>;
  /**
   * fetch a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The links
   */
  links: string;
  /**
   * The max_reserved_workers
   */
  maxReservedWorkers: number;
  realTimeStatistics(): TaskQueueRealTimeStatisticsListInstance;
  /**
   * remove a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  remove(): Promise<TaskQueueInstance>;
  /**
   * remove a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * The reservation_activity_name
   */
  reservationActivityName: string;
  /**
   * The reservation_activity_sid
   */
  reservationActivitySid: string;
  /**
   * The sid
   */
  sid: string;
  statistics(): TaskQueueStatisticsListInstance;
  /**
   * The target_workers
   */
  targetWorkers: string;
  /**
   * The task_order
   */
  taskOrder: TaskQueueTaskOrder;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  update(opts?: TaskQueueListFetchOptions): Promise<TaskQueueInstance>;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskQueueListFetchOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * update a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class TaskQueueContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  cumulativeStatistics: TaskQueueCumulativeStatisticsListInstance;
  /**
   * fetch a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  fetch(): Promise<TaskQueueInstance>;
  /**
   * fetch a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  realTimeStatistics: TaskQueueRealTimeStatisticsListInstance;
  /**
   * remove a TaskQueueInstance
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  remove(): Promise<TaskQueueInstance>;
  /**
   * remove a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  statistics: TaskQueueStatisticsListInstance;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TaskQueueInstance
   */
  update(opts?: TaskQueueListFetchOptions): Promise<TaskQueueInstance>;
  /**
   * update a TaskQueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: TaskQueueListFetchOptions, callback: (error: Error | null, items: TaskQueueInstance) => any): void;
  /**
   * update a TaskQueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: TaskQueueInstance) => any): void;
}

export {TaskQueueInstance, TaskQueueContext, TaskQueuePage, TaskQueueListInstance, TaskQueueSolution, TaskQueueListOptions, TaskQueueListCreateOptions, TaskQueueListEachOptions, TaskQueueListPageOptions, TaskQueueResource, TaskQueueListFetchOptions, TaskQueuePayload, TaskQueueTaskOrder, TaskQueueList}
