/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function TaskChannelList(version: V1, workspaceSid: string): TaskChannelListInstance

interface TaskChannelResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The unique_name
   */
  unique_name: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspace_sid: string;
}

interface TaskChannelPayload extends TaskChannelResource, Page.TwilioResponsePayload {
}

interface TaskChannelSolution {
  workspaceSid: string;
}

interface TaskChannelListEachOptions extends ListEachOptions<TaskChannelInstance> {
}

interface TaskChannelListOptions extends ListOptions<TaskChannelInstance> {
}

interface TaskChannelListPageOptions extends PageOptions<TaskChannelPage> {
}

interface TaskChannelListInstance {
  /**
   * Gets context of a single TaskChannel resource
   *
   * @param sid - The sid
   */
  (sid: string): TaskChannelContext;
  /**
   * Streams TaskChannelInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TaskChannelListEachOptions): void;
  /**
   * Streams TaskChannelInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TaskChannelInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single TaskChannel resource
   *
   * @param sid - The sid
   */
  get(sid: string): TaskChannelContext;
  /**
   * Retrieve a single target page of TaskChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TaskChannelPage>;
  /**
   * Retrieve a single target page of TaskChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TaskChannelPage) => any): void;
  /**
   * Lists TaskChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TaskChannelListOptions): Promise<TaskChannelInstance[]>;
  /**
   * Lists TaskChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TaskChannelListOptions, callback: (error: Error | null, items: TaskChannelInstance[]) => any): void;
  /**
   * Lists TaskChannelInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TaskChannelInstance[]) => any): void;
  /**
   * Retrieve a single page of TaskChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TaskChannelListPageOptions): Promise<TaskChannelPage>;
  /**
   * Retrieve a single page of TaskChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TaskChannelListPageOptions, callback: (error: Error | null, items: TaskChannelPage) => any): void;
  /**
   * Retrieve a single page of TaskChannelInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TaskChannelPage) => any): void;
}

declare class TaskChannelPage extends Page<V1, TaskChannelPayload, TaskChannelResource, TaskChannelInstance> {
  constructor(version: V1, response: Response<string>, solution: TaskChannelSolution);

  /**
   * Build an instance of TaskChannelInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TaskChannelPayload): TaskChannelInstance;
}

declare class TaskChannelInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param workspaceSid - The workspace_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: TaskChannelPayload, workspaceSid: string, sid: string);

  private _proxy: TaskChannelContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a TaskChannelInstance
   *
   * @returns Promise that resolves to processed TaskChannelInstance
   */
  fetch(): Promise<TaskChannelInstance>;
  /**
   * fetch a TaskChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskChannelInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The unique_name
   */
  uniqueName: string;
  /**
   * The url
   */
  url: string;
  /**
   * The workspace_sid
   */
  workspaceSid: string;
}

declare class TaskChannelContext {
  constructor(version: V1, workspaceSid: string, sid: string);

  /**
   * fetch a TaskChannelInstance
   *
   * @returns Promise that resolves to processed TaskChannelInstance
   */
  fetch(): Promise<TaskChannelInstance>;
  /**
   * fetch a TaskChannelInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: TaskChannelInstance) => any): void;
}

export {TaskChannelListInstance, TaskChannelListOptions, TaskChannelInstance, TaskChannelPage, TaskChannelContext, TaskChannelResource, TaskChannelSolution, TaskChannelList, TaskChannelListEachOptions, TaskChannelListPageOptions, TaskChannelPayload}
