/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { StreamMessageListInstance } from './syncStream/streamMessage';

declare function SyncStreamList(version: V1, serviceSid: string): SyncStreamListInstance

interface SyncStreamResource {
  /**
   * The unique SID identifier of the Twilio Account.
   */
  account_sid: string;
  /**
   * The identity of the Stream creator. If the Stream is created from the client SDK, the value matches the Access Token's 'identity' field. If the Stream was created from the REST API, the value is 'system'.
   */
  created_by: string;
  /**
   * The date this Stream was created, given in UTC ISO 8601 format.
   */
  date_created: Date;
  /**
   * The date this Stream expires and gets evicted from storage, given in UTC ISO 8601 format.
   */
  date_expires: Date;
  /**
   * Specifies the date this Stream was last updated, given in UTC ISO 8601 format.
   */
  date_updated: Date;
  /**
   * A dictionary of URL links to nested resources of this Stream.
   */
  links: string;
  /**
   * The unique SID identifier of the Service Instance.
   */
  service_sid: string;
  /**
   * The unique 34-character SID identifier of the Stream.
   */
  sid: string;
  /**
   * The unique and addressable name of this Stream. Optional, up to 256 characters long.
   */
  unique_name: string;
  /**
   * The absolute URL for this Stream.
   */
  url: string;
}

interface SyncStreamPayload extends SyncStreamResource, Page.TwilioResponsePayload {
}

interface SyncStreamSolution {
  serviceSid: string;
}

interface SyncStreamListCreateOptions {
  /**
   * Optional time-to-live of this Stream in seconds. In the range [1, 31 536 000 (1 year)], or 0 for infinity.
   */
  ttl?: number;
  /**
   * The unique and addressable name of this Stream. Optional, up to 256 characters long.
   */
  uniqueName?: string;
}

interface SyncStreamListEachOptions extends ListEachOptions<SyncStreamInstance> {
}

interface SyncStreamListOptions extends ListOptions<SyncStreamInstance> {
}

interface SyncStreamListPageOptions extends PageOptions<SyncStreamPage> {
}

interface SyncStreamListInstance {
  /**
   * Gets context of a single SyncStream resource
   *
   * @param sid - Stream SID or unique name.
   */
  (sid: string): SyncStreamContext;
  /**
   * create a SyncStreamInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  create(opts?: SyncStreamListCreateOptions): Promise<SyncStreamInstance>;
  /**
   * create a SyncStreamInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: SyncStreamListCreateOptions, callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * create a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * Streams SyncStreamInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: SyncStreamListEachOptions): void;
  /**
   * Streams SyncStreamInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: SyncStreamInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single SyncStream resource
   *
   * @param sid - Stream SID or unique name.
   */
  get(sid: string): SyncStreamContext;
  /**
   * Retrieve a single target page of SyncStreamInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<SyncStreamPage>;
  /**
   * Retrieve a single target page of SyncStreamInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: SyncStreamPage) => any): void;
  /**
   * Lists SyncStreamInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: SyncStreamListOptions): Promise<SyncStreamInstance[]>;
  /**
   * Lists SyncStreamInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: SyncStreamListOptions, callback: (error: Error | null, items: SyncStreamInstance[]) => any): void;
  /**
   * Lists SyncStreamInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: SyncStreamInstance[]) => any): void;
  /**
   * Retrieve a single page of SyncStreamInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: SyncStreamListPageOptions): Promise<SyncStreamPage>;
  /**
   * Retrieve a single page of SyncStreamInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: SyncStreamListPageOptions, callback: (error: Error | null, items: SyncStreamPage) => any): void;
  /**
   * Retrieve a single page of SyncStreamInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: SyncStreamPage) => any): void;
}

interface SyncStreamListFetchOptions {
  /**
   * Time-to-live of this Stream in seconds. In the range [1, 31 536 000 (1 year)], or 0 for infinity.
   */
  ttl?: number;
}

interface SyncStreamListFetchOptions {
  /**
   * Time-to-live of this Stream in seconds. In the range [1, 31 536 000 (1 year)], or 0 for infinity.
   */
  ttl?: number;
}

declare class SyncStreamPage extends Page<V1, SyncStreamPayload, SyncStreamResource, SyncStreamInstance> {
  constructor(version: V1, response: Response<string>, solution: SyncStreamSolution);

  /**
   * Build an instance of SyncStreamInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: SyncStreamPayload): SyncStreamInstance;
}

declare class SyncStreamInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param sid - Stream SID or unique name.
   */
  constructor(version: V1, payload: SyncStreamPayload, serviceSid: string, sid: string);

  private _proxy: SyncStreamContext;
  /**
   * The unique SID identifier of the Twilio Account.
   */
  accountSid: string;
  /**
   * The identity of the Stream creator. If the Stream is created from the client SDK, the value matches the Access Token's 'identity' field. If the Stream was created from the REST API, the value is 'system'.
   */
  createdBy: string;
  /**
   * The date this Stream was created, given in UTC ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date this Stream expires and gets evicted from storage, given in UTC ISO 8601 format.
   */
  dateExpires: Date;
  /**
   * Specifies the date this Stream was last updated, given in UTC ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * fetch a SyncStreamInstance
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  fetch(): Promise<SyncStreamInstance>;
  /**
   * fetch a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * A dictionary of URL links to nested resources of this Stream.
   */
  links: string;
  /**
   * remove a SyncStreamInstance
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  remove(): Promise<SyncStreamInstance>;
  /**
   * remove a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * The unique SID identifier of the Service Instance.
   */
  serviceSid: string;
  /**
   * The unique 34-character SID identifier of the Stream.
   */
  sid: string;
  streamMessages(): StreamMessageListInstance;
  /**
   * The unique and addressable name of this Stream. Optional, up to 256 characters long.
   */
  uniqueName: string;
  /**
   * update a SyncStreamInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  update(opts?: SyncStreamListFetchOptions): Promise<SyncStreamInstance>;
  /**
   * update a SyncStreamInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: SyncStreamListFetchOptions, callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * update a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * The absolute URL for this Stream.
   */
  url: string;
}

declare class SyncStreamContext {
  constructor(version: V1, serviceSid: string, sid: string);

  /**
   * fetch a SyncStreamInstance
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  fetch(): Promise<SyncStreamInstance>;
  /**
   * fetch a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * remove a SyncStreamInstance
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  remove(): Promise<SyncStreamInstance>;
  /**
   * remove a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  streamMessages: StreamMessageListInstance;
  /**
   * update a SyncStreamInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed SyncStreamInstance
   */
  update(opts?: SyncStreamListFetchOptions): Promise<SyncStreamInstance>;
  /**
   * update a SyncStreamInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: SyncStreamListFetchOptions, callback: (error: Error | null, items: SyncStreamInstance) => any): void;
  /**
   * update a SyncStreamInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: SyncStreamInstance) => any): void;
}

export {SyncStreamListFetchOptions, SyncStreamResource, SyncStreamPage, SyncStreamContext, SyncStreamInstance, SyncStreamSolution, SyncStreamListCreateOptions, SyncStreamListInstance, SyncStreamListOptions, SyncStreamList, SyncStreamPayload, SyncStreamListPageOptions, SyncStreamListEachOptions}
