/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';

declare function AlertList(version: V1): AlertListInstance

interface AlertResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The alert_text
   */
  alert_text: string;
  /**
   * The api_version
   */
  api_version: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_generated
   */
  date_generated: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The error_code
   */
  error_code: string;
  /**
   * The log_level
   */
  log_level: string;
  /**
   * The more_info
   */
  more_info: string;
  /**
   * The request_method
   */
  request_method: string;
  /**
   * The request_url
   */
  request_url: string;
  /**
   * The request_variables
   */
  request_variables?: string;
  /**
   * The resource_sid
   */
  resource_sid: string;
  /**
   * The response_body
   */
  response_body?: string;
  /**
   * The response_headers
   */
  response_headers?: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

interface AlertPayload extends AlertResource, Page.TwilioResponsePayload {
}

interface AlertSolution {
}

interface AlertListEachOptions extends ListEachOptions<AlertInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The log_level
   */
  logLevel?: string;
  /**
   * The start_date
   */
  startDate?: Date;
}

interface AlertListOptions extends ListOptions<AlertInstance> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The log_level
   */
  logLevel?: string;
  /**
   * The start_date
   */
  startDate?: Date;
}

interface AlertListPageOptions extends PageOptions<AlertPage> {
  /**
   * The end_date
   */
  endDate?: Date;
  /**
   * The log_level
   */
  logLevel?: string;
  /**
   * The start_date
   */
  startDate?: Date;
}

interface AlertListInstance {
  /**
   * Gets context of a single Alert resource
   *
   * @param sid - The sid
   */
  (sid: string): AlertContext;
  /**
   * Streams AlertInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AlertListEachOptions): void;
  /**
   * Streams AlertInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AlertInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Alert resource
   *
   * @param sid - The sid
   */
  get(sid: string): AlertContext;
  /**
   * Retrieve a single target page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AlertPage>;
  /**
   * Retrieve a single target page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AlertPage) => any): void;
  /**
   * Lists AlertInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AlertListOptions): Promise<AlertInstance[]>;
  /**
   * Lists AlertInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AlertListOptions, callback: (error: Error | null, items: AlertInstance[]) => any): void;
  /**
   * Lists AlertInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AlertInstance[]) => any): void;
  /**
   * Retrieve a single page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AlertListPageOptions): Promise<AlertPage>;
  /**
   * Retrieve a single page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AlertListPageOptions, callback: (error: Error | null, items: AlertPage) => any): void;
  /**
   * Retrieve a single page of AlertInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AlertPage) => any): void;
}

declare class AlertPage extends Page<V1, AlertPayload, AlertResource, AlertInstance> {
  constructor(version: V1, response: Response<string>, solution: AlertSolution);

  /**
   * Build an instance of AlertInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AlertPayload): AlertInstance;
}

declare class AlertInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - The sid
   */
  constructor(version: V1, payload: AlertPayload, sid: string);

  private _proxy: AlertContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The alert_text
   */
  alertText: string;
  /**
   * The api_version
   */
  apiVersion: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_generated
   */
  dateGenerated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The error_code
   */
  errorCode: string;
  /**
   * fetch a AlertInstance
   *
   * @returns Promise that resolves to processed AlertInstance
   */
  fetch(): Promise<AlertInstance>;
  /**
   * fetch a AlertInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AlertInstance) => any): void;
  /**
   * The log_level
   */
  logLevel: string;
  /**
   * The more_info
   */
  moreInfo: string;
  /**
   * remove a AlertInstance
   *
   * @returns Promise that resolves to processed AlertInstance
   */
  remove(): Promise<AlertInstance>;
  /**
   * remove a AlertInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AlertInstance) => any): void;
  /**
   * The request_method
   */
  requestMethod: string;
  /**
   * The request_url
   */
  requestUrl: string;
  /**
   * The request_variables
   */
  requestVariables: string;
  /**
   * The resource_sid
   */
  resourceSid: string;
  /**
   * The response_body
   */
  responseBody: string;
  /**
   * The response_headers
   */
  responseHeaders: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The url
   */
  url: string;
}

declare class AlertContext {
  constructor(version: V1, sid: string);

  /**
   * fetch a AlertInstance
   *
   * @returns Promise that resolves to processed AlertInstance
   */
  fetch(): Promise<AlertInstance>;
  /**
   * fetch a AlertInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AlertInstance) => any): void;
  /**
   * remove a AlertInstance
   *
   * @returns Promise that resolves to processed AlertInstance
   */
  remove(): Promise<AlertInstance>;
  /**
   * remove a AlertInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AlertInstance) => any): void;
}

export {AlertInstance, AlertListPageOptions, AlertPage, AlertContext, AlertSolution, AlertListOptions, AlertList, AlertListEachOptions, AlertListInstance, AlertPayload, AlertResource}
