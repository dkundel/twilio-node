/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V1 = require('../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function IpAccessControlListList(version: V1, trunkSid: string): IpAccessControlListListInstance

interface IpAccessControlListResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The trunk_sid
   */
  trunk_sid: string;
  /**
   * The url
   */
  url: string;
}

interface IpAccessControlListPayload extends IpAccessControlListResource, Page.TwilioResponsePayload {
}

interface IpAccessControlListSolution {
  trunkSid: string;
}

interface IpAccessControlListListCreateOptions {
  /**
   * The ip_access_control_list_sid
   */
  ipAccessControlListSid: string;
}

interface IpAccessControlListListEachOptions extends ListEachOptions<IpAccessControlListInstance> {
}

interface IpAccessControlListListOptions extends ListOptions<IpAccessControlListInstance> {
}

interface IpAccessControlListListPageOptions extends PageOptions<IpAccessControlListPage> {
}

interface IpAccessControlListListInstance {
  /**
   * Gets context of a single IpAccessControlList resource
   *
   * @param sid - The sid
   */
  (sid: string): IpAccessControlListContext;
  /**
   * create a IpAccessControlListInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  create(opts: IpAccessControlListListCreateOptions): Promise<IpAccessControlListInstance>;
  /**
   * create a IpAccessControlListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: IpAccessControlListListCreateOptions, callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * Streams IpAccessControlListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: IpAccessControlListListEachOptions): void;
  /**
   * Streams IpAccessControlListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: IpAccessControlListInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single IpAccessControlList resource
   *
   * @param sid - The sid
   */
  get(sid: string): IpAccessControlListContext;
  /**
   * Retrieve a single target page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<IpAccessControlListPage>;
  /**
   * Retrieve a single target page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: IpAccessControlListListOptions): Promise<IpAccessControlListInstance[]>;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: IpAccessControlListListOptions, callback: (error: Error | null, items: IpAccessControlListInstance[]) => any): void;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: IpAccessControlListInstance[]) => any): void;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: IpAccessControlListListPageOptions): Promise<IpAccessControlListPage>;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: IpAccessControlListListPageOptions, callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
}

declare class IpAccessControlListPage extends Page<V1, IpAccessControlListPayload, IpAccessControlListResource, IpAccessControlListInstance> {
  constructor(version: V1, response: Response<string>, solution: IpAccessControlListSolution);

  /**
   * Build an instance of IpAccessControlListInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: IpAccessControlListPayload): IpAccessControlListInstance;
}

declare class IpAccessControlListInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param trunkSid - The trunk_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: IpAccessControlListPayload, trunkSid: string, sid: string);

  private _proxy: IpAccessControlListContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  fetch(): Promise<IpAccessControlListInstance>;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * remove a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  remove(): Promise<IpAccessControlListInstance>;
  /**
   * remove a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * The trunk_sid
   */
  trunkSid: string;
  /**
   * The url
   */
  url: string;
}

declare class IpAccessControlListContext {
  constructor(version: V1, trunkSid: string, sid: string);

  /**
   * fetch a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  fetch(): Promise<IpAccessControlListInstance>;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * remove a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  remove(): Promise<IpAccessControlListInstance>;
  /**
   * remove a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
}

export {IpAccessControlListContext, IpAccessControlListListPageOptions, IpAccessControlListListInstance, IpAccessControlListResource, IpAccessControlListList, IpAccessControlListSolution, IpAccessControlListPage, IpAccessControlListListCreateOptions, IpAccessControlListListEachOptions, IpAccessControlListInstance, IpAccessControlListPayload, IpAccessControlListListOptions}
