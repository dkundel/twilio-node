/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../../base/Page');
import Response = require('../../../../../../http/response');
import V2010 = require('../../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../../interfaces';

declare function CredentialListMappingList(version: V2010, accountSid: string, domainSid: string): CredentialListMappingListInstance

interface CredentialListMappingResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresource_uris: string;
  /**
   * The uri
   */
  uri: string;
}

interface CredentialListMappingPayload extends CredentialListMappingResource, Page.TwilioResponsePayload {
}

interface CredentialListMappingSolution {
  accountSid: string;
  domainSid: string;
}

interface CredentialListMappingListCreateOptions {
  /**
   * The credential_list_sid
   */
  credentialListSid: string;
}

interface CredentialListMappingListEachOptions extends ListEachOptions<CredentialListMappingInstance> {
}

interface CredentialListMappingListOptions extends ListOptions<CredentialListMappingInstance> {
}

interface CredentialListMappingListPageOptions extends PageOptions<CredentialListMappingPage> {
}

interface CredentialListMappingListInstance {
  /**
   * Gets context of a single CredentialListMapping resource
   *
   * @param sid - The sid
   */
  (sid: string): CredentialListMappingContext;
  /**
   * create a CredentialListMappingInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CredentialListMappingInstance
   */
  create(opts: CredentialListMappingListCreateOptions): Promise<CredentialListMappingInstance>;
  /**
   * create a CredentialListMappingInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CredentialListMappingListCreateOptions, callback: (error: Error | null, items: CredentialListMappingInstance) => any): void;
  /**
   * Streams CredentialListMappingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CredentialListMappingListEachOptions): void;
  /**
   * Streams CredentialListMappingInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CredentialListMappingInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single CredentialListMapping resource
   *
   * @param sid - The sid
   */
  get(sid: string): CredentialListMappingContext;
  /**
   * Retrieve a single target page of CredentialListMappingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CredentialListMappingPage>;
  /**
   * Retrieve a single target page of CredentialListMappingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CredentialListMappingPage) => any): void;
  /**
   * Lists CredentialListMappingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CredentialListMappingListOptions): Promise<CredentialListMappingInstance[]>;
  /**
   * Lists CredentialListMappingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CredentialListMappingListOptions, callback: (error: Error | null, items: CredentialListMappingInstance[]) => any): void;
  /**
   * Lists CredentialListMappingInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CredentialListMappingInstance[]) => any): void;
  /**
   * Retrieve a single page of CredentialListMappingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CredentialListMappingListPageOptions): Promise<CredentialListMappingPage>;
  /**
   * Retrieve a single page of CredentialListMappingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CredentialListMappingListPageOptions, callback: (error: Error | null, items: CredentialListMappingPage) => any): void;
  /**
   * Retrieve a single page of CredentialListMappingInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CredentialListMappingPage) => any): void;
}

declare class CredentialListMappingPage extends Page<V2010, CredentialListMappingPayload, CredentialListMappingResource, CredentialListMappingInstance> {
  constructor(version: V2010, response: Response<string>, solution: CredentialListMappingSolution);

  /**
   * Build an instance of CredentialListMappingInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CredentialListMappingPayload): CredentialListMappingInstance;
}

declare class CredentialListMappingInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param domainSid - The domain_sid
   * @param sid - The sid
   */
  constructor(version: V2010, payload: CredentialListMappingPayload, accountSid: string, domainSid: string, sid: string);

  private _proxy: CredentialListMappingContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a CredentialListMappingInstance
   *
   * @returns Promise that resolves to processed CredentialListMappingInstance
   */
  fetch(): Promise<CredentialListMappingInstance>;
  /**
   * fetch a CredentialListMappingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CredentialListMappingInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * remove a CredentialListMappingInstance
   *
   * @returns Promise that resolves to processed CredentialListMappingInstance
   */
  remove(): Promise<CredentialListMappingInstance>;
  /**
   * remove a CredentialListMappingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CredentialListMappingInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresourceUris: string;
  /**
   * The uri
   */
  uri: string;
}

declare class CredentialListMappingContext {
  constructor(version: V2010, accountSid: string, domainSid: string, sid: string);

  /**
   * fetch a CredentialListMappingInstance
   *
   * @returns Promise that resolves to processed CredentialListMappingInstance
   */
  fetch(): Promise<CredentialListMappingInstance>;
  /**
   * fetch a CredentialListMappingInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CredentialListMappingInstance) => any): void;
  /**
   * remove a CredentialListMappingInstance
   *
   * @returns Promise that resolves to processed CredentialListMappingInstance
   */
  remove(): Promise<CredentialListMappingInstance>;
  /**
   * remove a CredentialListMappingInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CredentialListMappingInstance) => any): void;
}

export {CredentialListMappingListOptions, CredentialListMappingList, CredentialListMappingSolution, CredentialListMappingPage, CredentialListMappingResource, CredentialListMappingContext, CredentialListMappingListInstance, CredentialListMappingListCreateOptions, CredentialListMappingListEachOptions, CredentialListMappingPayload, CredentialListMappingInstance, CredentialListMappingListPageOptions}
