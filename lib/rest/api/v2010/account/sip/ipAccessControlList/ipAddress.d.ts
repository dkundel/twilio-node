/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../../base/Page');
import Response = require('../../../../../../http/response');
import V2010 = require('../../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../../interfaces';

declare function IpAddressList(version: V2010, accountSid: string, ipAccessControlListSid: string): IpAddressListInstance

interface IpAddressResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The ip_access_control_list_sid
   */
  ip_access_control_list_sid: string;
  /**
   * The ip_address
   */
  ip_address: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The uri
   */
  uri: string;
}

interface IpAddressPayload extends IpAddressResource, Page.TwilioResponsePayload {
}

interface IpAddressSolution {
  accountSid: string;
  ipAccessControlListSid: string;
}

interface IpAddressListEachOptions extends ListEachOptions<IpAddressInstance> {
}

interface IpAddressListOptions extends ListOptions<IpAddressInstance> {
}

interface IpAddressListPageOptions extends PageOptions<IpAddressPage> {
}

interface IpAddressListCreateOptions {
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The ip_address
   */
  ipAddress: string;
}

interface IpAddressListInstance {
  /**
   * Gets context of a single IpAddress resource
   *
   * @param sid - The sid
   */
  (sid: string): IpAddressContext;
  /**
   * create a IpAddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  create(opts: IpAddressListCreateOptions): Promise<IpAddressInstance>;
  /**
   * create a IpAddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: IpAddressListCreateOptions, callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * Streams IpAddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: IpAddressListEachOptions): void;
  /**
   * Streams IpAddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: IpAddressInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single IpAddress resource
   *
   * @param sid - The sid
   */
  get(sid: string): IpAddressContext;
  /**
   * Retrieve a single target page of IpAddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<IpAddressPage>;
  /**
   * Retrieve a single target page of IpAddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: IpAddressPage) => any): void;
  /**
   * Lists IpAddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: IpAddressListOptions): Promise<IpAddressInstance[]>;
  /**
   * Lists IpAddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: IpAddressListOptions, callback: (error: Error | null, items: IpAddressInstance[]) => any): void;
  /**
   * Lists IpAddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: IpAddressInstance[]) => any): void;
  /**
   * Retrieve a single page of IpAddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: IpAddressListPageOptions): Promise<IpAddressPage>;
  /**
   * Retrieve a single page of IpAddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: IpAddressListPageOptions, callback: (error: Error | null, items: IpAddressPage) => any): void;
  /**
   * Retrieve a single page of IpAddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: IpAddressPage) => any): void;
}

interface IpAddressListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The ip_address
   */
  ipAddress?: string;
}

interface IpAddressListFetchOptions {
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The ip_address
   */
  ipAddress?: string;
}

declare class IpAddressPage extends Page<V2010, IpAddressPayload, IpAddressResource, IpAddressInstance> {
  constructor(version: V2010, response: Response<string>, solution: IpAddressSolution);

  /**
   * Build an instance of IpAddressInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: IpAddressPayload): IpAddressInstance;
}

declare class IpAddressInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param ipAccessControlListSid - The ip_access_control_list_sid
   * @param sid - The sid
   */
  constructor(version: V2010, payload: IpAddressPayload, accountSid: string, ipAccessControlListSid: string, sid: string);

  private _proxy: IpAddressContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a IpAddressInstance
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  fetch(): Promise<IpAddressInstance>;
  /**
   * fetch a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The ip_access_control_list_sid
   */
  ipAccessControlListSid: string;
  /**
   * The ip_address
   */
  ipAddress: string;
  /**
   * remove a IpAddressInstance
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  remove(): Promise<IpAddressInstance>;
  /**
   * remove a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * update a IpAddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  update(opts?: IpAddressListFetchOptions): Promise<IpAddressInstance>;
  /**
   * update a IpAddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: IpAddressListFetchOptions, callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * update a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * The uri
   */
  uri: string;
}

declare class IpAddressContext {
  constructor(version: V2010, accountSid: string, ipAccessControlListSid: string, sid: string);

  /**
   * fetch a IpAddressInstance
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  fetch(): Promise<IpAddressInstance>;
  /**
   * fetch a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * remove a IpAddressInstance
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  remove(): Promise<IpAddressInstance>;
  /**
   * remove a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * update a IpAddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAddressInstance
   */
  update(opts?: IpAddressListFetchOptions): Promise<IpAddressInstance>;
  /**
   * update a IpAddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: IpAddressListFetchOptions, callback: (error: Error | null, items: IpAddressInstance) => any): void;
  /**
   * update a IpAddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: IpAddressInstance) => any): void;
}

export {IpAddressContext, IpAddressSolution, IpAddressListEachOptions, IpAddressListOptions, IpAddressResource, IpAddressInstance, IpAddressPayload, IpAddressListInstance, IpAddressListPageOptions, IpAddressList, IpAddressListFetchOptions, IpAddressListCreateOptions, IpAddressPage}
