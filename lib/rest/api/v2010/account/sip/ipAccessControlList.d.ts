/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import { IpAddressListInstance } from './ipAccessControlList/ipAddress';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function IpAccessControlListList(version: V2010, accountSid: string): IpAccessControlListListInstance

interface IpAccessControlListResource {
  /**
   * The unique id of the Account that sent this message.
   */
  account_sid: string;
  /**
   * The date that this resource was created, given as GMT in RFC 2822 format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given as GMT in RFC 2822 format.
   */
  date_updated: Date;
  /**
   * A human readable descriptive text, up to 64 characters long.
   */
  friendly_name: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresource_uris: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

interface IpAccessControlListPayload extends IpAccessControlListResource, Page.TwilioResponsePayload {
}

interface IpAccessControlListSolution {
  accountSid: string;
}

interface IpAccessControlListListEachOptions extends ListEachOptions<IpAccessControlListInstance> {
}

interface IpAccessControlListListOptions extends ListOptions<IpAccessControlListInstance> {
}

interface IpAccessControlListListPageOptions extends PageOptions<IpAccessControlListPage> {
}

interface IpAccessControlListListCreateOptions {
  /**
   * A human readable descriptive text, up to 64 characters long.
   */
  friendlyName: string;
}

interface IpAccessControlListListInstance {
  /**
   * Gets context of a single IpAccessControlList resource
   *
   * @param sid - Fetch by unique ip-access-control-list Sid
   */
  (sid: string): IpAccessControlListContext;
  /**
   * create a IpAccessControlListInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  create(opts: IpAccessControlListListCreateOptions): Promise<IpAccessControlListInstance>;
  /**
   * create a IpAccessControlListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: IpAccessControlListListCreateOptions, callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * Streams IpAccessControlListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: IpAccessControlListListEachOptions): void;
  /**
   * Streams IpAccessControlListInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: IpAccessControlListInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single IpAccessControlList resource
   *
   * @param sid - Fetch by unique ip-access-control-list Sid
   */
  get(sid: string): IpAccessControlListContext;
  /**
   * Retrieve a single target page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<IpAccessControlListPage>;
  /**
   * Retrieve a single target page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: IpAccessControlListListOptions): Promise<IpAccessControlListInstance[]>;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: IpAccessControlListListOptions, callback: (error: Error | null, items: IpAccessControlListInstance[]) => any): void;
  /**
   * Lists IpAccessControlListInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: IpAccessControlListInstance[]) => any): void;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: IpAccessControlListListPageOptions): Promise<IpAccessControlListPage>;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: IpAccessControlListListPageOptions, callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
  /**
   * Retrieve a single page of IpAccessControlListInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: IpAccessControlListPage) => any): void;
}

interface IpAccessControlListListFetchOptions {
  /**
   * A human readable descriptive text, up to 64 characters long.
   */
  friendlyName: string;
}

interface IpAccessControlListListFetchOptions {
  /**
   * A human readable descriptive text, up to 64 characters long.
   */
  friendlyName: string;
}

declare class IpAccessControlListPage extends Page<V2010, IpAccessControlListPayload, IpAccessControlListResource, IpAccessControlListInstance> {
  constructor(version: V2010, response: Response<string>, solution: IpAccessControlListSolution);

  /**
   * Build an instance of IpAccessControlListInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: IpAccessControlListPayload): IpAccessControlListInstance;
}

declare class IpAccessControlListInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique ip-access-control-list Sid
   */
  constructor(version: V2010, payload: IpAccessControlListPayload, accountSid: string, sid: string);

  private _proxy: IpAccessControlListContext;
  /**
   * The unique id of the Account that sent this message.
   */
  accountSid: string;
  /**
   * The date that this resource was created, given as GMT in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given as GMT in RFC 2822 format.
   */
  dateUpdated: Date;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  fetch(): Promise<IpAccessControlListInstance>;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * A human readable descriptive text, up to 64 characters long.
   */
  friendlyName: string;
  ipAddresses(): IpAddressListInstance;
  /**
   * remove a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  remove(): Promise<IpAccessControlListInstance>;
  /**
   * remove a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresourceUris: string;
  /**
   * update a IpAccessControlListInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  update(opts: IpAccessControlListListFetchOptions): Promise<IpAccessControlListInstance>;
  /**
   * update a IpAccessControlListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: IpAccessControlListListFetchOptions, callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

declare class IpAccessControlListContext {
  constructor(version: V2010, accountSid: string, sid: string);

  /**
   * fetch a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  fetch(): Promise<IpAccessControlListInstance>;
  /**
   * fetch a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  ipAddresses: IpAddressListInstance;
  /**
   * remove a IpAccessControlListInstance
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  remove(): Promise<IpAccessControlListInstance>;
  /**
   * remove a IpAccessControlListInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
  /**
   * update a IpAccessControlListInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed IpAccessControlListInstance
   */
  update(opts: IpAccessControlListListFetchOptions): Promise<IpAccessControlListInstance>;
  /**
   * update a IpAccessControlListInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: IpAccessControlListListFetchOptions, callback: (error: Error | null, items: IpAccessControlListInstance) => any): void;
}

export { IpAccessControlListContext, IpAccessControlListInstance, IpAccessControlListList, IpAccessControlListListCreateOptions, IpAccessControlListListEachOptions, IpAccessControlListListFetchOptions, IpAccessControlListListInstance, IpAccessControlListListOptions, IpAccessControlListListPageOptions, IpAccessControlListPage, IpAccessControlListPayload, IpAccessControlListResource, IpAccessControlListSolution }
