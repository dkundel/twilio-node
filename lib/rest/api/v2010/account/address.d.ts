/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { DependentPhoneNumberListInstance } from './address/dependentPhoneNumber';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function AddressList(version: V2010, accountSid: string): AddressListInstance

interface AddressResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The city
   */
  city: string;
  /**
   * The customer_name
   */
  customer_name: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The emergency_enabled
   */
  emergency_enabled: boolean;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The iso_country
   */
  iso_country: string;
  /**
   * The postal_code
   */
  postal_code: string;
  /**
   * The region
   */
  region: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The street
   */
  street: string;
  /**
   * The uri
   */
  uri: string;
  /**
   * The validated
   */
  validated: boolean;
}

interface AddressPayload extends AddressResource, Page.TwilioResponsePayload {
}

interface AddressSolution {
  accountSid: string;
}

interface AddressListCreateOptions {
  /**
   * The auto_correct_address
   */
  autoCorrectAddress?: boolean;
  /**
   * The city
   */
  city: string;
  /**
   * The customer_name
   */
  customerName: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The iso_country
   */
  isoCountry: string;
  /**
   * The postal_code
   */
  postalCode: string;
  /**
   * The region
   */
  region: string;
  /**
   * The street
   */
  street: string;
}

interface AddressListEachOptions extends ListEachOptions<AddressInstance> {
  /**
   * The customer_name
   */
  customerName?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The iso_country
   */
  isoCountry?: string;
}

interface AddressListOptions extends ListOptions<AddressInstance> {
  /**
   * The customer_name
   */
  customerName?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The iso_country
   */
  isoCountry?: string;
}

interface AddressListPageOptions extends PageOptions<AddressPage> {
  /**
   * The customer_name
   */
  customerName?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The iso_country
   */
  isoCountry?: string;
}

interface AddressListInstance {
  /**
   * Gets context of a single Address resource
   *
   * @param sid - The sid
   */
  (sid: string): AddressContext;
  /**
   * create a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  create(opts: AddressListCreateOptions): Promise<AddressInstance>;
  /**
   * create a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: AddressListCreateOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * Streams AddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AddressListEachOptions): void;
  /**
   * Streams AddressInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AddressInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Address resource
   *
   * @param sid - The sid
   */
  get(sid: string): AddressContext;
  /**
   * Retrieve a single target page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AddressPage>;
  /**
   * Retrieve a single target page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AddressPage) => any): void;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AddressListOptions): Promise<AddressInstance[]>;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AddressListOptions, callback: (error: Error | null, items: AddressInstance[]) => any): void;
  /**
   * Lists AddressInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AddressInstance[]) => any): void;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AddressListPageOptions): Promise<AddressPage>;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AddressListPageOptions, callback: (error: Error | null, items: AddressPage) => any): void;
  /**
   * Retrieve a single page of AddressInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AddressPage) => any): void;
}

interface AddressListFetchOptions {
  /**
   * The auto_correct_address
   */
  autoCorrectAddress?: boolean;
  /**
   * The city
   */
  city?: string;
  /**
   * The customer_name
   */
  customerName?: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The postal_code
   */
  postalCode?: string;
  /**
   * The region
   */
  region?: string;
  /**
   * The street
   */
  street?: string;
}

interface AddressListFetchOptions {
  /**
   * The auto_correct_address
   */
  autoCorrectAddress?: boolean;
  /**
   * The city
   */
  city?: string;
  /**
   * The customer_name
   */
  customerName?: string;
  /**
   * The emergency_enabled
   */
  emergencyEnabled?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The postal_code
   */
  postalCode?: string;
  /**
   * The region
   */
  region?: string;
  /**
   * The street
   */
  street?: string;
}

declare class AddressPage extends Page<V2010, AddressPayload, AddressResource, AddressInstance> {
  constructor(version: V2010, response: Response<string>, solution: AddressSolution);

  /**
   * Build an instance of AddressInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AddressPayload): AddressInstance;
}

declare class AddressInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - The sid
   */
  constructor(version: V2010, payload: AddressPayload, accountSid: string, sid: string);

  private _proxy: AddressContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The city
   */
  city: string;
  /**
   * The customer_name
   */
  customerName: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  dependentPhoneNumbers(): DependentPhoneNumberListInstance;
  /**
   * The emergency_enabled
   */
  emergencyEnabled: boolean;
  /**
   * fetch a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  fetch(): Promise<AddressInstance>;
  /**
   * fetch a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The iso_country
   */
  isoCountry: string;
  /**
   * The postal_code
   */
  postalCode: string;
  /**
   * The region
   */
  region: string;
  /**
   * remove a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  remove(): Promise<AddressInstance>;
  /**
   * remove a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * The sid
   */
  sid: string;
  /**
   * The street
   */
  street: string;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  update(opts?: AddressListFetchOptions): Promise<AddressInstance>;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AddressListFetchOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * The uri
   */
  uri: string;
  /**
   * The validated
   */
  validated: boolean;
}

declare class AddressContext {
  constructor(version: V2010, accountSid: string, sid: string);

  dependentPhoneNumbers: DependentPhoneNumberListInstance;
  /**
   * fetch a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  fetch(): Promise<AddressInstance>;
  /**
   * fetch a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * remove a AddressInstance
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  remove(): Promise<AddressInstance>;
  /**
   * remove a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed AddressInstance
   */
  update(opts?: AddressListFetchOptions): Promise<AddressInstance>;
  /**
   * update a AddressInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: AddressListFetchOptions, callback: (error: Error | null, items: AddressInstance) => any): void;
  /**
   * update a AddressInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: AddressInstance) => any): void;
}

export {AddressListPageOptions, AddressListFetchOptions, AddressResource, AddressList, AddressListInstance, AddressContext, AddressListEachOptions, AddressListCreateOptions, AddressInstance, AddressSolution, AddressListOptions, AddressPage, AddressPayload}
