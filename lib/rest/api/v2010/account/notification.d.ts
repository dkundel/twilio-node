/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function NotificationList(version: V2010, accountSid: string): NotificationListInstance

interface NotificationResource {
  /**
   * The unique id of the Account responsible for this notification.
   */
  account_sid: string;
  /**
   * The version of the Twilio in use when this notification was generated.  May be empty for events that don't have a specific API version, like incoming phone calls.
   */
  api_version: string;
  /**
   * CallSid is the unique id of the call during which the notification was generated. Empty if the notification was generated by the REST API without regard to a specific phone call.
   */
  call_sid: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  date_updated: Date;
  /**
   * A unique error code for the error condition. You can lookup errors, with possible causes and solutions, in our Error Dictionary.
   */
  error_code: string;
  /**
   * An integer log level corresponding to the type of notification: `0` is `ERROR`, `1` is `WARNING`.
   */
  log: string;
  /**
   * The date the notification was actually generated, given in RFC 2822 format. Due to buffering, this may be slightly different than the DateCreated date.
   */
  message_date: Date;
  /**
   * The text of the notification.
   */
  message_text: string;
  /**
   * A URL for more information about the error condition. The URL is a page in our Error Dictionary.
   */
  more_info: string;
  /**
   * The HTTP method in use for the request that generated the notification.
   */
  request_method: string;
  /**
   * The URL of the resource that generated the notification.
   */
  request_url: string;
  /**
   * The Twilio-generated HTTP GET or POST variables sent to your server. Alternatively, if the notification was generated by the REST API, this field will include any HTTP POST or PUT variables you sent to the REST API.
   */
  request_variables?: string;
  /**
   * The HTTP body returned by your server.
   */
  response_body?: string;
  /**
   * The HTTP headers returned by your server.
   */
  response_headers?: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * he URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

interface NotificationPayload extends NotificationResource, Page.TwilioResponsePayload {
}

interface NotificationSolution {
  accountSid: string;
}

interface NotificationListEachOptions extends ListEachOptions<NotificationInstance> {
  /**
   * Only show notifications for this log level
   */
  log?: number;
  /**
   * Only show notifications for this date. Should be formatted as YYYY-MM-DD. You can also specify inequalities.
   */
  messageDate?: Date;
}

interface NotificationListOptions extends ListOptions<NotificationInstance> {
  /**
   * Only show notifications for this log level
   */
  log?: number;
  /**
   * Only show notifications for this date. Should be formatted as YYYY-MM-DD. You can also specify inequalities.
   */
  messageDate?: Date;
}

interface NotificationListPageOptions extends PageOptions<NotificationPage> {
  /**
   * Only show notifications for this log level
   */
  log?: number;
  /**
   * Only show notifications for this date. Should be formatted as YYYY-MM-DD. You can also specify inequalities.
   */
  messageDate?: Date;
}

interface NotificationListInstance {
  /**
   * Gets context of a single Notification resource
   *
   * @param sid - Fetch by unique notification Sid
   */
  (sid: string): NotificationContext;
  /**
   * Streams NotificationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: NotificationListEachOptions): void;
  /**
   * Streams NotificationInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: NotificationInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Notification resource
   *
   * @param sid - Fetch by unique notification Sid
   */
  get(sid: string): NotificationContext;
  /**
   * Retrieve a single target page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<NotificationPage>;
  /**
   * Retrieve a single target page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: NotificationPage) => any): void;
  /**
   * Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: NotificationListOptions): Promise<NotificationInstance[]>;
  /**
   * Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: NotificationListOptions, callback: (error: Error | null, items: NotificationInstance[]) => any): void;
  /**
   * Lists NotificationInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: NotificationInstance[]) => any): void;
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: NotificationListPageOptions): Promise<NotificationPage>;
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: NotificationListPageOptions, callback: (error: Error | null, items: NotificationPage) => any): void;
  /**
   * Retrieve a single page of NotificationInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: NotificationPage) => any): void;
}

declare class NotificationPage extends Page<V2010, NotificationPayload, NotificationResource, NotificationInstance> {
  constructor(version: V2010, response: Response<string>, solution: NotificationSolution);

  /**
   * Build an instance of NotificationInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: NotificationPayload): NotificationInstance;
}

declare class NotificationInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique notification Sid
   */
  constructor(version: V2010, payload: NotificationPayload, accountSid: string, sid: string);

  private _proxy: NotificationContext;
  /**
   * The unique id of the Account responsible for this notification.
   */
  accountSid: string;
  /**
   * The version of the Twilio in use when this notification was generated.  May be empty for events that don't have a specific API version, like incoming phone calls.
   */
  apiVersion: string;
  /**
   * CallSid is the unique id of the call during which the notification was generated. Empty if the notification was generated by the REST API without regard to a specific phone call.
   */
  callSid: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  dateUpdated: Date;
  /**
   * A unique error code for the error condition. You can lookup errors, with possible causes and solutions, in our Error Dictionary.
   */
  errorCode: string;
  /**
   * fetch a NotificationInstance
   *
   * @returns Promise that resolves to processed NotificationInstance
   */
  fetch(): Promise<NotificationInstance>;
  /**
   * fetch a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: NotificationInstance) => any): void;
  /**
   * An integer log level corresponding to the type of notification: `0` is `ERROR`, `1` is `WARNING`.
   */
  log: string;
  /**
   * The date the notification was actually generated, given in RFC 2822 format. Due to buffering, this may be slightly different than the DateCreated date.
   */
  messageDate: Date;
  /**
   * The text of the notification.
   */
  messageText: string;
  /**
   * A URL for more information about the error condition. The URL is a page in our Error Dictionary.
   */
  moreInfo: string;
  /**
   * remove a NotificationInstance
   *
   * @returns Promise that resolves to processed NotificationInstance
   */
  remove(): Promise<NotificationInstance>;
  /**
   * remove a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: NotificationInstance) => any): void;
  /**
   * The HTTP method in use for the request that generated the notification.
   */
  requestMethod: string;
  /**
   * The URL of the resource that generated the notification.
   */
  requestUrl: string;
  /**
   * The Twilio-generated HTTP GET or POST variables sent to your server. Alternatively, if the notification was generated by the REST API, this field will include any HTTP POST or PUT variables you sent to the REST API.
   */
  requestVariables: string;
  /**
   * The HTTP body returned by your server.
   */
  responseBody: string;
  /**
   * The HTTP headers returned by your server.
   */
  responseHeaders: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * he URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

declare class NotificationContext {
  constructor(version: V2010, accountSid: string, sid: string);

  /**
   * fetch a NotificationInstance
   *
   * @returns Promise that resolves to processed NotificationInstance
   */
  fetch(): Promise<NotificationInstance>;
  /**
   * fetch a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: NotificationInstance) => any): void;
  /**
   * remove a NotificationInstance
   *
   * @returns Promise that resolves to processed NotificationInstance
   */
  remove(): Promise<NotificationInstance>;
  /**
   * remove a NotificationInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: NotificationInstance) => any): void;
}

export {NotificationPage, NotificationListEachOptions, NotificationListOptions, NotificationListInstance, NotificationSolution, NotificationInstance, NotificationList, NotificationContext, NotificationPayload, NotificationListPageOptions, NotificationResource}
