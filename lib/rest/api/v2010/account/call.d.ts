/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { FeedbackListInstance } from './call/feedback';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { NotificationListInstance } from './call/notification';
import { RecordingListInstance } from './call/recording';

declare function CallList(version: V2010, accountSid: string): CallListInstance

type CallEvent = 'initiated'|'ringing'|'answered'|'completed';

type CallStatus = 'queued'|'ringing'|'in-progress'|'completed'|'busy'|'failed'|'no-answer'|'canceled';

type CallUpdateStatus = 'canceled'|'completed';

interface CallResource {
  /**
   * The unique id of the Account responsible for creating this Call
   */
  account_sid: string;
  /**
   * The annotation provided for the Call
   */
  annotation: string;
  /**
   * If this call was initiated with answering machine detection, either `human` or `machine`. Empty otherwise.
   */
  answered_by: string;
  /**
   * The API Version the Call was created through
   */
  api_version: string;
  /**
   * If this call was an incoming call to a phone number with Caller ID Lookup enabled, the caller's name. Empty otherwise.
   */
  caller_name: string;
  /**
   * The date that this resource was created
   */
  date_created: Date;
  /**
   * The date that this resource was last updated
   */
  date_updated: Date;
  /**
   * A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
   */
  direction: string;
  /**
   * The duration
   */
  duration: string;
  /**
   * The end time of the Call. Null if the call did not complete successfully.
   */
  end_time: Date;
  /**
   * If this Call was an incoming call forwarded from another number, the forwarding phone number (depends on carrier supporting forwarding). Empty otherwise.
   */
  forwarded_from: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   */
  from: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Formatted for display.
   */
  from_formatted: string;
  /**
   * A 34 character Group Sid associated with this Call. Empty if no Group is associated with the Call.
   */
  group_sid: string;
  /**
   * A 34 character string that uniquely identifies the Call that created this leg.
   */
  parent_call_sid: string;
  /**
   * If the call was inbound, this is the Sid of the IncomingPhoneNumber that received the call. If the call was outbound, it is the Sid of the OutgoingCallerId from which the call was placed.
   */
  phone_number_sid: string;
  /**
   * The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
   */
  price: number;
  /**
   * The currency in which `Price` is measured.
   */
  price_unit: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The start time of the Call. Null if the call has not yet been dialed.
   */
  start_time: Date;
  /**
   * The status
   */
  status: CallStatus;
  /**
   * A Map of various subresources available for the given Call Instance
   */
  subresource_uris: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   */
  to: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Formatted for display.
   */
  to_formatted: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

interface CallPayload extends CallResource, Page.TwilioResponsePayload {
}

interface CallSolution {
  accountSid: string;
}

interface CallListCreateOptions {
  /**
   * The 34 character sid of the application Twilio should use to handle this phone call. If this parameter is present, Twilio will ignore all of the voice URLs passed and use the URLs set on the application.
   */
  applicationSid?: string;
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`. If an `ApplicationSid` was provided, this parameter is ignored.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs requesting or executing the TwiML at `Url`. If an `ApplicationSid` was provided, this parameter is ignored.
   */
  fallbackUrl?: string;
  /**
   * The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified outgoing caller id for your account.
   */
  from: string;
  /**
   * Tell Twilio to try and determine if a machine (like voicemail) or a human has answered the call. Possible value are `Continue` and `Hangup`.
   */
  ifMachine?: string;
  /**
   * Twilio will try to detect if a human, fax machine or answering machine has answered the call. Possible value are `Enable` and `DetectMessageEnd`.
   */
  machineDetection?: string;
  /**
   * The integer number of miliseconds that Twilio should wait while machine_detection is performned before timing out.
   */
  machineDetectionTimeout?: number;
  /**
   * The HTTP method Twilio should use when requesting the URL. Defaults to `POST`. If an `ApplicationSid` was provided, this parameter is ignored.
   */
  method?: string;
  /**
   * Set this parameter to true to record the entirety of a phone call. The RecordingUrl will be sent to the StatusCallback URL. Defaults to false.
   */
  record?: boolean;
  /**
   * The recording_channels
   */
  recordingChannels?: string;
  /**
   * The recording_status_callback
   */
  recordingStatusCallback?: string;
  /**
   * The recording_status_callback_event
   */
  recordingStatusCallbackEvent?: string[];
  /**
   * The recording_status_callback_method
   */
  recordingStatusCallbackMethod?: string;
  /**
   * A string of keys to dial after connecting to the number. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`' (to insert a half second pause). For example, if you connected to a company phone number, and wanted to pause for one second, dial extension 1234 and then the pound key, use `ww1234#`.
   */
  sendDigits?: string;
  /**
   * The sip_auth_password
   */
  sipAuthPassword?: string;
  /**
   * The sip_auth_username
   */
  sipAuthUsername?: string;
  /**
   * A URL that Twilio will request when the call ends to notify your app. If an `ApplicationSid` was provided, this parameter is ignored.
   */
  statusCallback?: string;
  /**
   * The status_callback_event
   */
  statusCallbackEvent?: string[];
  /**
   * The HTTP method that Twilio should use to request the `StatusCallback`. Defaults to `POST`. If an `ApplicationSid` was provided, this parameter is ignored.
   */
  statusCallbackMethod?: string;
  /**
   * The integer number of seconds that Twilio should allow the phone to ring before assuming there is no answer. Default is `60` seconds, the maximum is `999` seconds. Note, you could set this to a low value, such as `15`, to hangup before reaching an answering machine or voicemail.
   */
  timeout?: number;
  /**
   * The phone number, SIP address or client identifier to call.
   */
  to: string;
  /**
   * The fully qualified URL that should be consulted when the call connects. Just like when you set a URL on a phone number for handling inbound calls.
   */
  url?: string;
}

interface CallListEachOptions extends ListEachOptions<CallInstance> {
  /**
   * Only show call that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number or Client identifier
   */
  from?: string;
  /**
   * Only show calls spawned by the call with this Sid
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date
   */
  startTime?: Date;
  /**
   * Only show calls currently in this status
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number or Client identifier
   */
  to?: string;
}

interface CallListOptions extends ListOptions<CallInstance> {
  /**
   * Only show call that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number or Client identifier
   */
  from?: string;
  /**
   * Only show calls spawned by the call with this Sid
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date
   */
  startTime?: Date;
  /**
   * Only show calls currently in this status
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number or Client identifier
   */
  to?: string;
}

interface CallListPageOptions extends PageOptions<CallPage> {
  /**
   * Only show call that ended on this date
   */
  endTime?: Date;
  /**
   * Only show calls from this phone number or Client identifier
   */
  from?: string;
  /**
   * Only show calls spawned by the call with this Sid
   */
  parentCallSid?: string;
  /**
   * Only show calls that started on this date
   */
  startTime?: Date;
  /**
   * Only show calls currently in this status
   */
  status?: CallStatus;
  /**
   * Only show calls to this phone number or Client identifier
   */
  to?: string;
}

interface CallListInstance {
  /**
   * Gets context of a single Call resource
   *
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  (sid: string): CallContext;
  /**
   * create a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  create(opts: CallListCreateOptions): Promise<CallInstance>;
  /**
   * create a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: CallListCreateOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * Streams CallInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: CallListEachOptions): void;
  /**
   * Streams CallInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: CallInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Call resource
   *
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  get(sid: string): CallContext;
  /**
   * Retrieve a single target page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<CallPage>;
  /**
   * Retrieve a single target page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: CallPage) => any): void;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: CallListOptions): Promise<CallInstance[]>;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: CallListOptions, callback: (error: Error | null, items: CallInstance[]) => any): void;
  /**
   * Lists CallInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: CallInstance[]) => any): void;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: CallListPageOptions): Promise<CallPage>;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: CallListPageOptions, callback: (error: Error | null, items: CallPage) => any): void;
  /**
   * Retrieve a single page of CallInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: CallPage) => any): void;
}

interface CallListFetchOptions {
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs requesting or executing the TwiML at `Url`.
   */
  fallbackUrl?: string;
  /**
   * The HTTP method Twilio should use when requesting the URL. Defaults to `POST`.
   */
  method?: string;
  /**
   * Either `canceled` or `completed`. Specifying `canceled` will attempt to hangup calls that are queued or ringing but not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.
   */
  status?: CallUpdateStatus;
  /**
   * A URL that Twilio will request when the call ends to notify your app.
   */
  statusCallback?: string;
  /**
   * The HTTP method that Twilio should use to request the `StatusCallback`. Defaults to `POST`.
   */
  statusCallbackMethod?: string;
  /**
   * A valid URL that returns TwiML. Twilio will immediately redirect the call to the new TwiML upon execution.
   */
  url?: string;
}

interface CallListFetchOptions {
  /**
   * The HTTP method that Twilio should use to request the `FallbackUrl`. Must be either `GET` or `POST`. Defaults to `POST`.
   */
  fallbackMethod?: string;
  /**
   * A URL that Twilio will request if an error occurs requesting or executing the TwiML at `Url`.
   */
  fallbackUrl?: string;
  /**
   * The HTTP method Twilio should use when requesting the URL. Defaults to `POST`.
   */
  method?: string;
  /**
   * Either `canceled` or `completed`. Specifying `canceled` will attempt to hangup calls that are queued or ringing but not affect calls already in progress. Specifying `completed` will attempt to hang up a call even if it's already in progress.
   */
  status?: CallUpdateStatus;
  /**
   * A URL that Twilio will request when the call ends to notify your app.
   */
  statusCallback?: string;
  /**
   * The HTTP method that Twilio should use to request the `StatusCallback`. Defaults to `POST`.
   */
  statusCallbackMethod?: string;
  /**
   * A valid URL that returns TwiML. Twilio will immediately redirect the call to the new TwiML upon execution.
   */
  url?: string;
}

declare class CallPage extends Page<V2010, CallPayload, CallResource, CallInstance> {
  constructor(version: V2010, response: Response<string>, solution: CallSolution);

  /**
   * Build an instance of CallInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: CallPayload): CallInstance;
}

declare class CallInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Call Sid that uniquely identifies the Call to fetch
   */
  constructor(version: V2010, payload: CallPayload, accountSid: string, sid: string);

  private _proxy: CallContext;
  /**
   * The unique id of the Account responsible for creating this Call
   */
  accountSid: string;
  /**
   * The annotation provided for the Call
   */
  annotation: string;
  /**
   * If this call was initiated with answering machine detection, either `human` or `machine`. Empty otherwise.
   */
  answeredBy: string;
  /**
   * The API Version the Call was created through
   */
  apiVersion: string;
  /**
   * If this call was an incoming call to a phone number with Caller ID Lookup enabled, the caller's name. Empty otherwise.
   */
  callerName: string;
  /**
   * The date that this resource was created
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated
   */
  dateUpdated: Date;
  /**
   * A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
   */
  direction: string;
  /**
   * The duration
   */
  duration: string;
  /**
   * The end time of the Call. Null if the call did not complete successfully.
   */
  endTime: Date;
  feedback(): FeedbackListInstance;
  /**
   * fetch a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  fetch(): Promise<CallInstance>;
  /**
   * fetch a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * If this Call was an incoming call forwarded from another number, the forwarding phone number (depends on carrier supporting forwarding). Empty otherwise.
   */
  forwardedFrom: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   */
  from: string;
  /**
   * The phone number, SIP address or Client identifier that made this Call. Formatted for display.
   */
  fromFormatted: string;
  /**
   * A 34 character Group Sid associated with this Call. Empty if no Group is associated with the Call.
   */
  groupSid: string;
  notifications(): NotificationListInstance;
  /**
   * A 34 character string that uniquely identifies the Call that created this leg.
   */
  parentCallSid: string;
  /**
   * If the call was inbound, this is the Sid of the IncomingPhoneNumber that received the call. If the call was outbound, it is the Sid of the OutgoingCallerId from which the call was placed.
   */
  phoneNumberSid: string;
  /**
   * The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
   */
  price: number;
  /**
   * The currency in which `Price` is measured.
   */
  priceUnit: string;
  recordings(): RecordingListInstance;
  /**
   * remove a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  remove(): Promise<CallInstance>;
  /**
   * remove a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The start time of the Call. Null if the call has not yet been dialed.
   */
  startTime: Date;
  /**
   * The status
   */
  status: CallStatus;
  /**
   * A Map of various subresources available for the given Call Instance
   */
  subresourceUris: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Phone numbers are in E.164 format (e.g. +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
   */
  to: string;
  /**
   * The phone number, SIP address or Client identifier that received this Call. Formatted for display.
   */
  toFormatted: string;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  update(opts?: CallListFetchOptions): Promise<CallInstance>;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CallListFetchOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

declare class CallContext {
  constructor(version: V2010, accountSid: string, sid: string);

  feedback: FeedbackListInstance;
  /**
   * fetch a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  fetch(): Promise<CallInstance>;
  /**
   * fetch a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: CallInstance) => any): void;
  notifications: NotificationListInstance;
  recordings: RecordingListInstance;
  /**
   * remove a CallInstance
   *
   * @returns Promise that resolves to processed CallInstance
   */
  remove(): Promise<CallInstance>;
  /**
   * remove a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed CallInstance
   */
  update(opts?: CallListFetchOptions): Promise<CallInstance>;
  /**
   * update a CallInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: CallListFetchOptions, callback: (error: Error | null, items: CallInstance) => any): void;
  /**
   * update a CallInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: CallInstance) => any): void;
}

export {CallUpdateStatus, CallPayload, CallListPageOptions, CallInstance, CallStatus, CallList, CallListFetchOptions, CallSolution, CallPage, CallListInstance, CallResource, CallContext, CallEvent, CallListEachOptions, CallListCreateOptions, CallListOptions}
