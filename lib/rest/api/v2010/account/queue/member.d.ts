/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function MemberList(version: V2010, accountSid: string, queueSid: string): MemberListInstance

interface MemberResource {
  /**
   * A 34 character string that uniquely identifies the call that is enqueued.
   */
  call_sid: string;
  /**
   * The date that the member was enqueued, given in RFC 2822 format.
   */
  date_enqueued: Date;
  /**
   * This member's current position in the queue.
   */
  position: number;
  /**
   * The uri
   */
  uri: string;
  /**
   * The number of seconds the member has been in the queue.
   */
  wait_time: number;
}

interface MemberPayload extends MemberResource, Page.TwilioResponsePayload {
}

interface MemberSolution {
  accountSid: string;
  queueSid: string;
}

interface MemberListEachOptions extends ListEachOptions<MemberInstance> {
}

interface MemberListOptions extends ListOptions<MemberInstance> {
}

interface MemberListPageOptions extends PageOptions<MemberPage> {
}

interface MemberListInstance {
  /**
   * Gets context of a single Member resource
   *
   * @param callSid - The call_sid
   */
  (callSid: string): MemberContext;
  /**
   * Streams MemberInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: MemberListEachOptions): void;
  /**
   * Streams MemberInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: MemberInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Member resource
   *
   * @param callSid - The call_sid
   */
  get(callSid: string): MemberContext;
  /**
   * Retrieve a single target page of MemberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<MemberPage>;
  /**
   * Retrieve a single target page of MemberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: MemberPage) => any): void;
  /**
   * Lists MemberInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: MemberListOptions): Promise<MemberInstance[]>;
  /**
   * Lists MemberInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: MemberListOptions, callback: (error: Error | null, items: MemberInstance[]) => any): void;
  /**
   * Lists MemberInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: MemberInstance[]) => any): void;
  /**
   * Retrieve a single page of MemberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: MemberListPageOptions): Promise<MemberPage>;
  /**
   * Retrieve a single page of MemberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: MemberListPageOptions, callback: (error: Error | null, items: MemberPage) => any): void;
  /**
   * Retrieve a single page of MemberInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: MemberPage) => any): void;
}

interface MemberListFetchOptions {
  /**
   * The method
   */
  method: string;
  /**
   * The url
   */
  url: string;
}

interface MemberListFetchOptions {
  /**
   * The method
   */
  method: string;
  /**
   * The url
   */
  url: string;
}

declare class MemberPage extends Page<V2010, MemberPayload, MemberResource, MemberInstance> {
  constructor(version: V2010, response: Response<string>, solution: MemberSolution);

  /**
   * Build an instance of MemberInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: MemberPayload): MemberInstance;
}

declare class MemberInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param queueSid - The Queue in which to find the members
   * @param callSid - The call_sid
   */
  constructor(version: V2010, payload: MemberPayload, accountSid: string, queueSid: string, callSid: string);

  private _proxy: MemberContext;
  /**
   * A 34 character string that uniquely identifies the call that is enqueued.
   */
  callSid: string;
  /**
   * The date that the member was enqueued, given in RFC 2822 format.
   */
  dateEnqueued: Date;
  /**
   * fetch a MemberInstance
   *
   * @returns Promise that resolves to processed MemberInstance
   */
  fetch(): Promise<MemberInstance>;
  /**
   * fetch a MemberInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MemberInstance) => any): void;
  /**
   * This member's current position in the queue.
   */
  position: number;
  /**
   * update a MemberInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MemberInstance
   */
  update(opts: MemberListFetchOptions): Promise<MemberInstance>;
  /**
   * update a MemberInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MemberListFetchOptions, callback: (error: Error | null, items: MemberInstance) => any): void;
  /**
   * The uri
   */
  uri: string;
  /**
   * The number of seconds the member has been in the queue.
   */
  waitTime: number;
}

declare class MemberContext {
  constructor(version: V2010, accountSid: string, queueSid: string, callSid: string);

  /**
   * fetch a MemberInstance
   *
   * @returns Promise that resolves to processed MemberInstance
   */
  fetch(): Promise<MemberInstance>;
  /**
   * fetch a MemberInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MemberInstance) => any): void;
  /**
   * update a MemberInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MemberInstance
   */
  update(opts: MemberListFetchOptions): Promise<MemberInstance>;
  /**
   * update a MemberInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MemberListFetchOptions, callback: (error: Error | null, items: MemberInstance) => any): void;
}

export {MemberPage, MemberInstance, MemberContext, MemberListInstance, MemberListPageOptions, MemberListOptions, MemberResource, MemberSolution, MemberListFetchOptions, MemberPayload, MemberList, MemberListEachOptions}
