/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');

declare function FeedbackList(version: V2010, accountSid: string, callSid: string): FeedbackListInstance

type FeedbackIssues = 'audio-latency'|'digits-not-captured'|'dropped-call'|'imperfect-audio'|'incorrect-caller-id'|'one-way-audio'|'post-dial-delay'|'unsolicited-call';

interface FeedbackResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The issues
   */
  issues: FeedbackIssues;
  /**
   * 1 to 5 quality score where 1 represents imperfect experience and 5 represents a perfect call
   */
  quality_score: number;
  /**
   * The sid
   */
  sid: string;
}

interface FeedbackPayload extends FeedbackResource, Page.TwilioResponsePayload {
}

interface FeedbackSolution {
  accountSid: string;
  callSid: string;
}

interface FeedbackListInstance {
  /**
   * Gets context of a single Feedback resource
   */
  (): FeedbackContext;
  /**
   * Gets context of a single Feedback resource
   */
  get(): FeedbackContext;
}

interface FeedbackListCreateOptions {
  /**
   * The issue
   */
  issue?: FeedbackIssues[];
  /**
   * The quality_score
   */
  qualityScore: number;
}

interface FeedbackListFetchOptions {
  /**
   * One or more of the issues experienced during the call
   */
  issue?: FeedbackIssues[];
  /**
   * An integer from 1 to 5 quality score
   */
  qualityScore: number;
}

interface FeedbackListCreateOptions {
  /**
   * The issue
   */
  issue?: FeedbackIssues[];
  /**
   * The quality_score
   */
  qualityScore: number;
}

interface FeedbackListFetchOptions {
  /**
   * One or more of the issues experienced during the call
   */
  issue?: FeedbackIssues[];
  /**
   * An integer from 1 to 5 quality score
   */
  qualityScore: number;
}

declare class FeedbackPage extends Page<V2010, FeedbackPayload, FeedbackResource, FeedbackInstance> {
  constructor(version: V2010, response: Response<string>, solution: FeedbackSolution);

  /**
   * Build an instance of FeedbackInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: FeedbackPayload): FeedbackInstance;
}

declare class FeedbackInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param callSid - The call sid that uniquely identifies the call
   */
  constructor(version: V2010, payload: FeedbackPayload, accountSid: string, callSid: string);

  private _proxy: FeedbackContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * create a FeedbackInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  create(opts: FeedbackListCreateOptions): Promise<FeedbackInstance>;
  /**
   * create a FeedbackInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: FeedbackListCreateOptions, callback: (error: Error | null, items: FeedbackInstance) => any): void;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a FeedbackInstance
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  fetch(): Promise<FeedbackInstance>;
  /**
   * fetch a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FeedbackInstance) => any): void;
  /**
   * The issues
   */
  issues: FeedbackIssues;
  /**
   * 1 to 5 quality score where 1 represents imperfect experience and 5 represents a perfect call
   */
  qualityScore: number;
  /**
   * The sid
   */
  sid: string;
  /**
   * update a FeedbackInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  update(opts: FeedbackListFetchOptions): Promise<FeedbackInstance>;
  /**
   * update a FeedbackInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FeedbackListFetchOptions, callback: (error: Error | null, items: FeedbackInstance) => any): void;
}

declare class FeedbackContext {
  constructor(version: V2010, accountSid: string, callSid: string);

  /**
   * create a FeedbackInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  create(opts: FeedbackListCreateOptions): Promise<FeedbackInstance>;
  /**
   * create a FeedbackInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: FeedbackListCreateOptions, callback: (error: Error | null, items: FeedbackInstance) => any): void;
  /**
   * fetch a FeedbackInstance
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  fetch(): Promise<FeedbackInstance>;
  /**
   * fetch a FeedbackInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FeedbackInstance) => any): void;
  /**
   * update a FeedbackInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FeedbackInstance
   */
  update(opts: FeedbackListFetchOptions): Promise<FeedbackInstance>;
  /**
   * update a FeedbackInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FeedbackListFetchOptions, callback: (error: Error | null, items: FeedbackInstance) => any): void;
}

export {FeedbackPayload, FeedbackListFetchOptions, FeedbackInstance, FeedbackListInstance, FeedbackPage, FeedbackListCreateOptions, FeedbackSolution, FeedbackIssues, FeedbackResource, FeedbackList, FeedbackContext}
