/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';

declare function ConnectAppList(version: V2010, accountSid: string): ConnectAppListInstance

type ConnectAppPermission = 'get-all'|'post-all';

interface ConnectAppResource {
  /**
   * The unique id of the Account that created this ConnectApp.
   */
  account_sid: string;
  /**
   * The URL the user's browser will redirect to after Twilio authenticates the user and obtains authorization for this Connect App.
   */
  authorize_redirect_url: string;
  /**
   * The company name set for this Connect App.
   */
  company_name: string;
  /**
   * The HTTP method to be used when making a request to the `DeauthorizeCallbackUrl`.
   */
  deauthorize_callback_method: string;
  /**
   * The URL to which Twilio will send a request when a user de-authorizes this Connect App.
   */
  deauthorize_callback_url: string;
  /**
   * A more detailed human readable description of the Connect App.
   */
  description: string;
  /**
   * A human readable name for the Connect App.
   */
  friendly_name: string;
  /**
   * The public URL where users can obtain more information about this Connect App.
   */
  homepage_url: string;
  /**
   * The set of permissions that your ConnectApp requests.
   */
  permissions: ConnectAppPermission;
  /**
   * The unique id of this Connect App.
   */
  sid: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
}

interface ConnectAppPayload extends ConnectAppResource, Page.TwilioResponsePayload {
}

interface ConnectAppSolution {
  accountSid: string;
}

interface ConnectAppListEachOptions extends ListEachOptions<ConnectAppInstance> {
}

interface ConnectAppListOptions extends ListOptions<ConnectAppInstance> {
}

interface ConnectAppListPageOptions extends PageOptions<ConnectAppPage> {
}

interface ConnectAppListInstance {
  /**
   * Gets context of a single ConnectApp resource
   *
   * @param sid - Fetch by unique connect-app Sid
   */
  (sid: string): ConnectAppContext;
  /**
   * Streams ConnectAppInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: ConnectAppListEachOptions): void;
  /**
   * Streams ConnectAppInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: ConnectAppInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single ConnectApp resource
   *
   * @param sid - Fetch by unique connect-app Sid
   */
  get(sid: string): ConnectAppContext;
  /**
   * Retrieve a single target page of ConnectAppInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<ConnectAppPage>;
  /**
   * Retrieve a single target page of ConnectAppInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: ConnectAppPage) => any): void;
  /**
   * Lists ConnectAppInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: ConnectAppListOptions): Promise<ConnectAppInstance[]>;
  /**
   * Lists ConnectAppInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: ConnectAppListOptions, callback: (error: Error | null, items: ConnectAppInstance[]) => any): void;
  /**
   * Lists ConnectAppInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: ConnectAppInstance[]) => any): void;
  /**
   * Retrieve a single page of ConnectAppInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: ConnectAppListPageOptions): Promise<ConnectAppPage>;
  /**
   * Retrieve a single page of ConnectAppInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: ConnectAppListPageOptions, callback: (error: Error | null, items: ConnectAppPage) => any): void;
  /**
   * Retrieve a single page of ConnectAppInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: ConnectAppPage) => any): void;
}

interface ConnectAppListFetchOptions {
  /**
   * The URL the user's browser will redirect to after Twilio authenticates the user and obtains authorization for this Connect App.
   */
  authorizeRedirectUrl?: string;
  /**
   * The company name set for this Connect App.
   */
  companyName?: string;
  /**
   * The HTTP method to be used when making a request to the `DeauthorizeCallbackUrl`.
   */
  deauthorizeCallbackMethod?: string;
  /**
   * The URL to which Twilio will send a request when a user de-authorizes this Connect App.
   */
  deauthorizeCallbackUrl?: string;
  /**
   * A more detailed human readable description of the Connect App.
   */
  description?: string;
  /**
   * A human readable name for the Connect App.
   */
  friendlyName?: string;
  /**
   * The public URL where users can obtain more information about this Connect App.
   */
  homepageUrl?: string;
  /**
   * The set of permissions that your ConnectApp requests.
   */
  permissions?: ConnectAppPermission[];
}

interface ConnectAppListFetchOptions {
  /**
   * The URL the user's browser will redirect to after Twilio authenticates the user and obtains authorization for this Connect App.
   */
  authorizeRedirectUrl?: string;
  /**
   * The company name set for this Connect App.
   */
  companyName?: string;
  /**
   * The HTTP method to be used when making a request to the `DeauthorizeCallbackUrl`.
   */
  deauthorizeCallbackMethod?: string;
  /**
   * The URL to which Twilio will send a request when a user de-authorizes this Connect App.
   */
  deauthorizeCallbackUrl?: string;
  /**
   * A more detailed human readable description of the Connect App.
   */
  description?: string;
  /**
   * A human readable name for the Connect App.
   */
  friendlyName?: string;
  /**
   * The public URL where users can obtain more information about this Connect App.
   */
  homepageUrl?: string;
  /**
   * The set of permissions that your ConnectApp requests.
   */
  permissions?: ConnectAppPermission[];
}

declare class ConnectAppPage extends Page<V2010, ConnectAppPayload, ConnectAppResource, ConnectAppInstance> {
  constructor(version: V2010, response: Response<string>, solution: ConnectAppSolution);

  /**
   * Build an instance of ConnectAppInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: ConnectAppPayload): ConnectAppInstance;
}

declare class ConnectAppInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique connect-app Sid
   */
  constructor(version: V2010, payload: ConnectAppPayload, accountSid: string, sid: string);

  private _proxy: ConnectAppContext;
  /**
   * The unique id of the Account that created this ConnectApp.
   */
  accountSid: string;
  /**
   * The URL the user's browser will redirect to after Twilio authenticates the user and obtains authorization for this Connect App.
   */
  authorizeRedirectUrl: string;
  /**
   * The company name set for this Connect App.
   */
  companyName: string;
  /**
   * The HTTP method to be used when making a request to the `DeauthorizeCallbackUrl`.
   */
  deauthorizeCallbackMethod: string;
  /**
   * The URL to which Twilio will send a request when a user de-authorizes this Connect App.
   */
  deauthorizeCallbackUrl: string;
  /**
   * A more detailed human readable description of the Connect App.
   */
  description: string;
  /**
   * fetch a ConnectAppInstance
   *
   * @returns Promise that resolves to processed ConnectAppInstance
   */
  fetch(): Promise<ConnectAppInstance>;
  /**
   * fetch a ConnectAppInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ConnectAppInstance) => any): void;
  /**
   * A human readable name for the Connect App.
   */
  friendlyName: string;
  /**
   * The public URL where users can obtain more information about this Connect App.
   */
  homepageUrl: string;
  /**
   * The set of permissions that your ConnectApp requests.
   */
  permissions: ConnectAppPermission;
  /**
   * The unique id of this Connect App.
   */
  sid: string;
  /**
   * update a ConnectAppInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ConnectAppInstance
   */
  update(opts?: ConnectAppListFetchOptions): Promise<ConnectAppInstance>;
  /**
   * update a ConnectAppInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ConnectAppListFetchOptions, callback: (error: Error | null, items: ConnectAppInstance) => any): void;
  /**
   * update a ConnectAppInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ConnectAppInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`.
   */
  uri: string;
}

declare class ConnectAppContext {
  constructor(version: V2010, accountSid: string, sid: string);

  /**
   * fetch a ConnectAppInstance
   *
   * @returns Promise that resolves to processed ConnectAppInstance
   */
  fetch(): Promise<ConnectAppInstance>;
  /**
   * fetch a ConnectAppInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: ConnectAppInstance) => any): void;
  /**
   * update a ConnectAppInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed ConnectAppInstance
   */
  update(opts?: ConnectAppListFetchOptions): Promise<ConnectAppInstance>;
  /**
   * update a ConnectAppInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: ConnectAppListFetchOptions, callback: (error: Error | null, items: ConnectAppInstance) => any): void;
  /**
   * update a ConnectAppInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: ConnectAppInstance) => any): void;
}

export {ConnectAppList, ConnectAppListPageOptions, ConnectAppListInstance, ConnectAppPage, ConnectAppSolution, ConnectAppPayload, ConnectAppListEachOptions, ConnectAppListFetchOptions, ConnectAppListOptions, ConnectAppResource, ConnectAppInstance, ConnectAppContext, ConnectAppPermission}
