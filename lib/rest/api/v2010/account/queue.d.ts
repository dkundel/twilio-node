/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { MemberListInstance } from './queue/member';

declare function QueueList(version: V2010, accountSid: string): QueueListInstance

interface QueueResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   *  The average wait time of the members of this queue in seconds. This is calculated at the time of the request.
   */
  average_wait_time: number;
  /**
   * The count of calls currently in the queue.
   */
  current_size: number;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * A user-provided string that identifies this queue.
   */
  friendly_name: string;
  /**
   *  The upper limit of calls allowed to be in the queue. The default is 100. The maximum is 1000.
   */
  max_size: number;
  /**
   * A 34 character string that uniquely identifies this queue.
   */
  sid: string;
  /**
   * The uri
   */
  uri: string;
}

interface QueuePayload extends QueueResource, Page.TwilioResponsePayload {
}

interface QueueSolution {
  accountSid: string;
}

interface QueueListEachOptions extends ListEachOptions<QueueInstance> {
}

interface QueueListOptions extends ListOptions<QueueInstance> {
}

interface QueueListPageOptions extends PageOptions<QueuePage> {
}

interface QueueListCreateOptions {
  /**
   * A user-provided string that identifies this queue.
   */
  friendlyName: string;
  /**
   * The upper limit of calls allowed to be in the queue. The default is 100. The maximum is 1000.
   */
  maxSize?: number;
}

interface QueueListInstance {
  /**
   * Gets context of a single Queue resource
   *
   * @param sid - Fetch by unique queue Sid
   */
  (sid: string): QueueContext;
  /**
   * create a QueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  create(opts: QueueListCreateOptions): Promise<QueueInstance>;
  /**
   * create a QueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: QueueListCreateOptions, callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * Streams QueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: QueueListEachOptions): void;
  /**
   * Streams QueueInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: QueueInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Queue resource
   *
   * @param sid - Fetch by unique queue Sid
   */
  get(sid: string): QueueContext;
  /**
   * Retrieve a single target page of QueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<QueuePage>;
  /**
   * Retrieve a single target page of QueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: QueuePage) => any): void;
  /**
   * Lists QueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: QueueListOptions): Promise<QueueInstance[]>;
  /**
   * Lists QueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: QueueListOptions, callback: (error: Error | null, items: QueueInstance[]) => any): void;
  /**
   * Lists QueueInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: QueueInstance[]) => any): void;
  /**
   * Retrieve a single page of QueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: QueueListPageOptions): Promise<QueuePage>;
  /**
   * Retrieve a single page of QueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: QueueListPageOptions, callback: (error: Error | null, items: QueuePage) => any): void;
  /**
   * Retrieve a single page of QueueInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: QueuePage) => any): void;
}

interface QueueListFetchOptions {
  /**
   * A human readable description of the queue
   */
  friendlyName?: string;
  /**
   * The maximum number of members that can be in the queue at a time
   */
  maxSize?: number;
}

interface QueueListFetchOptions {
  /**
   * A human readable description of the queue
   */
  friendlyName?: string;
  /**
   * The maximum number of members that can be in the queue at a time
   */
  maxSize?: number;
}

declare class QueuePage extends Page<V2010, QueuePayload, QueueResource, QueueInstance> {
  constructor(version: V2010, response: Response<string>, solution: QueueSolution);

  /**
   * Build an instance of QueueInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: QueuePayload): QueueInstance;
}

declare class QueueInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique queue Sid
   */
  constructor(version: V2010, payload: QueuePayload, accountSid: string, sid: string);

  private _proxy: QueueContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   *  The average wait time of the members of this queue in seconds. This is calculated at the time of the request.
   */
  averageWaitTime: number;
  /**
   * The count of calls currently in the queue.
   */
  currentSize: number;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a QueueInstance
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  fetch(): Promise<QueueInstance>;
  /**
   * fetch a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * A user-provided string that identifies this queue.
   */
  friendlyName: string;
  /**
   *  The upper limit of calls allowed to be in the queue. The default is 100. The maximum is 1000.
   */
  maxSize: number;
  members(): MemberListInstance;
  /**
   * remove a QueueInstance
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  remove(): Promise<QueueInstance>;
  /**
   * remove a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this queue.
   */
  sid: string;
  /**
   * update a QueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  update(opts?: QueueListFetchOptions): Promise<QueueInstance>;
  /**
   * update a QueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: QueueListFetchOptions, callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * update a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * The uri
   */
  uri: string;
}

declare class QueueContext {
  constructor(version: V2010, accountSid: string, sid: string);

  /**
   * fetch a QueueInstance
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  fetch(): Promise<QueueInstance>;
  /**
   * fetch a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: QueueInstance) => any): void;
  members: MemberListInstance;
  /**
   * remove a QueueInstance
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  remove(): Promise<QueueInstance>;
  /**
   * remove a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * update a QueueInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed QueueInstance
   */
  update(opts?: QueueListFetchOptions): Promise<QueueInstance>;
  /**
   * update a QueueInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: QueueListFetchOptions, callback: (error: Error | null, items: QueueInstance) => any): void;
  /**
   * update a QueueInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: QueueInstance) => any): void;
}

export {QueueListInstance, QueueListPageOptions, QueueContext, QueuePayload, QueueList, QueueSolution, QueueListOptions, QueueListEachOptions, QueueResource, QueueListFetchOptions, QueueListCreateOptions, QueueInstance, QueuePage}
