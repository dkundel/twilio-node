/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../../base/Page');
import Response = require('../../../../../../http/response');
import V2010 = require('../../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../../interfaces';

declare function PayloadList(version: V2010, accountSid: string, referenceSid: string, addOnResultSid: string): PayloadListInstance

interface PayloadResource {
  /**
   * The unique id of the Account responsible for the recording.
   */
  account_sid: string;
  /**
   * A 34 character string that uniquely identifies the Add-on configuration.
   */
  add_on_configuration_sid: string;
  /**
   * A 34 character string that uniquely identifies this result to which this payload belongs.
   */
  add_on_result_sid: string;
  /**
   * A 34 character string that uniquely identifies the Add-on to which this payload belongs.
   */
  add_on_sid: string;
  /**
   * The MIME type of the payload.
   */
  content_type: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  date_updated: Date;
  /**
   * A string provided by the vendor that describes the payload.
   */
  label: string;
  /**
   * A 34 character string that uniquely identifies the recording to which this payload belongs.
   */
  reference_sid: string;
  /**
   * A 34 character string that uniquely identifies this payload.
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresource_uris: string;
}

interface PayloadPayload extends PayloadResource, Page.TwilioResponsePayload {
}

interface PayloadSolution {
  accountSid: string;
  addOnResultSid: string;
  referenceSid: string;
}

interface PayloadListEachOptions extends ListEachOptions<PayloadInstance> {
}

interface PayloadListOptions extends ListOptions<PayloadInstance> {
}

interface PayloadListPageOptions extends PageOptions<PayloadPage> {
}

interface PayloadListInstance {
  /**
   * Gets context of a single Payload resource
   *
   * @param sid - Fetch by unique payload Sid
   */
  (sid: string): PayloadContext;
  /**
   * Streams PayloadInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: PayloadListEachOptions): void;
  /**
   * Streams PayloadInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: PayloadInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Payload resource
   *
   * @param sid - Fetch by unique payload Sid
   */
  get(sid: string): PayloadContext;
  /**
   * Retrieve a single target page of PayloadInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<PayloadPage>;
  /**
   * Retrieve a single target page of PayloadInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: PayloadPage) => any): void;
  /**
   * Lists PayloadInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: PayloadListOptions): Promise<PayloadInstance[]>;
  /**
   * Lists PayloadInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: PayloadListOptions, callback: (error: Error | null, items: PayloadInstance[]) => any): void;
  /**
   * Lists PayloadInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: PayloadInstance[]) => any): void;
  /**
   * Retrieve a single page of PayloadInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: PayloadListPageOptions): Promise<PayloadPage>;
  /**
   * Retrieve a single page of PayloadInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: PayloadListPageOptions, callback: (error: Error | null, items: PayloadPage) => any): void;
  /**
   * Retrieve a single page of PayloadInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: PayloadPage) => any): void;
}

declare class PayloadPage extends Page<V2010, PayloadPayload, PayloadResource, PayloadInstance> {
  constructor(version: V2010, response: Response<string>, solution: PayloadSolution);

  /**
   * Build an instance of PayloadInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: PayloadPayload): PayloadInstance;
}

declare class PayloadInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param referenceSid - The reference_sid
   * @param addOnResultSid - The add_on_result_sid
   * @param sid - Fetch by unique payload Sid
   */
  constructor(version: V2010, payload: PayloadPayload, accountSid: string, referenceSid: string, addOnResultSid: string, sid: string);

  private _proxy: PayloadContext;
  /**
   * The unique id of the Account responsible for the recording.
   */
  accountSid: string;
  /**
   * A 34 character string that uniquely identifies the Add-on configuration.
   */
  addOnConfigurationSid: string;
  /**
   * A 34 character string that uniquely identifies this result to which this payload belongs.
   */
  addOnResultSid: string;
  /**
   * A 34 character string that uniquely identifies the Add-on to which this payload belongs.
   */
  addOnSid: string;
  /**
   * The MIME type of the payload.
   */
  contentType: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  dateUpdated: Date;
  /**
   * fetch a PayloadInstance
   *
   * @returns Promise that resolves to processed PayloadInstance
   */
  fetch(): Promise<PayloadInstance>;
  /**
   * fetch a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: PayloadInstance) => any): void;
  /**
   * A string provided by the vendor that describes the payload.
   */
  label: string;
  /**
   * A 34 character string that uniquely identifies the recording to which this payload belongs.
   */
  referenceSid: string;
  /**
   * remove a PayloadInstance
   *
   * @returns Promise that resolves to processed PayloadInstance
   */
  remove(): Promise<PayloadInstance>;
  /**
   * remove a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: PayloadInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this payload.
   */
  sid: string;
  /**
   * The subresource_uris
   */
  subresourceUris: string;
}

declare class PayloadContext {
  constructor(version: V2010, accountSid: string, referenceSid: string, addOnResultSid: string, sid: string);

  /**
   * fetch a PayloadInstance
   *
   * @returns Promise that resolves to processed PayloadInstance
   */
  fetch(): Promise<PayloadInstance>;
  /**
   * fetch a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: PayloadInstance) => any): void;
  /**
   * remove a PayloadInstance
   *
   * @returns Promise that resolves to processed PayloadInstance
   */
  remove(): Promise<PayloadInstance>;
  /**
   * remove a PayloadInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: PayloadInstance) => any): void;
}

export {PayloadPage, PayloadListOptions, PayloadList, PayloadListInstance, PayloadListEachOptions, PayloadListPageOptions, PayloadResource, PayloadPayload, PayloadContext, PayloadInstance, PayloadSolution}
