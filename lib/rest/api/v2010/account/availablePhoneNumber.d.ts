/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { LocalListInstance } from './availablePhoneNumber/local';
import { MobileListInstance } from './availablePhoneNumber/mobile';
import { TollFreeListInstance } from './availablePhoneNumber/tollFree';

declare function AvailablePhoneNumberCountryList(version: V2010, accountSid: string): AvailablePhoneNumberCountryListInstance

interface AvailablePhoneNumberCountryResource {
  /**
   * The beta
   */
  beta: boolean;
  /**
   * The country
   */
  country: string;
  /**
   * The ISO Country code to lookup phone numbers for.
   */
  country_code: string;
  /**
   * The subresource_uris
   */
  subresource_uris: string;
  /**
   * The uri
   */
  uri: string;
}

interface AvailablePhoneNumberCountryPayload extends AvailablePhoneNumberCountryResource, Page.TwilioResponsePayload {
}

interface AvailablePhoneNumberCountrySolution {
  accountSid: string;
}

interface AvailablePhoneNumberCountryListEachOptions extends ListEachOptions<AvailablePhoneNumberCountryInstance> {
}

interface AvailablePhoneNumberCountryListOptions extends ListOptions<AvailablePhoneNumberCountryInstance> {
}

interface AvailablePhoneNumberCountryListPageOptions extends PageOptions<AvailablePhoneNumberCountryPage> {
}

interface AvailablePhoneNumberCountryListInstance {
  /**
   * Gets context of a single AvailablePhoneNumberCountry resource
   *
   * @param countryCode - The country_code
   */
  (countryCode: string): AvailablePhoneNumberCountryContext;
  /**
   * Streams AvailablePhoneNumberCountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AvailablePhoneNumberCountryListEachOptions): void;
  /**
   * Streams AvailablePhoneNumberCountryInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AvailablePhoneNumberCountryInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single AvailablePhoneNumberCountry resource
   *
   * @param countryCode - The country_code
   */
  get(countryCode: string): AvailablePhoneNumberCountryContext;
  /**
   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AvailablePhoneNumberCountryPage>;
  /**
   * Retrieve a single target page of AvailablePhoneNumberCountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AvailablePhoneNumberCountryPage) => any): void;
  /**
   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AvailablePhoneNumberCountryListOptions): Promise<AvailablePhoneNumberCountryInstance[]>;
  /**
   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AvailablePhoneNumberCountryListOptions, callback: (error: Error | null, items: AvailablePhoneNumberCountryInstance[]) => any): void;
  /**
   * Lists AvailablePhoneNumberCountryInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AvailablePhoneNumberCountryInstance[]) => any): void;
  /**
   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AvailablePhoneNumberCountryListPageOptions): Promise<AvailablePhoneNumberCountryPage>;
  /**
   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AvailablePhoneNumberCountryListPageOptions, callback: (error: Error | null, items: AvailablePhoneNumberCountryPage) => any): void;
  /**
   * Retrieve a single page of AvailablePhoneNumberCountryInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AvailablePhoneNumberCountryPage) => any): void;
}

declare class AvailablePhoneNumberCountryPage extends Page<V2010, AvailablePhoneNumberCountryPayload, AvailablePhoneNumberCountryResource, AvailablePhoneNumberCountryInstance> {
  constructor(version: V2010, response: Response<string>, solution: AvailablePhoneNumberCountrySolution);

  /**
   * Build an instance of AvailablePhoneNumberCountryInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AvailablePhoneNumberCountryPayload): AvailablePhoneNumberCountryInstance;
}

declare class AvailablePhoneNumberCountryInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param countryCode - The country_code
   */
  constructor(version: V2010, payload: AvailablePhoneNumberCountryPayload, accountSid: string, countryCode: string);

  private _proxy: AvailablePhoneNumberCountryContext;
  /**
   * The beta
   */
  beta: boolean;
  /**
   * The country
   */
  country: string;
  /**
   * The ISO Country code to lookup phone numbers for.
   */
  countryCode: string;
  /**
   * fetch a AvailablePhoneNumberCountryInstance
   *
   * @returns Promise that resolves to processed AvailablePhoneNumberCountryInstance
   */
  fetch(): Promise<AvailablePhoneNumberCountryInstance>;
  /**
   * fetch a AvailablePhoneNumberCountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AvailablePhoneNumberCountryInstance) => any): void;
  local(): LocalListInstance;
  mobile(): MobileListInstance;
  /**
   * The subresource_uris
   */
  subresourceUris: string;
  tollFree(): TollFreeListInstance;
  /**
   * The uri
   */
  uri: string;
}

declare class AvailablePhoneNumberCountryContext {
  constructor(version: V2010, accountSid: string, countryCode: string);

  /**
   * fetch a AvailablePhoneNumberCountryInstance
   *
   * @returns Promise that resolves to processed AvailablePhoneNumberCountryInstance
   */
  fetch(): Promise<AvailablePhoneNumberCountryInstance>;
  /**
   * fetch a AvailablePhoneNumberCountryInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AvailablePhoneNumberCountryInstance) => any): void;
  local: LocalListInstance;
  mobile: MobileListInstance;
  tollFree: TollFreeListInstance;
}

export { AvailablePhoneNumberCountryContext, AvailablePhoneNumberCountryInstance, AvailablePhoneNumberCountryList, AvailablePhoneNumberCountryListEachOptions, AvailablePhoneNumberCountryListInstance, AvailablePhoneNumberCountryListOptions, AvailablePhoneNumberCountryListPageOptions, AvailablePhoneNumberCountryPage, AvailablePhoneNumberCountryPayload, AvailablePhoneNumberCountryResource, AvailablePhoneNumberCountrySolution }
