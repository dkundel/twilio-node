/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V2010 = require('../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function TollFreeList(version: V2010, accountSid: string): TollFreeListInstance

type TollFreeAddressRequirement = 'none'|'any'|'local'|'foreign';

interface TollFreeResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The address_requirements
   */
  address_requirements: TollFreeAddressRequirement;
  /**
   * The address_sid
   */
  address_sid: string;
  /**
   * The api_version
   */
  api_version: string;
  /**
   * The beta
   */
  beta: boolean;
  /**
   * The capabilities
   */
  capabilities: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The friendly_name
   */
  friendly_name: string;
  /**
   * The identity_sid
   */
  identity_sid: string;
  /**
   * The origin
   */
  origin: string;
  /**
   * The phone_number
   */
  phone_number: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sms_application_sid
   */
  sms_application_sid: string;
  /**
   * The sms_fallback_method
   */
  sms_fallback_method: string;
  /**
   * The sms_fallback_url
   */
  sms_fallback_url: string;
  /**
   * The sms_method
   */
  sms_method: string;
  /**
   * The sms_url
   */
  sms_url: string;
  /**
   * The status_callback
   */
  status_callback: string;
  /**
   * The status_callback_method
   */
  status_callback_method: string;
  /**
   * The trunk_sid
   */
  trunk_sid: string;
  /**
   * The uri
   */
  uri: string;
  /**
   * The voice_application_sid
   */
  voice_application_sid: string;
  /**
   * The voice_caller_id_lookup
   */
  voice_caller_id_lookup: boolean;
  /**
   * The voice_fallback_method
   */
  voice_fallback_method: string;
  /**
   * The voice_fallback_url
   */
  voice_fallback_url: string;
  /**
   * The voice_method
   */
  voice_method: string;
  /**
   * The voice_url
   */
  voice_url: string;
}

interface TollFreePayload extends TollFreeResource, Page.TwilioResponsePayload {
}

interface TollFreeSolution {
  accountSid: string;
}

interface TollFreeListEachOptions extends ListEachOptions<TollFreeInstance> {
  /**
   * The beta
   */
  beta?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The origin
   */
  origin?: string;
  /**
   * The phone_number
   */
  phoneNumber?: string;
}

interface TollFreeListOptions extends ListOptions<TollFreeInstance> {
  /**
   * The beta
   */
  beta?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The origin
   */
  origin?: string;
  /**
   * The phone_number
   */
  phoneNumber?: string;
}

interface TollFreeListPageOptions extends PageOptions<TollFreePage> {
  /**
   * The beta
   */
  beta?: boolean;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The origin
   */
  origin?: string;
  /**
   * The phone_number
   */
  phoneNumber?: string;
}

interface TollFreeListCreateOptions {
  /**
   * The address_sid
   */
  addressSid?: string;
  /**
   * The api_version
   */
  apiVersion?: string;
  /**
   * The friendly_name
   */
  friendlyName?: string;
  /**
   * The identity_sid
   */
  identitySid?: string;
  /**
   * The phone_number
   */
  phoneNumber: string;
  /**
   * The sms_application_sid
   */
  smsApplicationSid?: string;
  /**
   * The sms_fallback_method
   */
  smsFallbackMethod?: string;
  /**
   * The sms_fallback_url
   */
  smsFallbackUrl?: string;
  /**
   * The sms_method
   */
  smsMethod?: string;
  /**
   * The sms_url
   */
  smsUrl?: string;
  /**
   * The status_callback
   */
  statusCallback?: string;
  /**
   * The status_callback_method
   */
  statusCallbackMethod?: string;
  /**
   * The voice_application_sid
   */
  voiceApplicationSid?: string;
  /**
   * The voice_caller_id_lookup
   */
  voiceCallerIdLookup?: boolean;
  /**
   * The voice_fallback_method
   */
  voiceFallbackMethod?: string;
  /**
   * The voice_fallback_url
   */
  voiceFallbackUrl?: string;
  /**
   * The voice_method
   */
  voiceMethod?: string;
  /**
   * The voice_url
   */
  voiceUrl?: string;
}

interface TollFreeListInstance {
  /**
   * create a TollFreeInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TollFreeInstance
   */
  create(opts: TollFreeListCreateOptions): Promise<TollFreeInstance>;
  /**
   * create a TollFreeInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TollFreeListCreateOptions, callback: (error: Error | null, items: TollFreeInstance) => any): void;
  /**
   * Streams TollFreeInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: TollFreeListEachOptions): void;
  /**
   * Streams TollFreeInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: TollFreeInstance, done: (err?: Error) => void) => void): any;
  /**
   * Retrieve a single target page of TollFreeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<TollFreePage>;
  /**
   * Retrieve a single target page of TollFreeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: TollFreePage) => any): void;
  /**
   * Lists TollFreeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: TollFreeListOptions): Promise<TollFreeInstance[]>;
  /**
   * Lists TollFreeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: TollFreeListOptions, callback: (error: Error | null, items: TollFreeInstance[]) => any): void;
  /**
   * Lists TollFreeInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: TollFreeInstance[]) => any): void;
  /**
   * Retrieve a single page of TollFreeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: TollFreeListPageOptions): Promise<TollFreePage>;
  /**
   * Retrieve a single page of TollFreeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: TollFreeListPageOptions, callback: (error: Error | null, items: TollFreePage) => any): void;
  /**
   * Retrieve a single page of TollFreeInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: TollFreePage) => any): void;
}

declare class TollFreePage extends Page<V2010, TollFreePayload, TollFreeResource, TollFreeInstance> {
  constructor(version: V2010, response: Response<string>, solution: TollFreeSolution);

  /**
   * Build an instance of TollFreeInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TollFreePayload): TollFreeInstance;
}

declare class TollFreeInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V2010, payload: TollFreePayload);

  private _proxy: TollFreeContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The address_requirements
   */
  addressRequirements: TollFreeAddressRequirement;
  /**
   * The address_sid
   */
  addressSid: string;
  /**
   * The api_version
   */
  apiVersion: string;
  /**
   * The beta
   */
  beta: boolean;
  /**
   * The capabilities
   */
  capabilities: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * The friendly_name
   */
  friendlyName: string;
  /**
   * The identity_sid
   */
  identitySid: string;
  /**
   * The origin
   */
  origin: string;
  /**
   * The phone_number
   */
  phoneNumber: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The sms_application_sid
   */
  smsApplicationSid: string;
  /**
   * The sms_fallback_method
   */
  smsFallbackMethod: string;
  /**
   * The sms_fallback_url
   */
  smsFallbackUrl: string;
  /**
   * The sms_method
   */
  smsMethod: string;
  /**
   * The sms_url
   */
  smsUrl: string;
  /**
   * The status_callback
   */
  statusCallback: string;
  /**
   * The status_callback_method
   */
  statusCallbackMethod: string;
  /**
   * The trunk_sid
   */
  trunkSid: string;
  /**
   * The uri
   */
  uri: string;
  /**
   * The voice_application_sid
   */
  voiceApplicationSid: string;
  /**
   * The voice_caller_id_lookup
   */
  voiceCallerIdLookup: boolean;
  /**
   * The voice_fallback_method
   */
  voiceFallbackMethod: string;
  /**
   * The voice_fallback_url
   */
  voiceFallbackUrl: string;
  /**
   * The voice_method
   */
  voiceMethod: string;
  /**
   * The voice_url
   */
  voiceUrl: string;
}

export {TollFreeAddressRequirement, TollFreePage, TollFreeList, TollFreeListCreateOptions, TollFreeListOptions, TollFreeListInstance, TollFreeResource, TollFreePayload, TollFreeInstance, TollFreeSolution, TollFreeListEachOptions, TollFreeListPageOptions}
