/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../../base/Page');
import Response = require('../../../../../../http/response');
import V2010 = require('../../../../V2010');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../../interfaces';

declare function AssignedAddOnExtensionList(version: V2010, accountSid: string, resourceSid: string, assignedAddOnSid: string): AssignedAddOnExtensionListInstance

interface AssignedAddOnExtensionResource {
  /**
   * The unique id of the Account that has installed this Add-on.
   */
  account_sid: string;
  /**
   * A 34 character string that uniquely identifies the assigned Add-on installation.
   */
  assigned_add_on_sid: string;
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
  /**
   * A human-readable description of this Extension.
   */
  friendly_name: string;
  /**
   * A human-readable description of the Product this Extension is used within.
   */
  product_name: string;
  /**
   * The unique id of the Phone Number to which the Add-on is assigned.
   */
  resource_sid: string;
  /**
   * A 34 character string that uniquely identifies this Extension.
   */
  sid: string;
  /**
   * The human-readable string that uniquely identifies this Extension.
   */
  unique_name: string;
  /**
   * The uri
   */
  uri: string;
}

interface AssignedAddOnExtensionPayload extends AssignedAddOnExtensionResource, Page.TwilioResponsePayload {
}

interface AssignedAddOnExtensionSolution {
  accountSid: string;
  assignedAddOnSid: string;
  resourceSid: string;
}

interface AssignedAddOnExtensionListEachOptions extends ListEachOptions<AssignedAddOnExtensionInstance> {
}

interface AssignedAddOnExtensionListOptions extends ListOptions<AssignedAddOnExtensionInstance> {
}

interface AssignedAddOnExtensionListPageOptions extends PageOptions<AssignedAddOnExtensionPage> {
}

interface AssignedAddOnExtensionListInstance {
  /**
   * Gets context of a single AssignedAddOnExtension resource
   *
   * @param sid - The unique Extension Sid
   */
  (sid: string): AssignedAddOnExtensionContext;
  /**
   * Streams AssignedAddOnExtensionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: AssignedAddOnExtensionListEachOptions): void;
  /**
   * Streams AssignedAddOnExtensionInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: AssignedAddOnExtensionInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single AssignedAddOnExtension resource
   *
   * @param sid - The unique Extension Sid
   */
  get(sid: string): AssignedAddOnExtensionContext;
  /**
   * Retrieve a single target page of AssignedAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<AssignedAddOnExtensionPage>;
  /**
   * Retrieve a single target page of AssignedAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: AssignedAddOnExtensionPage) => any): void;
  /**
   * Lists AssignedAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: AssignedAddOnExtensionListOptions): Promise<AssignedAddOnExtensionInstance[]>;
  /**
   * Lists AssignedAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: AssignedAddOnExtensionListOptions, callback: (error: Error | null, items: AssignedAddOnExtensionInstance[]) => any): void;
  /**
   * Lists AssignedAddOnExtensionInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: AssignedAddOnExtensionInstance[]) => any): void;
  /**
   * Retrieve a single page of AssignedAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: AssignedAddOnExtensionListPageOptions): Promise<AssignedAddOnExtensionPage>;
  /**
   * Retrieve a single page of AssignedAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: AssignedAddOnExtensionListPageOptions, callback: (error: Error | null, items: AssignedAddOnExtensionPage) => any): void;
  /**
   * Retrieve a single page of AssignedAddOnExtensionInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: AssignedAddOnExtensionPage) => any): void;
}

declare class AssignedAddOnExtensionPage extends Page<V2010, AssignedAddOnExtensionPayload, AssignedAddOnExtensionResource, AssignedAddOnExtensionInstance> {
  constructor(version: V2010, response: Response<string>, solution: AssignedAddOnExtensionSolution);

  /**
   * Build an instance of AssignedAddOnExtensionInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: AssignedAddOnExtensionPayload): AssignedAddOnExtensionInstance;
}

declare class AssignedAddOnExtensionInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param resourceSid - The resource_sid
   * @param assignedAddOnSid - The assigned_add_on_sid
   * @param sid - The unique Extension Sid
   */
  constructor(version: V2010, payload: AssignedAddOnExtensionPayload, accountSid: string, resourceSid: string, assignedAddOnSid: string, sid: string);

  private _proxy: AssignedAddOnExtensionContext;
  /**
   * The unique id of the Account that has installed this Add-on.
   */
  accountSid: string;
  /**
   * A 34 character string that uniquely identifies the assigned Add-on installation.
   */
  assignedAddOnSid: string;
  /**
   * A Boolean indicating if the Extension will be invoked.
   */
  enabled: boolean;
  /**
   * fetch a AssignedAddOnExtensionInstance
   *
   * @returns Promise that resolves to processed AssignedAddOnExtensionInstance
   */
  fetch(): Promise<AssignedAddOnExtensionInstance>;
  /**
   * fetch a AssignedAddOnExtensionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AssignedAddOnExtensionInstance) => any): void;
  /**
   * A human-readable description of this Extension.
   */
  friendlyName: string;
  /**
   * A human-readable description of the Product this Extension is used within.
   */
  productName: string;
  /**
   * The unique id of the Phone Number to which the Add-on is assigned.
   */
  resourceSid: string;
  /**
   * A 34 character string that uniquely identifies this Extension.
   */
  sid: string;
  /**
   * The human-readable string that uniquely identifies this Extension.
   */
  uniqueName: string;
  /**
   * The uri
   */
  uri: string;
}

declare class AssignedAddOnExtensionContext {
  constructor(version: V2010, accountSid: string, resourceSid: string, assignedAddOnSid: string, sid: string);

  /**
   * fetch a AssignedAddOnExtensionInstance
   *
   * @returns Promise that resolves to processed AssignedAddOnExtensionInstance
   */
  fetch(): Promise<AssignedAddOnExtensionInstance>;
  /**
   * fetch a AssignedAddOnExtensionInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: AssignedAddOnExtensionInstance) => any): void;
}

export { AssignedAddOnExtensionContext, AssignedAddOnExtensionInstance, AssignedAddOnExtensionList, AssignedAddOnExtensionListEachOptions, AssignedAddOnExtensionListInstance, AssignedAddOnExtensionListOptions, AssignedAddOnExtensionListPageOptions, AssignedAddOnExtensionPage, AssignedAddOnExtensionPayload, AssignedAddOnExtensionResource, AssignedAddOnExtensionSolution }
