/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');

declare function TokenList(version: V2010, accountSid: string): TokenListInstance

interface TokenResource {
  /**
   * The unique id of the Account that created this Token.
   */
  account_sid: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  date_created: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  date_updated: Date;
  /**
   * An array representing the ephemeral credentials and the STUN and TURN server URIs.
   */
  ice_servers: string;
  /**
   * The temporary password that the username will use when authenticating with Twilio.
   */
  password: string;
  /**
   * The duration in seconds for which the username and password are valid, the default value is 86,400 (24 hours)
   */
  ttl: string;
  /**
   * The temporary username that uniquely identifies a Token.
   */
  username: string;
}

interface TokenPayload extends TokenResource, Page.TwilioResponsePayload {
}

interface TokenSolution {
  accountSid: string;
}

interface TokenListCreateOptions {
  /**
   * The duration in seconds for which the generated credentials are valid
   */
  ttl?: number;
}

interface TokenListInstance {
  /**
   * create a TokenInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed TokenInstance
   */
  create(opts?: TokenListCreateOptions): Promise<TokenInstance>;
  /**
   * create a TokenInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: TokenListCreateOptions, callback: (error: Error | null, items: TokenInstance) => any): void;
  /**
   * create a TokenInstance
   *
   * @param callback - Callback to handle processed record
   */
  create(callback: (error: Error | null, items: TokenInstance) => any): void;
}

declare class TokenPage extends Page<V2010, TokenPayload, TokenResource, TokenInstance> {
  constructor(version: V2010, response: Response<string>, solution: TokenSolution);

  /**
   * Build an instance of TokenInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: TokenPayload): TokenInstance;
}

declare class TokenInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   */
  constructor(version: V2010, payload: TokenPayload);

  private _proxy: TokenContext;
  /**
   * The unique id of the Account that created this Token.
   */
  accountSid: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  dateUpdated: Date;
  /**
   * An array representing the ephemeral credentials and the STUN and TURN server URIs.
   */
  iceServers: string;
  /**
   * The temporary password that the username will use when authenticating with Twilio.
   */
  password: string;
  /**
   * The duration in seconds for which the username and password are valid, the default value is 86,400 (24 hours)
   */
  ttl: string;
  /**
   * The temporary username that uniquely identifies a Token.
   */
  username: string;
}

export {TokenInstance, TokenPayload, TokenListCreateOptions, TokenListInstance, TokenPage, TokenResource, TokenSolution, TokenList}
