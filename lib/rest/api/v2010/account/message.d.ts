/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../base/Page');
import Response = require('../../../../http/response');
import V2010 = require('../../V2010');
import { FeedbackListInstance } from './message/feedback';
import { ListEachOptions, ListOptions, PageOptions } from '../../../../interfaces';
import { MediaListInstance } from './message/media';

declare function MessageList(version: V2010, accountSid: string): MessageListInstance

type MessageStatus = 'queued'|'sending'|'sent'|'failed'|'delivered'|'undelivered'|'receiving'|'received'|'accepted';

type MessageDirection = 'inbound'|'outbound-api'|'outbound-call'|'outbound-reply';

type MessageContentRetention = 'retain'|'discard';

type MessageAddressRetention = 'retain'|'discard';

interface MessageResource {
  /**
   * The unique id of the Account that sent this message.
   */
  account_sid: string;
  /**
   * The version of the Twilio API used to process the message.
   */
  api_version: string;
  /**
   * The text body of the message. Up to 1600 characters long.
   */
  body: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  date_created: Date;
  /**
   * The date that the message was sent. For incoming messages, this is the date that Twilio received the message. The date is given in RFC 2822 format.
   */
  date_sent: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  date_updated: Date;
  /**
   * The direction of this message. `inbound` for incoming messages, `outbound-api` for messages initiated via the REST API, `outbound-call` for messages initiated during a call or `outbound-reply` for messages initiated in response to an incoming message.
   */
  direction: MessageDirection;
  /**
   * The error code, if any, associated with your message. If your message status is `failed` or `undelivered`, the ErrorCode can give you more information about the failure. The value will be null if the message was delivered successfully.
   */
  error_code: number;
  /**
   * The human readable description of the ErrorCode. If the message status is `failed` or `undelivered` it will have one of the values described below, otherwise it will be null.
   */
  error_message: string;
  /**
   * The phone number (in E.164 format) or alphanumeric sender ID that initiated the message. For incoming messages, this will be the remote phone. For outgoing messages, this will be one of your Twilio phone numbers or the alphanumeric sender ID used.
   */
  from: string;
  /**
   * The messaging_service_sid
   */
  messaging_service_sid: string;
  /**
   * This property indicates the number of media files associated with the message. Each message may send up to 10 media files.
   */
  num_media: string;
  /**
   * This property indicates the number of messages used to deliver the body specified.  If your body is too large to be sent as a single SMS message, it will be segmented and charged accordingly.
   */
  num_segments: string;
  /**
   * The amount billed for the message, in the currency associated with the account.  Note that your account will be charged for each segment sent to the handset.
   */
  price: number;
  /**
   * The currency in which `Price` is measured, in ISO 4127 format (e.g. `usd`, `eur`, `jpy`).
   */
  price_unit: string;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The status of this message. Either `queued`, `sending`, `sent`,`failed`, `delivered`,     `undelivered`, `receiving` or `received`.
   */
  status: MessageStatus;
  /**
   * The URIs for any subresources associate with this resource, relative to `https://api.twilio.com`
   */
  subresource_uris: string;
  /**
   * The phone number that received the message in E.164 format. For incoming messages, this will be one of your Twilio phone numbers. For outgoing messages, this will be the remote phone.
   */
  to: string;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

interface MessagePayload extends MessageResource, Page.TwilioResponsePayload {
}

interface MessageSolution {
  accountSid: string;
}

interface MessageListCreateOptions {
  /**
   * The address_retention
   */
  addressRetention?: MessageAddressRetention;
  /**
   * Twilio the POST MessageSid as well as MessageStatus to the URL in the MessageStatusCallback property of this Application
   */
  applicationSid?: string;
  /**
   * The body
   */
  body?: string;
  /**
   * The content_retention
   */
  contentRetention?: MessageContentRetention;
  /**
   * The force_delivery
   */
  forceDelivery?: boolean;
  /**
   * A Twilio phone number or alphanumeric sender ID enabled for the type of message you wish to send.
   */
  from?: string;
  /**
   * The max_price
   */
  maxPrice?: number;
  /**
   * The max_rate
   */
  maxRate?: string;
  /**
   * The media_url
   */
  mediaUrl?: string[];
  /**
   * The messaging_service_sid
   */
  messagingServiceSid?: string;
  /**
   * The provide_feedback
   */
  provideFeedback?: boolean;
  /**
   * The provider_sid
   */
  providerSid?: string;
  /**
   * The smart_encoded
   */
  smartEncoded?: boolean;
  /**
   * The URL that Twilio will POST to each time your message status changes
   */
  statusCallback?: string;
  /**
   * The destination phone number. Format with a '+' and country code
   */
  to: string;
  /**
   * The validity_period
   */
  validityPeriod?: number;
}

interface MessageListEachOptions extends ListEachOptions<MessageInstance> {
  /**
   * Filter messages sent by this date
   */
  dateSent?: Date;
  /**
   * Only show messages from this phone number
   */
  from?: string;
  /**
   * Filter by messages to this number
   */
  to?: string;
}

interface MessageListOptions extends ListOptions<MessageInstance> {
  /**
   * Filter messages sent by this date
   */
  dateSent?: Date;
  /**
   * Only show messages from this phone number
   */
  from?: string;
  /**
   * Filter by messages to this number
   */
  to?: string;
}

interface MessageListPageOptions extends PageOptions<MessagePage> {
  /**
   * Filter messages sent by this date
   */
  dateSent?: Date;
  /**
   * Only show messages from this phone number
   */
  from?: string;
  /**
   * Filter by messages to this number
   */
  to?: string;
}

interface MessageListInstance {
  /**
   * Gets context of a single Message resource
   *
   * @param sid - Fetch by unique message Sid
   */
  (sid: string): MessageContext;
  /**
   * create a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  create(opts: MessageListCreateOptions): Promise<MessageInstance>;
  /**
   * create a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: MessageListCreateOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: MessageListEachOptions): void;
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: MessageInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Message resource
   *
   * @param sid - Fetch by unique message Sid
   */
  get(sid: string): MessageContext;
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<MessagePage>;
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: MessagePage) => any): void;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: MessageListOptions): Promise<MessageInstance[]>;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: MessageListOptions, callback: (error: Error | null, items: MessageInstance[]) => any): void;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: MessageInstance[]) => any): void;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: MessageListPageOptions): Promise<MessagePage>;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: MessageListPageOptions, callback: (error: Error | null, items: MessagePage) => any): void;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: MessagePage) => any): void;
}

interface MessageListFetchOptions {
  /**
   * The body
   */
  body: string;
}

interface MessageListFetchOptions {
  /**
   * The body
   */
  body: string;
}

declare class MessagePage extends Page<V2010, MessagePayload, MessageResource, MessageInstance> {
  constructor(version: V2010, response: Response<string>, solution: MessageSolution);

  /**
   * Build an instance of MessageInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: MessagePayload): MessageInstance;
}

declare class MessageInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param accountSid - The account_sid
   * @param sid - Fetch by unique message Sid
   */
  constructor(version: V2010, payload: MessagePayload, accountSid: string, sid: string);

  private _proxy: MessageContext;
  /**
   * The unique id of the Account that sent this message.
   */
  accountSid: string;
  /**
   * The version of the Twilio API used to process the message.
   */
  apiVersion: string;
  /**
   * The text body of the message. Up to 1600 characters long.
   */
  body: string;
  /**
   * The date that this resource was created, given in RFC 2822 format.
   */
  dateCreated: Date;
  /**
   * The date that the message was sent. For incoming messages, this is the date that Twilio received the message. The date is given in RFC 2822 format.
   */
  dateSent: Date;
  /**
   * The date that this resource was last updated, given in RFC 2822 format.
   */
  dateUpdated: Date;
  /**
   * The direction of this message. `inbound` for incoming messages, `outbound-api` for messages initiated via the REST API, `outbound-call` for messages initiated during a call or `outbound-reply` for messages initiated in response to an incoming message.
   */
  direction: MessageDirection;
  /**
   * The error code, if any, associated with your message. If your message status is `failed` or `undelivered`, the ErrorCode can give you more information about the failure. The value will be null if the message was delivered successfully.
   */
  errorCode: number;
  /**
   * The human readable description of the ErrorCode. If the message status is `failed` or `undelivered` it will have one of the values described below, otherwise it will be null.
   */
  errorMessage: string;
  feedback(): FeedbackListInstance;
  /**
   * fetch a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  fetch(): Promise<MessageInstance>;
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * The phone number (in E.164 format) or alphanumeric sender ID that initiated the message. For incoming messages, this will be the remote phone. For outgoing messages, this will be one of your Twilio phone numbers or the alphanumeric sender ID used.
   */
  from: string;
  media(): MediaListInstance;
  /**
   * The messaging_service_sid
   */
  messagingServiceSid: string;
  /**
   * This property indicates the number of media files associated with the message. Each message may send up to 10 media files.
   */
  numMedia: string;
  /**
   * This property indicates the number of messages used to deliver the body specified.  If your body is too large to be sent as a single SMS message, it will be segmented and charged accordingly.
   */
  numSegments: string;
  /**
   * The amount billed for the message, in the currency associated with the account.  Note that your account will be charged for each segment sent to the handset.
   */
  price: number;
  /**
   * The currency in which `Price` is measured, in ISO 4127 format (e.g. `usd`, `eur`, `jpy`).
   */
  priceUnit: string;
  /**
   * remove a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  remove(): Promise<MessageInstance>;
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this resource.
   */
  sid: string;
  /**
   * The status of this message. Either `queued`, `sending`, `sent`,`failed`, `delivered`,     `undelivered`, `receiving` or `received`.
   */
  status: MessageStatus;
  /**
   * The URIs for any subresources associate with this resource, relative to `https://api.twilio.com`
   */
  subresourceUris: string;
  /**
   * The phone number that received the message in E.164 format. For incoming messages, this will be one of your Twilio phone numbers. For outgoing messages, this will be the remote phone.
   */
  to: string;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  update(opts: MessageListFetchOptions): Promise<MessageInstance>;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageListFetchOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * The URI for this resource, relative to `https://api.twilio.com`
   */
  uri: string;
}

declare class MessageContext {
  constructor(version: V2010, accountSid: string, sid: string);

  feedback: FeedbackListInstance;
  /**
   * fetch a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  fetch(): Promise<MessageInstance>;
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MessageInstance) => any): void;
  media: MediaListInstance;
  /**
   * remove a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  remove(): Promise<MessageInstance>;
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  update(opts: MessageListFetchOptions): Promise<MessageInstance>;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageListFetchOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
}

export {MessageListFetchOptions, MessageListOptions, MessageAddressRetention, MessageListEachOptions, MessageInstance, MessageDirection, MessageResource, MessageSolution, MessageListPageOptions, MessageList, MessagePage, MessageListCreateOptions, MessageListInstance, MessagePayload, MessageContext, MessageStatus, MessageContentRetention}
