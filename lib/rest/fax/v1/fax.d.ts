/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../base/Page');
import Response = require('../../../http/response');
import V1 = require('../V1');
import { FaxMediaListInstance } from './fax/faxMedia';
import { ListEachOptions, ListOptions, PageOptions } from '../../../interfaces';

declare function FaxList(version: V1): FaxListInstance

type FaxDirection = 'inbound'|'outbound';

type FaxQuality = 'standard'|'fine'|'superfine';

type FaxStatus = 'queued'|'processing'|'sending'|'delivered'|'receiving'|'received'|'no-answer'|'busy'|'failed'|'canceled';

type FaxUpdateStatus = 'canceled';

interface FaxResource {
  /**
   * The unique SID identifier of the Account.
   */
  account_sid: string;
  /**
   * The API version used to transmit the fax. For this version of the API, it will always be `v1`.
   */
  api_version: string;
  /**
   * The date that this fax was created, given in ISO 8601 format.
   */
  date_created: Date;
  /**
   * The date that this fax was updated, given in ISO 8601 format.
   */
  date_updated: Date;
  /**
   * The transmission direction of this fax. One of `inbound` or `outbound`.
   */
  direction: FaxDirection;
  /**
   * The time taken to transmit the fax, in seconds.
   */
  duration: number;
  /**
   * The number the fax was sent from, in E.164 format, or the SIP `From` display name.
   */
  from: string;
  /**
   * Contains a dictionary of URL links to nested resources of this fax.
   */
  links: string;
  /**
   * The unique SID identifier of the media, if any, associated with the fax.
   */
  media_sid: string;
  /**
   * A URL that can be used to download a copy of the media sent or received for this fax.
   */
  media_url: string;
  /**
   * The number of pages sent or received.
   */
  num_pages: number;
  /**
   * The price billed to transmit this fax, in `price_unit` units.
   */
  price: number;
  /**
   * The currency used when billing for this fax.
   */
  price_unit: string;
  /**
   * The transmission quality of this fax. One of `standard`, `fine` or `superfine`.
   */
  quality: FaxQuality;
  /**
   * A 34 character string that uniquely identifies this fax.
   */
  sid: string;
  /**
   * The status of this fax. One of `queued`, `processing`, `sending`, `delivered`, `receiving`, `received`, `no-answer`, `busy`, `failed` or `canceled`.
   */
  status: FaxStatus;
  /**
   * The number, in E.164 format, or SIP address the fax was sent to.
   */
  to: string;
  /**
   * The URL of this resource.
   */
  url: string;
}

interface FaxPayload extends FaxResource, Page.TwilioResponsePayload {
}

interface FaxSolution {
}

interface FaxListEachOptions extends ListEachOptions<FaxInstance> {
  /**
   * Filters the returned list to only include faxes created after the supplied date, given in ISO 8601 format.
   */
  dateCreatedAfter?: Date;
  /**
   * Filters the returned list to only include faxes created on or before the supplied date, given in ISO 8601 format.
   */
  dateCreatedOnOrBefore?: Date;
  /**
   * Filters the returned list to only include faxes sent from the supplied number, given in E.164 format.
   */
  from?: string;
  /**
   * Filters the returned list to only include faxes sent to the supplied number, given in E.164 format.
   */
  to?: string;
}

interface FaxListOptions extends ListOptions<FaxInstance> {
  /**
   * Filters the returned list to only include faxes created after the supplied date, given in ISO 8601 format.
   */
  dateCreatedAfter?: Date;
  /**
   * Filters the returned list to only include faxes created on or before the supplied date, given in ISO 8601 format.
   */
  dateCreatedOnOrBefore?: Date;
  /**
   * Filters the returned list to only include faxes sent from the supplied number, given in E.164 format.
   */
  from?: string;
  /**
   * Filters the returned list to only include faxes sent to the supplied number, given in E.164 format.
   */
  to?: string;
}

interface FaxListPageOptions extends PageOptions<FaxPage> {
  /**
   * Filters the returned list to only include faxes created after the supplied date, given in ISO 8601 format.
   */
  dateCreatedAfter?: Date;
  /**
   * Filters the returned list to only include faxes created on or before the supplied date, given in ISO 8601 format.
   */
  dateCreatedOnOrBefore?: Date;
  /**
   * Filters the returned list to only include faxes sent from the supplied number, given in E.164 format.
   */
  from?: string;
  /**
   * Filters the returned list to only include faxes sent to the supplied number, given in E.164 format.
   */
  to?: string;
}

interface FaxListCreateOptions {
  /**
   * The phone number to use as the caller id, E.164-formatted. If using a phone number, it must be a Twilio number or a verified outgoing caller id for your account. If sending to a SIP address, this can be any alphanumeric string (plus the characters `+`, `_`, `.`, and `-`) to use in the From header of the SIP request.
   */
  from?: string;
  /**
   * The URL that Twilio will request to obtain the fax media to send, which must be a PDF file.
   */
  mediaUrl: string;
  /**
   * The quality setting to use for this fax. One of `standard`, `fine` or `superfine`.
   */
  quality?: FaxQuality;
  /**
   * The password to use for authentication when sending to a SIP address.
   */
  sipAuthPassword?: string;
  /**
   * The username to use for authentication when sending to a SIP address.
   */
  sipAuthUsername?: string;
  /**
   * The URL that Twilio will request when the status of the fax changes.
   */
  statusCallback?: string;
  /**
   * Whether or not to store a copy of the sent media on Twilio's servers for later retrieval (defaults to `true`)
   */
  storeMedia?: boolean;
  /**
   * The phone number or SIP address to send the fax to, E.164-formatted.
   */
  to: string;
}

interface FaxListInstance {
  /**
   * Gets context of a single Fax resource
   *
   * @param sid - A string that uniquely identifies this fax.
   */
  (sid: string): FaxContext;
  /**
   * create a FaxInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  create(opts: FaxListCreateOptions): Promise<FaxInstance>;
  /**
   * create a FaxInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: FaxListCreateOptions, callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * Streams FaxInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: FaxListEachOptions): void;
  /**
   * Streams FaxInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: FaxInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Fax resource
   *
   * @param sid - A string that uniquely identifies this fax.
   */
  get(sid: string): FaxContext;
  /**
   * Retrieve a single target page of FaxInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<FaxPage>;
  /**
   * Retrieve a single target page of FaxInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: FaxPage) => any): void;
  /**
   * Lists FaxInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: FaxListOptions): Promise<FaxInstance[]>;
  /**
   * Lists FaxInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: FaxListOptions, callback: (error: Error | null, items: FaxInstance[]) => any): void;
  /**
   * Lists FaxInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: FaxInstance[]) => any): void;
  /**
   * Retrieve a single page of FaxInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: FaxListPageOptions): Promise<FaxPage>;
  /**
   * Retrieve a single page of FaxInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: FaxListPageOptions, callback: (error: Error | null, items: FaxPage) => any): void;
  /**
   * Retrieve a single page of FaxInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: FaxPage) => any): void;
}

interface FaxListFetchOptions {
  /**
   * The updated status of this fax. The only valid option is `canceled`. This may fail if the status has already started transmission.
   */
  status?: FaxUpdateStatus;
}

interface FaxListFetchOptions {
  /**
   * The updated status of this fax. The only valid option is `canceled`. This may fail if the status has already started transmission.
   */
  status?: FaxUpdateStatus;
}

declare class FaxPage extends Page<V1, FaxPayload, FaxResource, FaxInstance> {
  constructor(version: V1, response: Response<string>, solution: FaxSolution);

  /**
   * Build an instance of FaxInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: FaxPayload): FaxInstance;
}

declare class FaxInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param sid - A string that uniquely identifies this fax.
   */
  constructor(version: V1, payload: FaxPayload, sid: string);

  private _proxy: FaxContext;
  /**
   * The unique SID identifier of the Account.
   */
  accountSid: string;
  /**
   * The API version used to transmit the fax. For this version of the API, it will always be `v1`.
   */
  apiVersion: string;
  /**
   * The date that this fax was created, given in ISO 8601 format.
   */
  dateCreated: Date;
  /**
   * The date that this fax was updated, given in ISO 8601 format.
   */
  dateUpdated: Date;
  /**
   * The transmission direction of this fax. One of `inbound` or `outbound`.
   */
  direction: FaxDirection;
  /**
   * The time taken to transmit the fax, in seconds.
   */
  duration: number;
  /**
   * fetch a FaxInstance
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  fetch(): Promise<FaxInstance>;
  /**
   * fetch a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * The number the fax was sent from, in E.164 format, or the SIP `From` display name.
   */
  from: string;
  /**
   * Contains a dictionary of URL links to nested resources of this fax.
   */
  links: string;
  media(): FaxMediaListInstance;
  /**
   * The unique SID identifier of the media, if any, associated with the fax.
   */
  mediaSid: string;
  /**
   * A URL that can be used to download a copy of the media sent or received for this fax.
   */
  mediaUrl: string;
  /**
   * The number of pages sent or received.
   */
  numPages: number;
  /**
   * The price billed to transmit this fax, in `price_unit` units.
   */
  price: number;
  /**
   * The currency used when billing for this fax.
   */
  priceUnit: string;
  /**
   * The transmission quality of this fax. One of `standard`, `fine` or `superfine`.
   */
  quality: FaxQuality;
  /**
   * remove a FaxInstance
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  remove(): Promise<FaxInstance>;
  /**
   * remove a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * A 34 character string that uniquely identifies this fax.
   */
  sid: string;
  /**
   * The status of this fax. One of `queued`, `processing`, `sending`, `delivered`, `receiving`, `received`, `no-answer`, `busy`, `failed` or `canceled`.
   */
  status: FaxStatus;
  /**
   * The number, in E.164 format, or SIP address the fax was sent to.
   */
  to: string;
  /**
   * update a FaxInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  update(opts?: FaxListFetchOptions): Promise<FaxInstance>;
  /**
   * update a FaxInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FaxListFetchOptions, callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * update a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * The URL of this resource.
   */
  url: string;
}

declare class FaxContext {
  constructor(version: V1, sid: string);

  /**
   * fetch a FaxInstance
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  fetch(): Promise<FaxInstance>;
  /**
   * fetch a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: FaxInstance) => any): void;
  media: FaxMediaListInstance;
  /**
   * remove a FaxInstance
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  remove(): Promise<FaxInstance>;
  /**
   * remove a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * update a FaxInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed FaxInstance
   */
  update(opts?: FaxListFetchOptions): Promise<FaxInstance>;
  /**
   * update a FaxInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: FaxListFetchOptions, callback: (error: Error | null, items: FaxInstance) => any): void;
  /**
   * update a FaxInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: FaxInstance) => any): void;
}

export {FaxListInstance, FaxPage, FaxQuality, FaxListEachOptions, FaxList, FaxSolution, FaxStatus, FaxUpdateStatus, FaxPayload, FaxResource, FaxListCreateOptions, FaxListFetchOptions, FaxDirection, FaxContext, FaxInstance, FaxListOptions, FaxListPageOptions}
