/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */

import Page = require('../../../../../base/Page');
import Response = require('../../../../../http/response');
import V1 = require('../../../V1');
import { ListEachOptions, ListOptions, PageOptions } from '../../../../../interfaces';

declare function MessageList(version: V1, serviceSid: string, channelSid: string): MessageListInstance

type MessageOrderType = 'asc'|'desc';

interface MessageResource {
  /**
   * The account_sid
   */
  account_sid: string;
  /**
   * The attributes
   */
  attributes: string;
  /**
   * The body
   */
  body: string;
  /**
   * The channel_sid
   */
  channel_sid: string;
  /**
   * The date_created
   */
  date_created: Date;
  /**
   * The date_updated
   */
  date_updated: Date;
  /**
   * The from
   */
  from: string;
  /**
   * The index
   */
  index: number;
  /**
   * The service_sid
   */
  service_sid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The to
   */
  to: string;
  /**
   * The url
   */
  url: string;
  /**
   * The was_edited
   */
  was_edited: boolean;
}

interface MessagePayload extends MessageResource, Page.TwilioResponsePayload {
}

interface MessageSolution {
  channelSid: string;
  serviceSid: string;
}

interface MessageListCreateOptions {
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The body
   */
  body: string;
  /**
   * The from
   */
  from?: string;
}

interface MessageListEachOptions extends ListEachOptions<MessageInstance> {
  /**
   * The order
   */
  order?: MessageOrderType;
}

interface MessageListOptions extends ListOptions<MessageInstance> {
  /**
   * The order
   */
  order?: MessageOrderType;
}

interface MessageListPageOptions extends PageOptions<MessagePage> {
  /**
   * The order
   */
  order?: MessageOrderType;
}

interface MessageListInstance {
  /**
   * Gets context of a single Message resource
   *
   * @param sid - The sid
   */
  (sid: string): MessageContext;
  /**
   * create a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  create(opts: MessageListCreateOptions): Promise<MessageInstance>;
  /**
   * create a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  create(opts: MessageListCreateOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  each(opts?: MessageListEachOptions): void;
  /**
   * Streams MessageInstance records from the API.
   *
   * This operation lazily loads records as efficiently as possible until the limit
   * is reached.
   *
   * The results are passed into the callback function, so this operation is memory efficient.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  each(callback: (item: MessageInstance, done: (err?: Error) => void) => void): any;
  /**
   * Gets context of a single Message resource
   *
   * @param sid - The sid
   */
  get(sid: string): MessageContext;
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   */
  getPage(targetUrl: string): Promise<MessagePage>;
  /**
   * Retrieve a single target page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param targetUrl - API-generated URL for the requested results page
   * @param callback - Callback to handle processed record
   */
  getPage(targetUrl: string, callback: (error: Error | null, items: MessagePage) => any): void;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  list(opts?: MessageListOptions): Promise<MessageInstance[]>;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  list(opts: MessageListOptions, callback: (error: Error | null, items: MessageInstance[]) => any): void;
  /**
   * Lists MessageInstance records from the API as a list.
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  list(callback: (error: Error | null, items: MessageInstance[]) => any): void;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   */
  page(opts?: MessageListPageOptions): Promise<MessagePage>;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  page(opts: MessageListPageOptions, callback: (error: Error | null, items: MessagePage) => any): void;
  /**
   * Retrieve a single page of MessageInstance records from the API.
   * Request is executed immediately
   *
   * If a function is passed as the first argument, it will be used as the callback function.
   *
   * @param callback - Callback to handle processed record
   */
  page(callback: (error: Error | null, items: MessagePage) => any): void;
}

interface MessageListFetchOptions {
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The body
   */
  body?: string;
}

interface MessageListFetchOptions {
  /**
   * The attributes
   */
  attributes?: string;
  /**
   * The body
   */
  body?: string;
}

declare class MessagePage extends Page<V1, MessagePayload, MessageResource, MessageInstance> {
  constructor(version: V1, response: Response<string>, solution: MessageSolution);

  /**
   * Build an instance of MessageInstance
   *
   * @param payload - Payload response from the API
   */
  getInstance(payload: MessagePayload): MessageInstance;
}

declare class MessageInstance {
  /**
   * @param version - Version of the resource
   * @param payload - The instance payload
   * @param serviceSid - The service_sid
   * @param channelSid - The channel_sid
   * @param sid - The sid
   */
  constructor(version: V1, payload: MessagePayload, serviceSid: string, channelSid: string, sid: string);

  private _proxy: MessageContext;
  /**
   * The account_sid
   */
  accountSid: string;
  /**
   * The attributes
   */
  attributes: string;
  /**
   * The body
   */
  body: string;
  /**
   * The channel_sid
   */
  channelSid: string;
  /**
   * The date_created
   */
  dateCreated: Date;
  /**
   * The date_updated
   */
  dateUpdated: Date;
  /**
   * fetch a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  fetch(): Promise<MessageInstance>;
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * The from
   */
  from: string;
  /**
   * The index
   */
  index: number;
  /**
   * remove a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  remove(): Promise<MessageInstance>;
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * The service_sid
   */
  serviceSid: string;
  /**
   * The sid
   */
  sid: string;
  /**
   * The to
   */
  to: string;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  update(opts?: MessageListFetchOptions): Promise<MessageInstance>;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageListFetchOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * update a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * The url
   */
  url: string;
  /**
   * The was_edited
   */
  wasEdited: boolean;
}

declare class MessageContext {
  constructor(version: V1, serviceSid: string, channelSid: string, sid: string);

  /**
   * fetch a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  fetch(): Promise<MessageInstance>;
  /**
   * fetch a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  fetch(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * remove a MessageInstance
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  remove(): Promise<MessageInstance>;
  /**
   * remove a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  remove(callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   *
   * @returns Promise that resolves to processed MessageInstance
   */
  update(opts?: MessageListFetchOptions): Promise<MessageInstance>;
  /**
   * update a MessageInstance
   *
   * @param opts - Options for request
   * @param callback - Callback to handle processed record
   */
  update(opts: MessageListFetchOptions, callback: (error: Error | null, items: MessageInstance) => any): void;
  /**
   * update a MessageInstance
   *
   * @param callback - Callback to handle processed record
   */
  update(callback: (error: Error | null, items: MessageInstance) => any): void;
}

export {MessageResource, MessagePayload, MessageListOptions, MessageSolution, MessageListPageOptions, MessageListFetchOptions, MessageOrderType, MessageContext, MessageInstance, MessagePage, MessageListInstance, MessageList, MessageListEachOptions, MessageListCreateOptions}
